module Logics where

-- The following theories are also present in the Algebra library 
Theory Empty = {} 
Carrier = extend Empty {A : Set}
UnaryOperation = extend Carrier {prim : A -> A}
Magma = extend Carrier {op : A -> A -> A}
-- -----------------------------------------------------------------

PropCarrier = rename Carrier {A to Prop}
ImplMagma = rename Magma {op to impl}
AndMagma = rename Magma {op to and}
OrMagma = rename Magma {op to or} 
NotUnaryOp = rename UnaryOperation {prim to not}
NecessityUnaryOp = rename UnaryOperation {prim to box}
Deductive = extend PropCarrier { ded : Prop -> Set } 


ImplicationLogicSig = combine Deductive {} ImplMagma {A to Prop} over Carrier
NotLogicSig = combine Deductive {} NotUnaryOp {A to Prop} over Carrier 
AndLogicSig = combine Deductive {} AndMagma {A to Prop} over Carrier 
OrLogicSig = combine Deductive {} OrMagma {A to Prop} over Carrier 

ImplicationNotLogicSig = combine ImplicationLogicSig {} NotLogicSig {} over Deductive
ImplicationAndLogicSig = combine ImplicationLogicSig {} AndLogicSig {} over Deductive
ImplicationOrLogicSig = combine ImplicationLogicSig {} OrLogicSig {} over Deductive

-- PC axioms 
Contraposition = extend ImplicationNotLogicSig {
  contrap : {p q : Prop} -> ded (impl (not p) (not q)) -> ded (impl q p) }
DoubleNegation = extend NotLogicSig { dneg : {p : Prop} -> ded (not (not p)) -> ded p }

-- PL axioms
ImplicationIntro = extend ImplicationLogicSig { implI : {p q : Prop} -> ded p -> ded (impl q p) }
ImplicationDistrib = extend ImplicationLogicSig { implDistrib : {p q r: Prop} -> ded (impl p (impl q r)) -> ded (impl (impl p q) (impl p r)) }
AndElimL = extend AndLogicSig { andElimL : {p q : Prop} -> ded (and p q) -> ded p  } 
AndElimR = extend AndLogicSig { andElimR : {p q : Prop} -> ded (and p q) -> ded q  } 
AndIntro = extend AndLogicSig { andIntro : {p q : Prop} -> ded p -> ded q -> ded (and p q) }
OrIntroL = extend OrLogicSig { orIntroL : {p q : Prop} -> ded p -> ded (or p q) }
OrIntroR = extend OrLogicSig { orIntroR : {p q : Prop} -> ded q -> ded (or p q) }
OrImpl = extend ImplicationOrLogicSig { orImpl : {p q r : Prop} -> ded (impl p r) -> ded (impl q r) -> ded (impl (or p q) r) }

ImplicationLogic = combine ImplicationIntro {} ImplicationDistrib {} over ImplicationLogicSig

AndElimLogic = combine AndElimL {} AndElimR {} over AndLogicSig
AndLogic = combine AndElimLogic {} AndIntro {} over AndLogicSig 

OrIntroLogic = combine OrIntroL {} OrIntroR {} over OrLogicSig
OrLogic = combine OrIntroLogic {} OrImpl {} over OrLogicSig

AndOrLogic = combine AndLogic {} OrLogic {} over Deductive
AndOrImplLogic = combine AndOrLogic {} ImplicationLogic {} over ImplicationLogicSig

ModusPonens = extend ImplicationLogicSig { modusPonens : {p q : Prop} -> ded p -> ded (impl p q) -> ded q }
ModusPonensWContrap = combine ModusPonens {} Contraposition {} over ImplicationLogicSig 
PropositionalLogic = combine ModusPonensWContrap {} AndOrImplLogic {} over ImplicationLogicSig 

NecessitySig = combine Deductive {} NecessityUnaryOp {A to Prop} over Carrier
ImplicationNecessitySig = combine ImplicationLogicSig {} NecessitySig {} over Deductive

AxiomK = extend ImplicationNecessitySig {
 axiomK : {p q : Prop} -> ded (box (impl p q)) -> ded (impl (box p) (box q)) }
Axiom4 = extend NecessitySig {
 axiom4 : {p : Prop} -> ded (box p) -> ded (box (box p)) }
-- stated in the original lib as axiom T, but on the stanford definition of Modal Logic, it is axiom M. 
AxiomM = extend NecessitySig {
 axiomM : {p : Prop} -> ded (box p) -> ded p } 

AxiomsM4 = combine AxiomM {} Axiom4 {} over NecessitySig
ModLogicAxioms = combine AxiomK {} AxiomsM4 {} over NecessitySig

ModalLogic = combine ModLogicAxioms {} PropositionalLogic {} over ImplicationLogicSig

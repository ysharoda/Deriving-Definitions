------------------------------------------------------------------------
-- Checking declarations
------------------------------------------------------------------------
-- Solved Metas: 15407
-- Unsolved Metas: 0
------------------------------------------------------------------------
-- Unsolved problems: 0
------------------------------------------------------------------------
module MathScheme where
  data Prod
    (A : Set) (B : Set) : Set where
    
  module NatNums where
    
  
  data Nat : Set where
    zero : Nat
    suc : Nat -> Nat
  module Prelude where
    
  
  data Fin (n : Nat) : Set where
    fzero :
      (m : Nat) (p : n == suc m) ->
      Fin n
    fsuc :
      (m : Nat) (p : n == suc m)
      (i : Fin m) -> Fin n
  pred : Nat -> Nat
  pred (zero) = zero
  pred (suc n) = n
  data Vec
    (A : Set) (n : Nat) : Set where
    nil : n == zero -> Vec A n
    cons :
      (m : Nat) (p : n == suc m)
      (x : A)
      (xs : Vec A m) -> Vec A n
  data Unit : Set where
    unit : Unit
  EmptyT : Set
  EmptyT = (A : Set) -> A
  subst :
    (A : Set) (x : A) (y : A)
    (P : A -> Set) ->
    x == y -> P x -> P y
  subst _ _ _ P =
    J _ _ _ (\ x y _ -> P x -> P y)
      (\ x p -> p)
  sym :
    (A : Set) (x : A) (y : A) ->
    x == y -> y == x
  sym A x y p =
    subst _ _ _ (\ y -> y == x) p
      refl
  cong :
    (A : Set) (B : Set) (x : A)
    (y : A)
    (f : A -> B) ->
    x == y -> f x == f y
  cong _ _ _ _ f p =
    subst _ _ _ (\ y -> f _ == f y)
      p
      refl
  IsZero : Nat -> Set
  IsZero (zero) = Unit
  IsZero (suc n) = EmptyT
  zeroNOTsuc :
    (n : Nat) ->
    zero == suc n -> EmptyT
  zeroNOTsuc _ p =
    subst _ _ _ IsZero p unit
  trans :
    (A : Set) (x : A) (y : A)
    (z : A) ->
    x == y -> y == z -> x == z
  trans A x _ _ p q =
    subst _ _ _ (\ y -> x == y) q p
  lemma :
    (n : Nat) (m : Nat) ->
    n == suc m ->
    n == zero -> EmptyT
  lemma _ _ p q =
    zeroNOTsuc _
      (trans _ _ _ _ (sym _ _ _ q) p)
  sucInj :
    (n : Nat) (m : Nat) ->
    suc n == suc m -> n == m
  sucInj _ _ p =
    cong _ _ _ _ pred p
  lookup :
    (A : Set) (n : Nat) (i : Fin n)
    (v : Vec A n) -> A
  lookup A n (fzero m p) (nil q) =
    lemma _ _ p q A
  lookup A n (fzero m p) (cons
                          l
                          q
                          x
                          xs) = x
  lookup A n (fsuc m p i) (nil
                           q) = lemma _ _ p q A
  lookup A n (fsuc m p i) (cons
                           l
                           q
                           x
                           xs) =
    lookup _ m i
      (subst _ _ _ (Vec A)
         (sucInj _ _
            (trans _ _ _ _ (sym _ _ _ q) p))
         xs)
  module Code where
    
  
  open NatNums
  data Wrap (A : Set) : Set where
    Q : A -> Wrap A
  data Stage : Set where
    s0 : Stage
    s1 : Stage
  CodeRep :
    (A : Set) (s : Stage) -> Set
  CodeRep A (s0) = A
  CodeRep A (s1) =
    Wrap (CodeRep A s0)
  uncode :
    (A : Set) ->
    CodeRep A s1 -> CodeRep A s0
  uncode _ (Q x) = x
  code :
    (A : Set) ->
    CodeRep A s0 -> CodeRep A s1
  code _ x = Q x
  run :
    (A : Set) -> CodeRep A s1 -> A
  run _ (Q x) = x
  module Staging where
    
  
  open Code
  data Choice : Set where
    Expr : Choice
    Const : Choice
  data Comp
    (A : Set) (s : Stage) :
    Set where
    Computation :
      Choice ->
      CodeRep A s -> Comp A s
  data Staged
    (A : Set) : Set where
    Now : A -> Staged A
    Later : Comp A s1 -> Staged A
  expr :
    (A : Set) ->
    CodeRep A s1 -> Staged A
  expr _ x =
    Later (Computation Expr x)
  const :
    (A : Set) ->
    CodeRep A s1 -> Staged A
  const _ x =
    Later (Computation Const x)
  stage0 :
    (A : Set) -> A -> Staged A
  stage0 _ x = Now x
  stage1 :
    (A : Set) (B : Set) ->
    (A -> B) ->
    (CodeRep A s1 ->
     CodeRep B s1) ->
    Staged A -> Staged B
  stage1 _ _ f g (Now x) =
    Now (f x)
  stage1 _ _ f g (Later
                  (Computation _ x)) =
    expr _ (g x)
  stage2 :
    (A : Set) (B : Set) (C : Set) ->
    (A -> B -> C) ->
    (CodeRep A s1 ->
     CodeRep B s1 -> CodeRep C s1) ->
    Staged A -> Staged B -> Staged C
  stage2 _ _ _ f _ (Now x) (Now
                            y) = stage0 _ (f x y)
  stage2 _ _ _ _ g (Now x) (Later
                            (Computation _ y)) =
    expr _ (g (code _ x) y)
  stage2 _ _ _ _ g (Later
                    (Computation _ x)) (Now y) =
    expr _ (g x (code _ y))
  stage2 _ _ _ _ g (Later
                    (Computation _ x)) (Later
                                        (Computation _ y)) =
    expr _ (g x y)
  codeLift1 :
    (A : Set) (B : Set) ->
    (A -> B) ->
    CodeRep A s1 -> CodeRep B s1
  codeLift1 _ _ f (Q x) = Q (f x)
  codeLift2 :
    (A : Set) (B : Set) (C : Set) ->
    (A -> B -> C) ->
    CodeRep A s1 ->
    CodeRep B s1 -> CodeRep C s1
  codeLift2 _ _ _ f (Q x) (Q y) =
    Q (f x y)
  module AdditiveCommutativeSemigroup where
    record AdditiveCommutativeSemigroup
      (A : Set) : Set where
      constructor AdditiveCommutativeSemigroupC
      field
        + : A -> A -> A
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
    record AdditiveCommutativeSemigroupSig
      (AS : Set) : Set where
      constructor AdditiveCommutativeSemigroupSigSigC
      field
        +S : AS -> AS -> AS
    record AdditiveCommutativeSemigroupProd
      (AP : Set) : Set where
      constructor AdditiveCommutativeSemigroupProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
    record AdditiveCommutativeSemigroupHom
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveCommutativeSemigroup
         A1)
      (Ad2 : AdditiveCommutativeSemigroup
         A2) : Set where
      constructor AdditiveCommutativeSemigroupHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ad1 x1 x2) ==
            + Ad2 (hom x1) (hom x2)
    record AdditiveCommutativeSemigroupRelInterp
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveCommutativeSemigroup
         A1)
      (Ad2 : AdditiveCommutativeSemigroup
         A2) : Set where
      constructor AdditiveCommutativeSemigroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ad1 x1 x2)
            (+ Ad2 y1 y2)
    data AdditiveCommutativeSemigroupTerm
      : Set where
      +L :
        AdditiveCommutativeSemigroupTerm ->
        AdditiveCommutativeSemigroupTerm ->
        AdditiveCommutativeSemigroupTerm
    data ClAdditiveCommutativeSemigroupTerm
      (A : Set) : Set where
      sing :
        A ->
        ClAdditiveCommutativeSemigroupTerm
          A
      +Cl :
        ClAdditiveCommutativeSemigroupTerm
          A ->
        ClAdditiveCommutativeSemigroupTerm
          A ->
        ClAdditiveCommutativeSemigroupTerm
          A
    data OpAdditiveCommutativeSemigroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpAdditiveCommutativeSemigroupTerm
          n
      +OL :
        OpAdditiveCommutativeSemigroupTerm
          n ->
        OpAdditiveCommutativeSemigroupTerm
          n ->
        OpAdditiveCommutativeSemigroupTerm
          n
    data OpAdditiveCommutativeSemigroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAdditiveCommutativeSemigroupTerm2
          n
          A
      sing2 :
        A ->
        OpAdditiveCommutativeSemigroupTerm2
          n
          A
      +OL2 :
        OpAdditiveCommutativeSemigroupTerm2
          n
          A ->
        OpAdditiveCommutativeSemigroupTerm2
          n
          A ->
        OpAdditiveCommutativeSemigroupTerm2
          n
          A
    simplifyB :
      AdditiveCommutativeSemigroupTerm ->
      AdditiveCommutativeSemigroupTerm
    simplifyB (+L x1 x2) =
      +L (simplifyB x1) (simplifyB x2)
    simplifyCl :
      (A : Set) ->
      ClAdditiveCommutativeSemigroupTerm
        A ->
      ClAdditiveCommutativeSemigroupTerm
        A
    simplifyCl _ (+Cl x1 x2) =
      +Cl (simplifyCl _ x1)
        (simplifyCl _ x2)
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpAdditiveCommutativeSemigroupTerm
        n ->
      OpAdditiveCommutativeSemigroupTerm
        n
    simplifyOp _ (+OL x1 x2) =
      +OL (simplifyOp _ x1)
        (simplifyOp _ x2)
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpAdditiveCommutativeSemigroupTerm2
        n
        A ->
      OpAdditiveCommutativeSemigroupTerm2
        n
        A
    simplifyOpE _ _ (+OL2 x1 x2) =
      +OL2 (simplifyOpE _ _ x1)
        (simplifyOpE _ _ x2)
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  
  module AdditiveMagma where
    record AdditiveMagma
      (A : Set) : Set where
      constructor AdditiveMagmaC
      field
        + : A -> A -> A
    record AdditiveMagmaSig
      (AS : Set) : Set where
      constructor AdditiveMagmaSigSigC
      field
        +S : AS -> AS -> AS
    record AdditiveMagmaProd
      (AP : Set) : Set where
      constructor AdditiveMagmaProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record AdditiveMagmaHom
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveMagma A1)
      (Ad2 : AdditiveMagma A2) :
      Set where
      constructor AdditiveMagmaHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ad1 x1 x2) ==
            + Ad2 (hom x1) (hom x2)
    record AdditiveMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveMagma A1)
      (Ad2 : AdditiveMagma A2) :
      Set where
      constructor AdditiveMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ad1 x1 x2)
            (+ Ad2 y1 y2)
    data AdditiveMagmaTerm
      : Set where
      +L :
        AdditiveMagmaTerm ->
        AdditiveMagmaTerm ->
        AdditiveMagmaTerm
    data ClAdditiveMagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClAdditiveMagmaTerm A
      +Cl :
        ClAdditiveMagmaTerm A ->
        ClAdditiveMagmaTerm A ->
        ClAdditiveMagmaTerm A
    data OpAdditiveMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpAdditiveMagmaTerm n
      +OL :
        OpAdditiveMagmaTerm n ->
        OpAdditiveMagmaTerm n ->
        OpAdditiveMagmaTerm n
    data OpAdditiveMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAdditiveMagmaTerm2 n A
      sing2 :
        A -> OpAdditiveMagmaTerm2 n A
      +OL2 :
        OpAdditiveMagmaTerm2 n A ->
        OpAdditiveMagmaTerm2 n A ->
        OpAdditiveMagmaTerm2 n A
    simplifyB :
      AdditiveMagmaTerm ->
      AdditiveMagmaTerm
    simplifyB (+L x1 x2) =
      +L (simplifyB x1) (simplifyB x2)
    simplifyCl :
      (A : Set) ->
      ClAdditiveMagmaTerm A ->
      ClAdditiveMagmaTerm A
    simplifyCl _ (+Cl x1 x2) =
      +Cl (simplifyCl _ x1)
        (simplifyCl _ x2)
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpAdditiveMagmaTerm n ->
      OpAdditiveMagmaTerm n
    simplifyOp _ (+OL x1 x2) =
      +OL (simplifyOp _ x1)
        (simplifyOp _ x2)
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpAdditiveMagmaTerm2 n A ->
      OpAdditiveMagmaTerm2 n A
    simplifyOpE _ _ (+OL2 x1 x2) =
      +OL2 (simplifyOpE _ _ x1)
        (simplifyOpE _ _ x2)
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  
  module AdditiveMonoid where
    record AdditiveMonoid
      (A : Set) : Set where
      constructor AdditiveMonoidC
      field
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
    record AdditiveMonoidSig
      (AS : Set) : Set where
      constructor AdditiveMonoidSigSigC
      field
        +S : AS -> AS -> AS
        0S : AS
    record AdditiveMonoidProd
      (AP : Set) : Set where
      constructor AdditiveMonoidProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
    record AdditiveMonoidHom
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveMonoid A1)
      (Ad2 : AdditiveMonoid A2) :
      Set where
      constructor AdditiveMonoidHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ad1 x1 x2) ==
            + Ad2 (hom x1) (hom x2)
        pres-0 : hom (0 Ad1) == 0 Ad2
    record AdditiveMonoidRelInterp
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveMonoid A1)
      (Ad2 : AdditiveMonoid A2) :
      Set where
      constructor AdditiveMonoidRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ad1 x1 x2)
            (+ Ad2 y1 y2)
        interp-0 :
          interp (0 Ad1) (0 Ad2)
    data AdditiveMonoidTerm
      : Set where
      +L :
        AdditiveMonoidTerm ->
        AdditiveMonoidTerm ->
        AdditiveMonoidTerm
      0L : AdditiveMonoidTerm
    data ClAdditiveMonoidTerm
      (A : Set) : Set where
      sing :
        A -> ClAdditiveMonoidTerm A
      +Cl :
        ClAdditiveMonoidTerm A ->
        ClAdditiveMonoidTerm A ->
        ClAdditiveMonoidTerm A
      0Cl : ClAdditiveMonoidTerm A
    data OpAdditiveMonoidTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpAdditiveMonoidTerm n
      +OL :
        OpAdditiveMonoidTerm n ->
        OpAdditiveMonoidTerm n ->
        OpAdditiveMonoidTerm n
      0OL : OpAdditiveMonoidTerm n
    data OpAdditiveMonoidTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAdditiveMonoidTerm2 n A
      sing2 :
        A -> OpAdditiveMonoidTerm2 n A
      +OL2 :
        OpAdditiveMonoidTerm2 n A ->
        OpAdditiveMonoidTerm2 n A ->
        OpAdditiveMonoidTerm2 n A
      0OL2 : OpAdditiveMonoidTerm2 n A
    simplifyB :
      AdditiveMonoidTerm ->
      AdditiveMonoidTerm
    simplifyB (+L x1 x2) =
      +L (simplifyB x1) (simplifyB x2)
    simplifyB (0L) = 0L
    simplifyCl :
      (A : Set) ->
      ClAdditiveMonoidTerm A ->
      ClAdditiveMonoidTerm A
    simplifyCl _ (+Cl x1 x2) =
      +Cl (simplifyCl _ x1)
        (simplifyCl _ x2)
    simplifyCl _ (0Cl) = 0Cl
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpAdditiveMonoidTerm n ->
      OpAdditiveMonoidTerm n
    simplifyOp _ (+OL x1 x2) =
      +OL (simplifyOp _ x1)
        (simplifyOp _ x2)
    simplifyOp _ (0OL) = 0OL
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpAdditiveMonoidTerm2 n A ->
      OpAdditiveMonoidTerm2 n A
    simplifyOpE _ _ (+OL2 x1 x2) =
      +OL2 (simplifyOpE _ _ x1)
        (simplifyOpE _ _ x2)
    simplifyOpE _ _ (0OL2) = 0OL2
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  
  module AdditivePointedMagma where
    record AdditivePointedMagma
      (A : Set) : Set where
      constructor AdditivePointedMagmaC
      field
        0 : A
        + : A -> A -> A
    record AdditivePointedMagmaSig
      (AS : Set) : Set where
      constructor AdditivePointedMagmaSigSigC
      field
        0S : AS
        +S : AS -> AS -> AS
    record AdditivePointedMagmaProd
      (AP : Set) : Set where
      constructor AdditivePointedMagmaProdC
      field
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record AdditivePointedMagmaHom
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditivePointedMagma A1)
      (Ad2 : AdditivePointedMagma
         A2) : Set where
      constructor AdditivePointedMagmaHomC
      field
        hom : A1 -> A2
        pres-0 : hom (0 Ad1) == 0 Ad2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ad1 x1 x2) ==
            + Ad2 (hom x1) (hom x2)
    record AdditivePointedMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditivePointedMagma A1)
      (Ad2 : AdditivePointedMagma
         A2) : Set where
      constructor AdditivePointedMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0 :
          interp (0 Ad1) (0 Ad2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ad1 x1 x2)
            (+ Ad2 y1 y2)
    data AdditivePointedMagmaTerm
      : Set where
      0L : AdditivePointedMagmaTerm
      +L :
        AdditivePointedMagmaTerm ->
        AdditivePointedMagmaTerm ->
        AdditivePointedMagmaTerm
    data ClAdditivePointedMagmaTerm
      (A : Set) : Set where
      sing :
        A ->
        ClAdditivePointedMagmaTerm A
      0Cl :
        ClAdditivePointedMagmaTerm A
      +Cl :
        ClAdditivePointedMagmaTerm A ->
        ClAdditivePointedMagmaTerm A ->
        ClAdditivePointedMagmaTerm A
    data OpAdditivePointedMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpAdditivePointedMagmaTerm n
      0OL :
        OpAdditivePointedMagmaTerm n
      +OL :
        OpAdditivePointedMagmaTerm n ->
        OpAdditivePointedMagmaTerm n ->
        OpAdditivePointedMagmaTerm n
    data OpAdditivePointedMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAdditivePointedMagmaTerm2 n A
      sing2 :
        A ->
        OpAdditivePointedMagmaTerm2 n A
      0OL2 :
        OpAdditivePointedMagmaTerm2 n A
      +OL2 :
        OpAdditivePointedMagmaTerm2 n
          A ->
        OpAdditivePointedMagmaTerm2 n
          A ->
        OpAdditivePointedMagmaTerm2 n A
    simplifyB :
      AdditivePointedMagmaTerm ->
      AdditivePointedMagmaTerm
    simplifyB (0L) = 0L
    simplifyB (+L x1 x2) =
      +L (simplifyB x1) (simplifyB x2)
    simplifyCl :
      (A : Set) ->
      ClAdditivePointedMagmaTerm A ->
      ClAdditivePointedMagmaTerm A
    simplifyCl _ (0Cl) = 0Cl
    simplifyCl _ (+Cl x1 x2) =
      +Cl (simplifyCl _ x1)
        (simplifyCl _ x2)
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpAdditivePointedMagmaTerm n ->
      OpAdditivePointedMagmaTerm n
    simplifyOp _ (0OL) = 0OL
    simplifyOp _ (+OL x1 x2) =
      +OL (simplifyOp _ x1)
        (simplifyOp _ x2)
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpAdditivePointedMagmaTerm2 n
        A ->
      OpAdditivePointedMagmaTerm2 n A
    simplifyOpE _ _ (0OL2) = 0OL2
    simplifyOpE _ _ (+OL2 x1 x2) =
      +OL2 (simplifyOpE _ _ x1)
        (simplifyOpE _ _ x2)
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  
  module AdditivePointedSemigroup where
    record AdditivePointedSemigroup
      (A : Set) : Set where
      constructor AdditivePointedSemigroupC
      field
        0 : A
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
    record AdditivePointedSemigroupSig
      (AS : Set) : Set where
      constructor AdditivePointedSemigroupSigSigC
      field
        0S : AS
        +S : AS -> AS -> AS
    record AdditivePointedSemigroupProd
      (AP : Set) : Set where
      constructor AdditivePointedSemigroupProdC
      field
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
    record AdditivePointedSemigroupHom
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditivePointedSemigroup
         A1)
      (Ad2 : AdditivePointedSemigroup
         A2) : Set where
      constructor AdditivePointedSemigroupHomC
      field
        hom : A1 -> A2
        pres-0 : hom (0 Ad1) == 0 Ad2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ad1 x1 x2) ==
            + Ad2 (hom x1) (hom x2)
    record AdditivePointedSemigroupRelInterp
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditivePointedSemigroup
         A1)
      (Ad2 : AdditivePointedSemigroup
         A2) : Set where
      constructor AdditivePointedSemigroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0 :
          interp (0 Ad1) (0 Ad2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ad1 x1 x2)
            (+ Ad2 y1 y2)
    data AdditivePointedSemigroupTerm
      : Set where
      0L :
        AdditivePointedSemigroupTerm
      +L :
        AdditivePointedSemigroupTerm ->
        AdditivePointedSemigroupTerm ->
        AdditivePointedSemigroupTerm
    data ClAdditivePointedSemigroupTerm
      (A : Set) : Set where
      sing :
        A ->
        ClAdditivePointedSemigroupTerm A
      0Cl :
        ClAdditivePointedSemigroupTerm A
      +Cl :
        ClAdditivePointedSemigroupTerm
          A ->
        ClAdditivePointedSemigroupTerm
          A ->
        ClAdditivePointedSemigroupTerm A
    data OpAdditivePointedSemigroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpAdditivePointedSemigroupTerm n
      0OL :
        OpAdditivePointedSemigroupTerm n
      +OL :
        OpAdditivePointedSemigroupTerm
          n ->
        OpAdditivePointedSemigroupTerm
          n ->
        OpAdditivePointedSemigroupTerm n
    data OpAdditivePointedSemigroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAdditivePointedSemigroupTerm2
          n
          A
      sing2 :
        A ->
        OpAdditivePointedSemigroupTerm2
          n
          A
      0OL2 :
        OpAdditivePointedSemigroupTerm2
          n
          A
      +OL2 :
        OpAdditivePointedSemigroupTerm2
          n
          A ->
        OpAdditivePointedSemigroupTerm2
          n
          A ->
        OpAdditivePointedSemigroupTerm2
          n
          A
    simplifyB :
      AdditivePointedSemigroupTerm ->
      AdditivePointedSemigroupTerm
    simplifyB (0L) = 0L
    simplifyB (+L x1 x2) =
      +L (simplifyB x1) (simplifyB x2)
    simplifyCl :
      (A : Set) ->
      ClAdditivePointedSemigroupTerm
        A ->
      ClAdditivePointedSemigroupTerm A
    simplifyCl _ (0Cl) = 0Cl
    simplifyCl _ (+Cl x1 x2) =
      +Cl (simplifyCl _ x1)
        (simplifyCl _ x2)
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpAdditivePointedSemigroupTerm
        n ->
      OpAdditivePointedSemigroupTerm n
    simplifyOp _ (0OL) = 0OL
    simplifyOp _ (+OL x1 x2) =
      +OL (simplifyOp _ x1)
        (simplifyOp _ x2)
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpAdditivePointedSemigroupTerm2
        n
        A ->
      OpAdditivePointedSemigroupTerm2
        n
        A
    simplifyOpE _ _ (0OL2) = 0OL2
    simplifyOpE _ _ (+OL2 x1 x2) =
      +OL2 (simplifyOpE _ _ x1)
        (simplifyOpE _ _ x2)
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  
  module AdditiveSemigroup where
    record AdditiveSemigroup
      (A : Set) : Set where
      constructor AdditiveSemigroupC
      field
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
    record AdditiveSemigroupSig
      (AS : Set) : Set where
      constructor AdditiveSemigroupSigSigC
      field
        +S : AS -> AS -> AS
    record AdditiveSemigroupProd
      (AP : Set) : Set where
      constructor AdditiveSemigroupProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
    record AdditiveSemigroupHom
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveSemigroup A1)
      (Ad2 : AdditiveSemigroup A2) :
      Set where
      constructor AdditiveSemigroupHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ad1 x1 x2) ==
            + Ad2 (hom x1) (hom x2)
    record AdditiveSemigroupRelInterp
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveSemigroup A1)
      (Ad2 : AdditiveSemigroup A2) :
      Set where
      constructor AdditiveSemigroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ad1 x1 x2)
            (+ Ad2 y1 y2)
    data AdditiveSemigroupTerm
      : Set where
      +L :
        AdditiveSemigroupTerm ->
        AdditiveSemigroupTerm ->
        AdditiveSemigroupTerm
    data ClAdditiveSemigroupTerm
      (A : Set) : Set where
      sing :
        A -> ClAdditiveSemigroupTerm A
      +Cl :
        ClAdditiveSemigroupTerm A ->
        ClAdditiveSemigroupTerm A ->
        ClAdditiveSemigroupTerm A
    data OpAdditiveSemigroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpAdditiveSemigroupTerm n
      +OL :
        OpAdditiveSemigroupTerm n ->
        OpAdditiveSemigroupTerm n ->
        OpAdditiveSemigroupTerm n
    data OpAdditiveSemigroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAdditiveSemigroupTerm2 n A
      sing2 :
        A ->
        OpAdditiveSemigroupTerm2 n A
      +OL2 :
        OpAdditiveSemigroupTerm2 n A ->
        OpAdditiveSemigroupTerm2 n A ->
        OpAdditiveSemigroupTerm2 n A
    simplifyB :
      AdditiveSemigroupTerm ->
      AdditiveSemigroupTerm
    simplifyB (+L x1 x2) =
      +L (simplifyB x1) (simplifyB x2)
    simplifyCl :
      (A : Set) ->
      ClAdditiveSemigroupTerm A ->
      ClAdditiveSemigroupTerm A
    simplifyCl _ (+Cl x1 x2) =
      +Cl (simplifyCl _ x1)
        (simplifyCl _ x2)
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpAdditiveSemigroupTerm n ->
      OpAdditiveSemigroupTerm n
    simplifyOp _ (+OL x1 x2) =
      +OL (simplifyOp _ x1)
        (simplifyOp _ x2)
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpAdditiveSemigroupTerm2 n A ->
      OpAdditiveSemigroupTerm2 n A
    simplifyOpE _ _ (+OL2 x1 x2) =
      +OL2 (simplifyOpE _ _ x1)
        (simplifyOpE _ _ x2)
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  
  module AdditiveUnital where
    record AdditiveUnital
      (A : Set) : Set where
      constructor AdditiveUnitalC
      field
        0 : A
        + : A -> A -> A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
    record AdditiveUnitalSig
      (AS : Set) : Set where
      constructor AdditiveUnitalSigSigC
      field
        0S : AS
        +S : AS -> AS -> AS
    record AdditiveUnitalProd
      (AP : Set) : Set where
      constructor AdditiveUnitalProdC
      field
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
    record AdditiveUnitalHom
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveUnital A1)
      (Ad2 : AdditiveUnital A2) :
      Set where
      constructor AdditiveUnitalHomC
      field
        hom : A1 -> A2
        pres-0 : hom (0 Ad1) == 0 Ad2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ad1 x1 x2) ==
            + Ad2 (hom x1) (hom x2)
    record AdditiveUnitalRelInterp
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveUnital A1)
      (Ad2 : AdditiveUnital A2) :
      Set where
      constructor AdditiveUnitalRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0 :
          interp (0 Ad1) (0 Ad2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ad1 x1 x2)
            (+ Ad2 y1 y2)
    data AdditiveUnitalTerm
      : Set where
      0L : AdditiveUnitalTerm
      +L :
        AdditiveUnitalTerm ->
        AdditiveUnitalTerm ->
        AdditiveUnitalTerm
    data ClAdditiveUnitalTerm
      (A : Set) : Set where
      sing :
        A -> ClAdditiveUnitalTerm A
      0Cl : ClAdditiveUnitalTerm A
      +Cl :
        ClAdditiveUnitalTerm A ->
        ClAdditiveUnitalTerm A ->
        ClAdditiveUnitalTerm A
    data OpAdditiveUnitalTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpAdditiveUnitalTerm n
      0OL : OpAdditiveUnitalTerm n
      +OL :
        OpAdditiveUnitalTerm n ->
        OpAdditiveUnitalTerm n ->
        OpAdditiveUnitalTerm n
    data OpAdditiveUnitalTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAdditiveUnitalTerm2 n A
      sing2 :
        A -> OpAdditiveUnitalTerm2 n A
      0OL2 : OpAdditiveUnitalTerm2 n A
      +OL2 :
        OpAdditiveUnitalTerm2 n A ->
        OpAdditiveUnitalTerm2 n A ->
        OpAdditiveUnitalTerm2 n A
    simplifyB :
      AdditiveUnitalTerm ->
      AdditiveUnitalTerm
    simplifyB (0L) = 0L
    simplifyB (+L x1 x2) =
      +L (simplifyB x1) (simplifyB x2)
    simplifyCl :
      (A : Set) ->
      ClAdditiveUnitalTerm A ->
      ClAdditiveUnitalTerm A
    simplifyCl _ (0Cl) = 0Cl
    simplifyCl _ (+Cl x1 x2) =
      +Cl (simplifyCl _ x1)
        (simplifyCl _ x2)
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpAdditiveUnitalTerm n ->
      OpAdditiveUnitalTerm n
    simplifyOp _ (0OL) = 0OL
    simplifyOp _ (+OL x1 x2) =
      +OL (simplifyOp _ x1)
        (simplifyOp _ x2)
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpAdditiveUnitalTerm2 n A ->
      OpAdditiveUnitalTerm2 n A
    simplifyOpE _ _ (0OL2) = 0OL2
    simplifyOpE _ _ (+OL2 x1 x2) =
      +OL2 (simplifyOpE _ _ x1)
        (simplifyOpE _ _ x2)
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  
  module Carrier where
    record Carrier
      (A : Set) : Set where
      constructor CarrierC
      field
        
    record CarrierSig
      (AS : Set) : Set where
      constructor CarrierSigSigC
      field
        
    record CarrierProd
      (AP : Set) : Set where
      constructor CarrierProdC
      field
        
    record CarrierHom
      (A1 : Set) (A2 : Set)
      (Ca1 : Carrier A1)
      (Ca2 : Carrier A2) : Set where
      constructor CarrierHomC
      field
        hom : A1 -> A2
    record CarrierRelInterp
      (A1 : Set) (A2 : Set)
      (Ca1 : Carrier A1)
      (Ca2 : Carrier A2) : Set where
      constructor CarrierRelInterpC
      field
        interp : A1 -> A2 -> Set
    data CarrierTerm : Set where
      
    data ClCarrierTerm
      (A : Set) : Set where
      sing : A -> ClCarrierTerm A
    data OpCarrierTerm
      (n : Nat) : Set where
      v : Fin n -> OpCarrierTerm n
    data OpCarrierTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpCarrierTerm2 n A
      sing2 : A -> OpCarrierTerm2 n A
    simplifyB :
      CarrierTerm -> CarrierTerm
    simplifyCl :
      (A : Set) ->
      ClCarrierTerm A ->
      ClCarrierTerm A
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpCarrierTerm n ->
      OpCarrierTerm n
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpCarrierTerm2 n A ->
      OpCarrierTerm2 n A
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  
  module CommutativeMagma where
    record CommutativeMagma
      (A : Set) : Set where
      constructor CommutativeMagmaC
      field
        op : A -> A -> A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
    record CommutativeMagmaSig
      (AS : Set) : Set where
      constructor CommutativeMagmaSigSigC
      field
        opS : AS -> AS -> AS
    record CommutativeMagmaProd
      (AP : Set) : Set where
      constructor CommutativeMagmaProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
    record CommutativeMagmaHom
      (A1 : Set) (A2 : Set)
      (Co1 : CommutativeMagma A1)
      (Co2 : CommutativeMagma A2) :
      Set where
      constructor CommutativeMagmaHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Co1 x1 x2) ==
            op Co2 (hom x1) (hom x2)
    record CommutativeMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Co1 : CommutativeMagma A1)
      (Co2 : CommutativeMagma A2) :
      Set where
      constructor CommutativeMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Co1 x1 x2)
            (op Co2 y1 y2)
    data CommutativeMagmaTerm
      : Set where
      opL :
        CommutativeMagmaTerm ->
        CommutativeMagmaTerm ->
        CommutativeMagmaTerm
    data ClCommutativeMagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClCommutativeMagmaTerm A
      opCl :
        ClCommutativeMagmaTerm A ->
        ClCommutativeMagmaTerm A ->
        ClCommutativeMagmaTerm A
    data OpCommutativeMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpCommutativeMagmaTerm n
      opOL :
        OpCommutativeMagmaTerm n ->
        OpCommutativeMagmaTerm n ->
        OpCommutativeMagmaTerm n
    data OpCommutativeMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpCommutativeMagmaTerm2 n A
      sing2 :
        A -> OpCommutativeMagmaTerm2 n A
      opOL2 :
        OpCommutativeMagmaTerm2 n A ->
        OpCommutativeMagmaTerm2 n A ->
        OpCommutativeMagmaTerm2 n A
    simplifyB :
      CommutativeMagmaTerm ->
      CommutativeMagmaTerm
    simplifyB (opL x1 x2) =
      opL (simplifyB x1)
        (simplifyB x2)
    simplifyCl :
      (A : Set) ->
      ClCommutativeMagmaTerm A ->
      ClCommutativeMagmaTerm A
    simplifyCl _ (opCl x1 x2) =
      opCl (simplifyCl _ x1)
        (simplifyCl _ x2)
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpCommutativeMagmaTerm n ->
      OpCommutativeMagmaTerm n
    simplifyOp _ (opOL x1 x2) =
      opOL (simplifyOp _ x1)
        (simplifyOp _ x2)
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpCommutativeMagmaTerm2 n A ->
      OpCommutativeMagmaTerm2 n A
    simplifyOpE _ _ (opOL2 x1 x2) =
      opOL2 (simplifyOpE _ _ x1)
        (simplifyOpE _ _ x2)
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  
  module CommutativeMonoid where
    record CommutativeMonoid
      (A : Set) : Set where
      constructor CommutativeMonoidC
      field
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        e : A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
    record CommutativeMonoidSig
      (AS : Set) : Set where
      constructor CommutativeMonoidSigSigC
      field
        opS : AS -> AS -> AS
        eS : AS
    record CommutativeMonoidProd
      (AP : Set) : Set where
      constructor CommutativeMonoidProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
    record CommutativeMonoidHom
      (A1 : Set) (A2 : Set)
      (Co1 : CommutativeMonoid A1)
      (Co2 : CommutativeMonoid A2) :
      Set where
      constructor CommutativeMonoidHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Co1 x1 x2) ==
            op Co2 (hom x1) (hom x2)
        pres-e : hom (e Co1) == e Co2
    record CommutativeMonoidRelInterp
      (A1 : Set) (A2 : Set)
      (Co1 : CommutativeMonoid A1)
      (Co2 : CommutativeMonoid A2) :
      Set where
      constructor CommutativeMonoidRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Co1 x1 x2)
            (op Co2 y1 y2)
        interp-e :
          interp (e Co1) (e Co2)
    data CommutativeMonoidTerm
      : Set where
      opL :
        CommutativeMonoidTerm ->
        CommutativeMonoidTerm ->
        CommutativeMonoidTerm
      eL : CommutativeMonoidTerm
    data ClCommutativeMonoidTerm
      (A : Set) : Set where
      sing :
        A -> ClCommutativeMonoidTerm A
      opCl :
        ClCommutativeMonoidTerm A ->
        ClCommutativeMonoidTerm A ->
        ClCommutativeMonoidTerm A
      eCl : ClCommutativeMonoidTerm A
    data OpCommutativeMonoidTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpCommutativeMonoidTerm n
      opOL :
        OpCommutativeMonoidTerm n ->
        OpCommutativeMonoidTerm n ->
        OpCommutativeMonoidTerm n
      eOL : OpCommutativeMonoidTerm n
    data OpCommutativeMonoidTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpCommutativeMonoidTerm2 n A
      sing2 :
        A ->
        OpCommutativeMonoidTerm2 n A
      opOL2 :
        OpCommutativeMonoidTerm2 n A ->
        OpCommutativeMonoidTerm2 n A ->
        OpCommutativeMonoidTerm2 n A
      eOL2 :
        OpCommutativeMonoidTerm2 n A
    simplifyB :
      CommutativeMonoidTerm ->
      CommutativeMonoidTerm
    simplifyB (opL x1 x2) =
      opL (simplifyB x1)
        (simplifyB x2)
    simplifyB (eL) = eL
    simplifyCl :
      (A : Set) ->
      ClCommutativeMonoidTerm A ->
      ClCommutativeMonoidTerm A
    simplifyCl _ (opCl x1 x2) =
      opCl (simplifyCl _ x1)
        (simplifyCl _ x2)
    simplifyCl _ (eCl) = eCl
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpCommutativeMonoidTerm n ->
      OpCommutativeMonoidTerm n
    simplifyOp _ (opOL x1 x2) =
      opOL (simplifyOp _ x1)
        (simplifyOp _ x2)
    simplifyOp _ (eOL) = eOL
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpCommutativeMonoidTerm2 n A ->
      OpCommutativeMonoidTerm2 n A
    simplifyOpE _ _ (opOL2 x1 x2) =
      opOL2 (simplifyOpE _ _ x1)
        (simplifyOpE _ _ x2)
    simplifyOpE _ _ (eOL2) = eOL2
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  
  module CommutativeSemigroup where
    record CommutativeSemigroup
      (A : Set) : Set where
      constructor CommutativeSemigroupC
      field
        op : A -> A -> A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
    record CommutativeSemigroupSig
      (AS : Set) : Set where
      constructor CommutativeSemigroupSigSigC
      field
        opS : AS -> AS -> AS
    record CommutativeSemigroupProd
      (AP : Set) : Set where
      constructor CommutativeSemigroupProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
    record CommutativeSemigroupHom
      (A1 : Set) (A2 : Set)
      (Co1 : CommutativeSemigroup A1)
      (Co2 : CommutativeSemigroup
         A2) : Set where
      constructor CommutativeSemigroupHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Co1 x1 x2) ==
            op Co2 (hom x1) (hom x2)
    record CommutativeSemigroupRelInterp
      (A1 : Set) (A2 : Set)
      (Co1 : CommutativeSemigroup A1)
      (Co2 : CommutativeSemigroup
         A2) : Set where
      constructor CommutativeSemigroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Co1 x1 x2)
            (op Co2 y1 y2)
    data CommutativeSemigroupTerm
      : Set where
      opL :
        CommutativeSemigroupTerm ->
        CommutativeSemigroupTerm ->
        CommutativeSemigroupTerm
    data ClCommutativeSemigroupTerm
      (A : Set) : Set where
      sing :
        A ->
        ClCommutativeSemigroupTerm A
      opCl :
        ClCommutativeSemigroupTerm A ->
        ClCommutativeSemigroupTerm A ->
        ClCommutativeSemigroupTerm A
    data OpCommutativeSemigroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpCommutativeSemigroupTerm n
      opOL :
        OpCommutativeSemigroupTerm n ->
        OpCommutativeSemigroupTerm n ->
        OpCommutativeSemigroupTerm n
    data OpCommutativeSemigroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpCommutativeSemigroupTerm2 n A
      sing2 :
        A ->
        OpCommutativeSemigroupTerm2 n A
      opOL2 :
        OpCommutativeSemigroupTerm2 n
          A ->
        OpCommutativeSemigroupTerm2 n
          A ->
        OpCommutativeSemigroupTerm2 n A
    simplifyB :
      CommutativeSemigroupTerm ->
      CommutativeSemigroupTerm
    simplifyB (opL x1 x2) =
      opL (simplifyB x1)
        (simplifyB x2)
    simplifyCl :
      (A : Set) ->
      ClCommutativeSemigroupTerm A ->
      ClCommutativeSemigroupTerm A
    simplifyCl _ (opCl x1 x2) =
      opCl (simplifyCl _ x1)
        (simplifyCl _ x2)
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpCommutativeSemigroupTerm n ->
      OpCommutativeSemigroupTerm n
    simplifyOp _ (opOL x1 x2) =
      opOL (simplifyOp _ x1)
        (simplifyOp _ x2)
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpCommutativeSemigroupTerm2 n
        A ->
      OpCommutativeSemigroupTerm2 n A
    simplifyOpE _ _ (opOL2 x1 x2) =
      opOL2 (simplifyOpE _ _ x1)
        (simplifyOpE _ _ x2)
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  
  module Empty where
    record Empty : Set where
      constructor EmptyC
      field
        
  
  module LeftUnital where
    record LeftUnital
      (A : Set) : Set where
      constructor LeftUnitalC
      field
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
    record LeftUnitalSig
      (AS : Set) : Set where
      constructor LeftUnitalSigSigC
      field
        eS : AS
        opS : AS -> AS -> AS
    record LeftUnitalProd
      (AP : Set) : Set where
      constructor LeftUnitalProdC
      field
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
    record LeftUnitalHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftUnital A1)
      (Le2 : LeftUnital A2) :
      Set where
      constructor LeftUnitalHomC
      field
        hom : A1 -> A2
        pres-e : hom (e Le1) == e Le2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Le1 x1 x2) ==
            op Le2 (hom x1) (hom x2)
    record LeftUnitalRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftUnital A1)
      (Le2 : LeftUnital A2) :
      Set where
      constructor LeftUnitalRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-e :
          interp (e Le1) (e Le2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Le1 x1 x2)
            (op Le2 y1 y2)
    data LeftUnitalTerm : Set where
      eL : LeftUnitalTerm
      opL :
        LeftUnitalTerm ->
        LeftUnitalTerm -> LeftUnitalTerm
    data ClLeftUnitalTerm
      (A : Set) : Set where
      sing : A -> ClLeftUnitalTerm A
      eCl : ClLeftUnitalTerm A
      opCl :
        ClLeftUnitalTerm A ->
        ClLeftUnitalTerm A ->
        ClLeftUnitalTerm A
    data OpLeftUnitalTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpLeftUnitalTerm n
      eOL : OpLeftUnitalTerm n
      opOL :
        OpLeftUnitalTerm n ->
        OpLeftUnitalTerm n ->
        OpLeftUnitalTerm n
    data OpLeftUnitalTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpLeftUnitalTerm2 n A
      sing2 :
        A -> OpLeftUnitalTerm2 n A
      eOL2 : OpLeftUnitalTerm2 n A
      opOL2 :
        OpLeftUnitalTerm2 n A ->
        OpLeftUnitalTerm2 n A ->
        OpLeftUnitalTerm2 n A
    simplifyB :
      LeftUnitalTerm -> LeftUnitalTerm
    simplifyB (eL) = eL
    simplifyB (opL x1 x2) =
      opL (simplifyB x1)
        (simplifyB x2)
    simplifyCl :
      (A : Set) ->
      ClLeftUnitalTerm A ->
      ClLeftUnitalTerm A
    simplifyCl _ (eCl) = eCl
    simplifyCl _ (opCl x1 x2) =
      opCl (simplifyCl _ x1)
        (simplifyCl _ x2)
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpLeftUnitalTerm n ->
      OpLeftUnitalTerm n
    simplifyOp _ (eOL) = eOL
    simplifyOp _ (opOL x1 x2) =
      opOL (simplifyOp _ x1)
        (simplifyOp _ x2)
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpLeftUnitalTerm2 n A ->
      OpLeftUnitalTerm2 n A
    simplifyOpE _ _ (eOL2) = eOL2
    simplifyOpE _ _ (opOL2 x1 x2) =
      opOL2 (simplifyOpE _ _ x1)
        (simplifyOpE _ _ x2)
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  
  module Magma where
    record Magma
      (A : Set) : Set where
      constructor MagmaC
      field
        op : A -> A -> A
    record MagmaSig
      (AS : Set) : Set where
      constructor MagmaSigSigC
      field
        opS : AS -> AS -> AS
    record MagmaProd
      (AP : Set) : Set where
      constructor MagmaProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record MagmaHom
      (A1 : Set) (A2 : Set)
      (Ma1 : Magma A1)
      (Ma2 : Magma A2) : Set where
      constructor MagmaHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ma1 x1 x2) ==
            op Ma2 (hom x1) (hom x2)
    record MagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Ma1 : Magma A1)
      (Ma2 : Magma A2) : Set where
      constructor MagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ma1 x1 x2)
            (op Ma2 y1 y2)
    data MagmaTerm : Set where
      opL :
        MagmaTerm ->
        MagmaTerm -> MagmaTerm
    data ClMagmaTerm
      (A : Set) : Set where
      sing : A -> ClMagmaTerm A
      opCl :
        ClMagmaTerm A ->
        ClMagmaTerm A -> ClMagmaTerm A
    data OpMagmaTerm
      (n : Nat) : Set where
      v : Fin n -> OpMagmaTerm n
      opOL :
        OpMagmaTerm n ->
        OpMagmaTerm n -> OpMagmaTerm n
    data OpMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 : Fin n -> OpMagmaTerm2 n A
      sing2 : A -> OpMagmaTerm2 n A
      opOL2 :
        OpMagmaTerm2 n A ->
        OpMagmaTerm2 n A ->
        OpMagmaTerm2 n A
    simplifyB :
      MagmaTerm -> MagmaTerm
    simplifyB (opL x1 x2) =
      opL (simplifyB x1)
        (simplifyB x2)
    simplifyCl :
      (A : Set) ->
      ClMagmaTerm A -> ClMagmaTerm A
    simplifyCl _ (opCl x1 x2) =
      opCl (simplifyCl _ x1)
        (simplifyCl _ x2)
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpMagmaTerm n -> OpMagmaTerm n
    simplifyOp _ (opOL x1 x2) =
      opOL (simplifyOp _ x1)
        (simplifyOp _ x2)
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpMagmaTerm2 n A ->
      OpMagmaTerm2 n A
    simplifyOpE _ _ (opOL2 x1 x2) =
      opOL2 (simplifyOpE _ _ x1)
        (simplifyOpE _ _ x2)
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  
  module Monoid where
    record Monoid
      (A : Set) : Set where
      constructor MonoidC
      field
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
    record MonoidSig
      (AS : Set) : Set where
      constructor MonoidSigSigC
      field
        eS : AS
        opS : AS -> AS -> AS
    record MonoidProd
      (AP : Set) : Set where
      constructor MonoidProdC
      field
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
    record MonoidHom
      (A1 : Set) (A2 : Set)
      (Mo1 : Monoid A1)
      (Mo2 : Monoid A2) : Set where
      constructor MonoidHomC
      field
        hom : A1 -> A2
        pres-e : hom (e Mo1) == e Mo2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Mo1 x1 x2) ==
            op Mo2 (hom x1) (hom x2)
    record MonoidRelInterp
      (A1 : Set) (A2 : Set)
      (Mo1 : Monoid A1)
      (Mo2 : Monoid A2) : Set where
      constructor MonoidRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-e :
          interp (e Mo1) (e Mo2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Mo1 x1 x2)
            (op Mo2 y1 y2)
    data MonoidTerm : Set where
      eL : MonoidTerm
      opL :
        MonoidTerm ->
        MonoidTerm -> MonoidTerm
    data ClMonoidTerm
      (A : Set) : Set where
      sing : A -> ClMonoidTerm A
      eCl : ClMonoidTerm A
      opCl :
        ClMonoidTerm A ->
        ClMonoidTerm A -> ClMonoidTerm A
    data OpMonoidTerm
      (n : Nat) : Set where
      v : Fin n -> OpMonoidTerm n
      eOL : OpMonoidTerm n
      opOL :
        OpMonoidTerm n ->
        OpMonoidTerm n -> OpMonoidTerm n
    data OpMonoidTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpMonoidTerm2 n A
      sing2 : A -> OpMonoidTerm2 n A
      eOL2 : OpMonoidTerm2 n A
      opOL2 :
        OpMonoidTerm2 n A ->
        OpMonoidTerm2 n A ->
        OpMonoidTerm2 n A
    simplifyB :
      MonoidTerm -> MonoidTerm
    simplifyB (eL) = eL
    simplifyB (opL x1 x2) =
      opL (simplifyB x1)
        (simplifyB x2)
    simplifyCl :
      (A : Set) ->
      ClMonoidTerm A -> ClMonoidTerm A
    simplifyCl _ (eCl) = eCl
    simplifyCl _ (opCl x1 x2) =
      opCl (simplifyCl _ x1)
        (simplifyCl _ x2)
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpMonoidTerm n -> OpMonoidTerm n
    simplifyOp _ (eOL) = eOL
    simplifyOp _ (opOL x1 x2) =
      opOL (simplifyOp _ x1)
        (simplifyOp _ x2)
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpMonoidTerm2 n A ->
      OpMonoidTerm2 n A
    simplifyOpE _ _ (eOL2) = eOL2
    simplifyOpE _ _ (opOL2 x1 x2) =
      opOL2 (simplifyOpE _ _ x1)
        (simplifyOpE _ _ x2)
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  
  module Pointed where
    record Pointed
      (A : Set) : Set where
      constructor PointedC
      field
        e : A
    record PointedSig
      (AS : Set) : Set where
      constructor PointedSigSigC
      field
        eS : AS
    record PointedProd
      (AP : Set) : Set where
      constructor PointedProdC
      field
        eP : Prod AP AP
    record PointedHom
      (A1 : Set) (A2 : Set)
      (Po1 : Pointed A1)
      (Po2 : Pointed A2) : Set where
      constructor PointedHomC
      field
        hom : A1 -> A2
        pres-e : hom (e Po1) == e Po2
    record PointedRelInterp
      (A1 : Set) (A2 : Set)
      (Po1 : Pointed A1)
      (Po2 : Pointed A2) : Set where
      constructor PointedRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-e :
          interp (e Po1) (e Po2)
    data PointedTerm : Set where
      eL : PointedTerm
    data ClPointedTerm
      (A : Set) : Set where
      sing : A -> ClPointedTerm A
      eCl : ClPointedTerm A
    data OpPointedTerm
      (n : Nat) : Set where
      v : Fin n -> OpPointedTerm n
      eOL : OpPointedTerm n
    data OpPointedTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpPointedTerm2 n A
      sing2 : A -> OpPointedTerm2 n A
      eOL2 : OpPointedTerm2 n A
    simplifyB :
      PointedTerm -> PointedTerm
    simplifyB (eL) = eL
    simplifyCl :
      (A : Set) ->
      ClPointedTerm A ->
      ClPointedTerm A
    simplifyCl _ (eCl) = eCl
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpPointedTerm n ->
      OpPointedTerm n
    simplifyOp _ (eOL) = eOL
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpPointedTerm2 n A ->
      OpPointedTerm2 n A
    simplifyOpE _ _ (eOL2) = eOL2
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  
  module Pointed0Magma where
    record Pointed0Magma
      (A : Set) : Set where
      constructor Pointed0MagmaC
      field
        0 : A
        op : A -> A -> A
    record Pointed0MagmaSig
      (AS : Set) : Set where
      constructor Pointed0MagmaSigSigC
      field
        0S : AS
        opS : AS -> AS -> AS
    record Pointed0MagmaProd
      (AP : Set) : Set where
      constructor Pointed0MagmaProdC
      field
        0P : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record Pointed0MagmaHom
      (A1 : Set) (A2 : Set)
      (Po1 : Pointed0Magma A1)
      (Po2 : Pointed0Magma A2) :
      Set where
      constructor Pointed0MagmaHomC
      field
        hom : A1 -> A2
        pres-0 : hom (0 Po1) == 0 Po2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Po1 x1 x2) ==
            op Po2 (hom x1) (hom x2)
    record Pointed0MagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Po1 : Pointed0Magma A1)
      (Po2 : Pointed0Magma A2) :
      Set where
      constructor Pointed0MagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0 :
          interp (0 Po1) (0 Po2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Po1 x1 x2)
            (op Po2 y1 y2)
    data Pointed0MagmaTerm
      : Set where
      0L : Pointed0MagmaTerm
      opL :
        Pointed0MagmaTerm ->
        Pointed0MagmaTerm ->
        Pointed0MagmaTerm
    data ClPointed0MagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClPointed0MagmaTerm A
      0Cl : ClPointed0MagmaTerm A
      opCl :
        ClPointed0MagmaTerm A ->
        ClPointed0MagmaTerm A ->
        ClPointed0MagmaTerm A
    data OpPointed0MagmaTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpPointed0MagmaTerm n
      0OL : OpPointed0MagmaTerm n
      opOL :
        OpPointed0MagmaTerm n ->
        OpPointed0MagmaTerm n ->
        OpPointed0MagmaTerm n
    data OpPointed0MagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpPointed0MagmaTerm2 n A
      sing2 :
        A -> OpPointed0MagmaTerm2 n A
      0OL2 : OpPointed0MagmaTerm2 n A
      opOL2 :
        OpPointed0MagmaTerm2 n A ->
        OpPointed0MagmaTerm2 n A ->
        OpPointed0MagmaTerm2 n A
    simplifyB :
      Pointed0MagmaTerm ->
      Pointed0MagmaTerm
    simplifyB (0L) = 0L
    simplifyB (opL x1 x2) =
      opL (simplifyB x1)
        (simplifyB x2)
    simplifyCl :
      (A : Set) ->
      ClPointed0MagmaTerm A ->
      ClPointed0MagmaTerm A
    simplifyCl _ (0Cl) = 0Cl
    simplifyCl _ (opCl x1 x2) =
      opCl (simplifyCl _ x1)
        (simplifyCl _ x2)
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpPointed0MagmaTerm n ->
      OpPointed0MagmaTerm n
    simplifyOp _ (0OL) = 0OL
    simplifyOp _ (opOL x1 x2) =
      opOL (simplifyOp _ x1)
        (simplifyOp _ x2)
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpPointed0MagmaTerm2 n A ->
      OpPointed0MagmaTerm2 n A
    simplifyOpE _ _ (0OL2) = 0OL2
    simplifyOpE _ _ (opOL2 x1 x2) =
      opOL2 (simplifyOpE _ _ x1)
        (simplifyOpE _ _ x2)
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  
  module PointedMagma where
    record PointedMagma
      (A : Set) : Set where
      constructor PointedMagmaC
      field
        e : A
        op : A -> A -> A
    record PointedMagmaSig
      (AS : Set) : Set where
      constructor PointedMagmaSigSigC
      field
        eS : AS
        opS : AS -> AS -> AS
    record PointedMagmaProd
      (AP : Set) : Set where
      constructor PointedMagmaProdC
      field
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record PointedMagmaHom
      (A1 : Set) (A2 : Set)
      (Po1 : PointedMagma A1)
      (Po2 : PointedMagma A2) :
      Set where
      constructor PointedMagmaHomC
      field
        hom : A1 -> A2
        pres-e : hom (e Po1) == e Po2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Po1 x1 x2) ==
            op Po2 (hom x1) (hom x2)
    record PointedMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Po1 : PointedMagma A1)
      (Po2 : PointedMagma A2) :
      Set where
      constructor PointedMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-e :
          interp (e Po1) (e Po2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Po1 x1 x2)
            (op Po2 y1 y2)
    data PointedMagmaTerm
      : Set where
      eL : PointedMagmaTerm
      opL :
        PointedMagmaTerm ->
        PointedMagmaTerm ->
        PointedMagmaTerm
    data ClPointedMagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClPointedMagmaTerm A
      eCl : ClPointedMagmaTerm A
      opCl :
        ClPointedMagmaTerm A ->
        ClPointedMagmaTerm A ->
        ClPointedMagmaTerm A
    data OpPointedMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpPointedMagmaTerm n
      eOL : OpPointedMagmaTerm n
      opOL :
        OpPointedMagmaTerm n ->
        OpPointedMagmaTerm n ->
        OpPointedMagmaTerm n
    data OpPointedMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpPointedMagmaTerm2 n A
      sing2 :
        A -> OpPointedMagmaTerm2 n A
      eOL2 : OpPointedMagmaTerm2 n A
      opOL2 :
        OpPointedMagmaTerm2 n A ->
        OpPointedMagmaTerm2 n A ->
        OpPointedMagmaTerm2 n A
    simplifyB :
      PointedMagmaTerm ->
      PointedMagmaTerm
    simplifyB (eL) = eL
    simplifyB (opL x1 x2) =
      opL (simplifyB x1)
        (simplifyB x2)
    simplifyCl :
      (A : Set) ->
      ClPointedMagmaTerm A ->
      ClPointedMagmaTerm A
    simplifyCl _ (eCl) = eCl
    simplifyCl _ (opCl x1 x2) =
      opCl (simplifyCl _ x1)
        (simplifyCl _ x2)
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpPointedMagmaTerm n ->
      OpPointedMagmaTerm n
    simplifyOp _ (eOL) = eOL
    simplifyOp _ (opOL x1 x2) =
      opOL (simplifyOp _ x1)
        (simplifyOp _ x2)
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpPointedMagmaTerm2 n A ->
      OpPointedMagmaTerm2 n A
    simplifyOpE _ _ (eOL2) = eOL2
    simplifyOpE _ _ (opOL2 x1 x2) =
      opOL2 (simplifyOpE _ _ x1)
        (simplifyOpE _ _ x2)
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  
  module PointedOne where
    record PointedOne
      (A : Set) : Set where
      constructor PointedOneC
      field
        1 : A
    record PointedOneSig
      (AS : Set) : Set where
      constructor PointedOneSigSigC
      field
        1S : AS
    record PointedOneProd
      (AP : Set) : Set where
      constructor PointedOneProdC
      field
        1P : Prod AP AP
    record PointedOneHom
      (A1 : Set) (A2 : Set)
      (Po1 : PointedOne A1)
      (Po2 : PointedOne A2) :
      Set where
      constructor PointedOneHomC
      field
        hom : A1 -> A2
        pres-1 : hom (1 Po1) == 1 Po2
    record PointedOneRelInterp
      (A1 : Set) (A2 : Set)
      (Po1 : PointedOne A1)
      (Po2 : PointedOne A2) :
      Set where
      constructor PointedOneRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-1 :
          interp (1 Po1) (1 Po2)
    data PointedOneTerm : Set where
      1L : PointedOneTerm
    data ClPointedOneTerm
      (A : Set) : Set where
      sing : A -> ClPointedOneTerm A
      1Cl : ClPointedOneTerm A
    data OpPointedOneTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpPointedOneTerm n
      1OL : OpPointedOneTerm n
    data OpPointedOneTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpPointedOneTerm2 n A
      sing2 :
        A -> OpPointedOneTerm2 n A
      1OL2 : OpPointedOneTerm2 n A
    simplifyB :
      PointedOneTerm -> PointedOneTerm
    simplifyB (1L) = 1L
    simplifyCl :
      (A : Set) ->
      ClPointedOneTerm A ->
      ClPointedOneTerm A
    simplifyCl _ (1Cl) = 1Cl
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpPointedOneTerm n ->
      OpPointedOneTerm n
    simplifyOp _ (1OL) = 1OL
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpPointedOneTerm2 n A ->
      OpPointedOneTerm2 n A
    simplifyOpE _ _ (1OL2) = 1OL2
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  
  module PointedPlusMagma where
    record PointedPlusMagma
      (A : Set) : Set where
      constructor PointedPlusMagmaC
      field
        + : A -> A -> A
        e : A
    record PointedPlusMagmaSig
      (AS : Set) : Set where
      constructor PointedPlusMagmaSigSigC
      field
        +S : AS -> AS -> AS
        eS : AS
    record PointedPlusMagmaProd
      (AP : Set) : Set where
      constructor PointedPlusMagmaProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
    record PointedPlusMagmaHom
      (A1 : Set) (A2 : Set)
      (Po1 : PointedPlusMagma A1)
      (Po2 : PointedPlusMagma A2) :
      Set where
      constructor PointedPlusMagmaHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Po1 x1 x2) ==
            + Po2 (hom x1) (hom x2)
        pres-e : hom (e Po1) == e Po2
    record PointedPlusMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Po1 : PointedPlusMagma A1)
      (Po2 : PointedPlusMagma A2) :
      Set where
      constructor PointedPlusMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Po1 x1 x2)
            (+ Po2 y1 y2)
        interp-e :
          interp (e Po1) (e Po2)
    data PointedPlusMagmaTerm
      : Set where
      +L :
        PointedPlusMagmaTerm ->
        PointedPlusMagmaTerm ->
        PointedPlusMagmaTerm
      eL : PointedPlusMagmaTerm
    data ClPointedPlusMagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClPointedPlusMagmaTerm A
      +Cl :
        ClPointedPlusMagmaTerm A ->
        ClPointedPlusMagmaTerm A ->
        ClPointedPlusMagmaTerm A
      eCl : ClPointedPlusMagmaTerm A
    data OpPointedPlusMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpPointedPlusMagmaTerm n
      +OL :
        OpPointedPlusMagmaTerm n ->
        OpPointedPlusMagmaTerm n ->
        OpPointedPlusMagmaTerm n
      eOL : OpPointedPlusMagmaTerm n
    data OpPointedPlusMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpPointedPlusMagmaTerm2 n A
      sing2 :
        A -> OpPointedPlusMagmaTerm2 n A
      +OL2 :
        OpPointedPlusMagmaTerm2 n A ->
        OpPointedPlusMagmaTerm2 n A ->
        OpPointedPlusMagmaTerm2 n A
      eOL2 :
        OpPointedPlusMagmaTerm2 n A
    simplifyB :
      PointedPlusMagmaTerm ->
      PointedPlusMagmaTerm
    simplifyB (+L x1 x2) =
      +L (simplifyB x1) (simplifyB x2)
    simplifyB (eL) = eL
    simplifyCl :
      (A : Set) ->
      ClPointedPlusMagmaTerm A ->
      ClPointedPlusMagmaTerm A
    simplifyCl _ (+Cl x1 x2) =
      +Cl (simplifyCl _ x1)
        (simplifyCl _ x2)
    simplifyCl _ (eCl) = eCl
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpPointedPlusMagmaTerm n ->
      OpPointedPlusMagmaTerm n
    simplifyOp _ (+OL x1 x2) =
      +OL (simplifyOp _ x1)
        (simplifyOp _ x2)
    simplifyOp _ (eOL) = eOL
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpPointedPlusMagmaTerm2 n A ->
      OpPointedPlusMagmaTerm2 n A
    simplifyOpE _ _ (+OL2 x1 x2) =
      +OL2 (simplifyOpE _ _ x1)
        (simplifyOpE _ _ x2)
    simplifyOpE _ _ (eOL2) = eOL2
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  
  module PointedSemigroup where
    record PointedSemigroup
      (A : Set) : Set where
      constructor PointedSemigroupC
      field
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        e : A
    record PointedSemigroupSig
      (AS : Set) : Set where
      constructor PointedSemigroupSigSigC
      field
        opS : AS -> AS -> AS
        eS : AS
    record PointedSemigroupProd
      (AP : Set) : Set where
      constructor PointedSemigroupProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
    record PointedSemigroupHom
      (A1 : Set) (A2 : Set)
      (Po1 : PointedSemigroup A1)
      (Po2 : PointedSemigroup A2) :
      Set where
      constructor PointedSemigroupHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Po1 x1 x2) ==
            op Po2 (hom x1) (hom x2)
        pres-e : hom (e Po1) == e Po2
    record PointedSemigroupRelInterp
      (A1 : Set) (A2 : Set)
      (Po1 : PointedSemigroup A1)
      (Po2 : PointedSemigroup A2) :
      Set where
      constructor PointedSemigroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Po1 x1 x2)
            (op Po2 y1 y2)
        interp-e :
          interp (e Po1) (e Po2)
    data PointedSemigroupTerm
      : Set where
      opL :
        PointedSemigroupTerm ->
        PointedSemigroupTerm ->
        PointedSemigroupTerm
      eL : PointedSemigroupTerm
    data ClPointedSemigroupTerm
      (A : Set) : Set where
      sing :
        A -> ClPointedSemigroupTerm A
      opCl :
        ClPointedSemigroupTerm A ->
        ClPointedSemigroupTerm A ->
        ClPointedSemigroupTerm A
      eCl : ClPointedSemigroupTerm A
    data OpPointedSemigroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpPointedSemigroupTerm n
      opOL :
        OpPointedSemigroupTerm n ->
        OpPointedSemigroupTerm n ->
        OpPointedSemigroupTerm n
      eOL : OpPointedSemigroupTerm n
    data OpPointedSemigroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpPointedSemigroupTerm2 n A
      sing2 :
        A -> OpPointedSemigroupTerm2 n A
      opOL2 :
        OpPointedSemigroupTerm2 n A ->
        OpPointedSemigroupTerm2 n A ->
        OpPointedSemigroupTerm2 n A
      eOL2 :
        OpPointedSemigroupTerm2 n A
    simplifyB :
      PointedSemigroupTerm ->
      PointedSemigroupTerm
    simplifyB (opL x1 x2) =
      opL (simplifyB x1)
        (simplifyB x2)
    simplifyB (eL) = eL
    simplifyCl :
      (A : Set) ->
      ClPointedSemigroupTerm A ->
      ClPointedSemigroupTerm A
    simplifyCl _ (opCl x1 x2) =
      opCl (simplifyCl _ x1)
        (simplifyCl _ x2)
    simplifyCl _ (eCl) = eCl
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpPointedSemigroupTerm n ->
      OpPointedSemigroupTerm n
    simplifyOp _ (opOL x1 x2) =
      opOL (simplifyOp _ x1)
        (simplifyOp _ x2)
    simplifyOp _ (eOL) = eOL
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpPointedSemigroupTerm2 n A ->
      OpPointedSemigroupTerm2 n A
    simplifyOpE _ _ (opOL2 x1 x2) =
      opOL2 (simplifyOpE _ _ x1)
        (simplifyOpE _ _ x2)
    simplifyOpE _ _ (eOL2) = eOL2
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  
  module PointedZero where
    record PointedZero
      (A : Set) : Set where
      constructor PointedZeroC
      field
        0 : A
    record PointedZeroSig
      (AS : Set) : Set where
      constructor PointedZeroSigSigC
      field
        0S : AS
    record PointedZeroProd
      (AP : Set) : Set where
      constructor PointedZeroProdC
      field
        0P : Prod AP AP
    record PointedZeroHom
      (A1 : Set) (A2 : Set)
      (Po1 : PointedZero A1)
      (Po2 : PointedZero A2) :
      Set where
      constructor PointedZeroHomC
      field
        hom : A1 -> A2
        pres-0 : hom (0 Po1) == 0 Po2
    record PointedZeroRelInterp
      (A1 : Set) (A2 : Set)
      (Po1 : PointedZero A1)
      (Po2 : PointedZero A2) :
      Set where
      constructor PointedZeroRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0 :
          interp (0 Po1) (0 Po2)
    data PointedZeroTerm : Set where
      0L : PointedZeroTerm
    data ClPointedZeroTerm
      (A : Set) : Set where
      sing :
        A -> ClPointedZeroTerm A
      0Cl : ClPointedZeroTerm A
    data OpPointedZeroTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpPointedZeroTerm n
      0OL : OpPointedZeroTerm n
    data OpPointedZeroTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpPointedZeroTerm2 n A
      sing2 :
        A -> OpPointedZeroTerm2 n A
      0OL2 : OpPointedZeroTerm2 n A
    simplifyB :
      PointedZeroTerm ->
      PointedZeroTerm
    simplifyB (0L) = 0L
    simplifyCl :
      (A : Set) ->
      ClPointedZeroTerm A ->
      ClPointedZeroTerm A
    simplifyCl _ (0Cl) = 0Cl
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpPointedZeroTerm n ->
      OpPointedZeroTerm n
    simplifyOp _ (0OL) = 0OL
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpPointedZeroTerm2 n A ->
      OpPointedZeroTerm2 n A
    simplifyOpE _ _ (0OL2) = 0OL2
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  
  module RightUnital where
    record RightUnital
      (A : Set) : Set where
      constructor RightUnitalC
      field
        e : A
        op : A -> A -> A
        runit_e : (x : A) -> op x e == x
    record RightUnitalSig
      (AS : Set) : Set where
      constructor RightUnitalSigSigC
      field
        eS : AS
        opS : AS -> AS -> AS
    record RightUnitalProd
      (AP : Set) : Set where
      constructor RightUnitalProdC
      field
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
    record RightUnitalHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightUnital A1)
      (Ri2 : RightUnital A2) :
      Set where
      constructor RightUnitalHomC
      field
        hom : A1 -> A2
        pres-e : hom (e Ri1) == e Ri2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ri1 x1 x2) ==
            op Ri2 (hom x1) (hom x2)
    record RightUnitalRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightUnital A1)
      (Ri2 : RightUnital A2) :
      Set where
      constructor RightUnitalRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-e :
          interp (e Ri1) (e Ri2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ri1 x1 x2)
            (op Ri2 y1 y2)
    data RightUnitalTerm : Set where
      eL : RightUnitalTerm
      opL :
        RightUnitalTerm ->
        RightUnitalTerm ->
        RightUnitalTerm
    data ClRightUnitalTerm
      (A : Set) : Set where
      sing :
        A -> ClRightUnitalTerm A
      eCl : ClRightUnitalTerm A
      opCl :
        ClRightUnitalTerm A ->
        ClRightUnitalTerm A ->
        ClRightUnitalTerm A
    data OpRightUnitalTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpRightUnitalTerm n
      eOL : OpRightUnitalTerm n
      opOL :
        OpRightUnitalTerm n ->
        OpRightUnitalTerm n ->
        OpRightUnitalTerm n
    data OpRightUnitalTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpRightUnitalTerm2 n A
      sing2 :
        A -> OpRightUnitalTerm2 n A
      eOL2 : OpRightUnitalTerm2 n A
      opOL2 :
        OpRightUnitalTerm2 n A ->
        OpRightUnitalTerm2 n A ->
        OpRightUnitalTerm2 n A
    simplifyB :
      RightUnitalTerm ->
      RightUnitalTerm
    simplifyB (eL) = eL
    simplifyB (opL x1 x2) =
      opL (simplifyB x1)
        (simplifyB x2)
    simplifyCl :
      (A : Set) ->
      ClRightUnitalTerm A ->
      ClRightUnitalTerm A
    simplifyCl _ (eCl) = eCl
    simplifyCl _ (opCl x1 x2) =
      opCl (simplifyCl _ x1)
        (simplifyCl _ x2)
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpRightUnitalTerm n ->
      OpRightUnitalTerm n
    simplifyOp _ (eOL) = eOL
    simplifyOp _ (opOL x1 x2) =
      opOL (simplifyOp _ x1)
        (simplifyOp _ x2)
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpRightUnitalTerm2 n A ->
      OpRightUnitalTerm2 n A
    simplifyOpE _ _ (eOL2) = eOL2
    simplifyOpE _ _ (opOL2 x1 x2) =
      opOL2 (simplifyOpE _ _ x1)
        (simplifyOpE _ _ x2)
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  
  module Semigroup where
    record Semigroup
      (A : Set) : Set where
      constructor SemigroupC
      field
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
    record SemigroupSig
      (AS : Set) : Set where
      constructor SemigroupSigSigC
      field
        opS : AS -> AS -> AS
    record SemigroupProd
      (AP : Set) : Set where
      constructor SemigroupProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
    record SemigroupHom
      (A1 : Set) (A2 : Set)
      (Se1 : Semigroup A1)
      (Se2 : Semigroup A2) : Set where
      constructor SemigroupHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Se1 x1 x2) ==
            op Se2 (hom x1) (hom x2)
    record SemigroupRelInterp
      (A1 : Set) (A2 : Set)
      (Se1 : Semigroup A1)
      (Se2 : Semigroup A2) : Set where
      constructor SemigroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Se1 x1 x2)
            (op Se2 y1 y2)
    data SemigroupTerm : Set where
      opL :
        SemigroupTerm ->
        SemigroupTerm -> SemigroupTerm
    data ClSemigroupTerm
      (A : Set) : Set where
      sing : A -> ClSemigroupTerm A
      opCl :
        ClSemigroupTerm A ->
        ClSemigroupTerm A ->
        ClSemigroupTerm A
    data OpSemigroupTerm
      (n : Nat) : Set where
      v : Fin n -> OpSemigroupTerm n
      opOL :
        OpSemigroupTerm n ->
        OpSemigroupTerm n ->
        OpSemigroupTerm n
    data OpSemigroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpSemigroupTerm2 n A
      sing2 :
        A -> OpSemigroupTerm2 n A
      opOL2 :
        OpSemigroupTerm2 n A ->
        OpSemigroupTerm2 n A ->
        OpSemigroupTerm2 n A
    simplifyB :
      SemigroupTerm -> SemigroupTerm
    simplifyB (opL x1 x2) =
      opL (simplifyB x1)
        (simplifyB x2)
    simplifyCl :
      (A : Set) ->
      ClSemigroupTerm A ->
      ClSemigroupTerm A
    simplifyCl _ (opCl x1 x2) =
      opCl (simplifyCl _ x1)
        (simplifyCl _ x2)
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpSemigroupTerm n ->
      OpSemigroupTerm n
    simplifyOp _ (opOL x1 x2) =
      opOL (simplifyOp _ x1)
        (simplifyOp _ x2)
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpSemigroupTerm2 n A ->
      OpSemigroupTerm2 n A
    simplifyOpE _ _ (opOL2 x1 x2) =
      opOL2 (simplifyOpE _ _ x1)
        (simplifyOpE _ _ x2)
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  
  module Unital where
    record Unital
      (A : Set) : Set where
      constructor UnitalC
      field
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
    record UnitalSig
      (AS : Set) : Set where
      constructor UnitalSigSigC
      field
        eS : AS
        opS : AS -> AS -> AS
    record UnitalProd
      (AP : Set) : Set where
      constructor UnitalProdC
      field
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
    record UnitalHom
      (A1 : Set) (A2 : Set)
      (Un1 : Unital A1)
      (Un2 : Unital A2) : Set where
      constructor UnitalHomC
      field
        hom : A1 -> A2
        pres-e : hom (e Un1) == e Un2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Un1 x1 x2) ==
            op Un2 (hom x1) (hom x2)
    record UnitalRelInterp
      (A1 : Set) (A2 : Set)
      (Un1 : Unital A1)
      (Un2 : Unital A2) : Set where
      constructor UnitalRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-e :
          interp (e Un1) (e Un2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Un1 x1 x2)
            (op Un2 y1 y2)
    data UnitalTerm : Set where
      eL : UnitalTerm
      opL :
        UnitalTerm ->
        UnitalTerm -> UnitalTerm
    data ClUnitalTerm
      (A : Set) : Set where
      sing : A -> ClUnitalTerm A
      eCl : ClUnitalTerm A
      opCl :
        ClUnitalTerm A ->
        ClUnitalTerm A -> ClUnitalTerm A
    data OpUnitalTerm
      (n : Nat) : Set where
      v : Fin n -> OpUnitalTerm n
      eOL : OpUnitalTerm n
      opOL :
        OpUnitalTerm n ->
        OpUnitalTerm n -> OpUnitalTerm n
    data OpUnitalTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpUnitalTerm2 n A
      sing2 : A -> OpUnitalTerm2 n A
      eOL2 : OpUnitalTerm2 n A
      opOL2 :
        OpUnitalTerm2 n A ->
        OpUnitalTerm2 n A ->
        OpUnitalTerm2 n A
    simplifyB :
      UnitalTerm -> UnitalTerm
    simplifyB (eL) = eL
    simplifyB (opL x1 x2) =
      opL (simplifyB x1)
        (simplifyB x2)
    simplifyCl :
      (A : Set) ->
      ClUnitalTerm A -> ClUnitalTerm A
    simplifyCl _ (eCl) = eCl
    simplifyCl _ (opCl x1 x2) =
      opCl (simplifyCl _ x1)
        (simplifyCl _ x2)
    simplifyCl _ (sing x1) = sing x1
    simplifyOp :
      (n : Nat) ->
      OpUnitalTerm n -> OpUnitalTerm n
    simplifyOp _ (eOL) = eOL
    simplifyOp _ (opOL x1 x2) =
      opOL (simplifyOp _ x1)
        (simplifyOp _ x2)
    simplifyOp _ (v x1) = v x1
    simplifyOpE :
      (n : Nat) (A : Set) ->
      OpUnitalTerm2 n A ->
      OpUnitalTerm2 n A
    simplifyOpE _ _ (eOL2) = eOL2
    simplifyOpE _ _ (opOL2 x1 x2) =
      opOL2 (simplifyOpE _ _ x1)
        (simplifyOpE _ _ x2)
    simplifyOpE _ _ (v2 x1) = v2 x1
    simplifyOpE _ _ (sing2 x1) =
      sing2 x1
  

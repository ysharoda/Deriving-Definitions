------------------------------------------------------------------------
-- Checking declarations
------------------------------------------------------------------------
-- Solved Metas: 104745
-- Unsolved Metas: 0
------------------------------------------------------------------------
-- Unsolved problems: 0
------------------------------------------------------------------------
module MathScheme where
  data Prod
    (A : Set) (B : Set) : Set where
    
  module AbelianAdditiveGroup where
    record AbelianAdditiveGroup
      : Set where
      constructor AbelianAdditiveGroupC
      field
        A : Set
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
    record AbelianAdditiveGroupHom
      (A1 : AbelianAdditiveGroup)
      (A2 : AbelianAdditiveGroup) :
      Set where
      constructor AbelianAdditiveGroupHomC
      field
        hom : A A1 -> A A2
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
        pres-0 : hom (0 A1) == 0 A2
        pres-neg :
          (x1 : A A1) ->
          hom (neg A1 x1) ==
            neg A2 (hom x1)
    data AbelianAdditiveGroupLang
      : Set where
      +L :
        AbelianAdditiveGroupLang ->
        AbelianAdditiveGroupLang ->
        AbelianAdditiveGroupLang
      0L : AbelianAdditiveGroupLang
      negL :
        AbelianAdditiveGroupLang ->
        AbelianAdditiveGroupLang
    record AbelianAdditiveGroupProd
      : Set where
      constructor AbelianAdditiveGroupProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        negP : Prod AP AP -> Prod AP AP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        leftInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P xP (negP xP) == 0P
        rightInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P (negP xP) xP == 0P
    record AbelianAdditiveGroupSig
      : Set where
      constructor AbelianAdditiveGroupSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
        0S : AS
        negS : AS -> AS
  
  module AbelianGroup where
    record AbelianGroup : Set where
      constructor AbelianGroupC
      field
        A : Set
        1 : A
        * : A -> A -> A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        inv : A -> A
        leftInverse_inv_op_1 :
          (x : A) -> * x (inv x) == 1
        rightInverse_inv_op_1 :
          (x : A) -> * (inv x) x == 1
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
    record AbelianGroupHom
      (A1 : AbelianGroup)
      (A2 : AbelianGroup) : Set where
      constructor AbelianGroupHomC
      field
        hom : A A1 -> A A2
        pres-1 : hom (1 A1) == 1 A2
        pres-* :
          (x1 : A A1) (x2 : A A1) ->
          hom (* A1 x1 x2) ==
            * A2 (hom x1) (hom x2)
        pres-inv :
          (x1 : A A1) ->
          hom (inv A1 x1) ==
            inv A2 (hom x1)
    data AbelianGroupLang
      : Set where
      1L : AbelianGroupLang
      *L :
        AbelianGroupLang ->
        AbelianGroupLang ->
        AbelianGroupLang
      invL :
        AbelianGroupLang ->
        AbelianGroupLang
    record AbelianGroupProd
      : Set where
      constructor AbelianGroupProdC
      field
        AP : Set
        1P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        invP : Prod AP AP -> Prod AP AP
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftInverse_inv_op_1P :
          (xP : Prod AP AP) ->
          *P xP (invP xP) == 1P
        rightInverse_inv_op_1P :
          (xP : Prod AP AP) ->
          *P (invP xP) xP == 1P
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
    record AbelianGroupSig
      : Set where
      constructor AbelianGroupSigSigC
      field
        AS : Set
        1S : AS
        *S : AS -> AS -> AS
        invS : AS -> AS
  
  module Absorption where
    record Absorption : Set where
      constructor AbsorptionC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        leftAbsorp_*_+ :
          (x : A) (y : A) ->
          * x (+ x y) == x
        leftAbsorp_+_* :
          (x : A) (y : A) ->
          + x (* x y) == x
    record AbsorptionHom
      (A1 : Absorption)
      (A2 : Absorption) : Set where
      constructor AbsorptionHomC
      field
        hom : A A1 -> A A2
        pres-* :
          (x1 : A A1) (x2 : A A1) ->
          hom (* A1 x1 x2) ==
            * A2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
    data AbsorptionLang : Set where
      *L :
        AbsorptionLang ->
        AbsorptionLang -> AbsorptionLang
      +L :
        AbsorptionLang ->
        AbsorptionLang -> AbsorptionLang
    record AbsorptionProd
      : Set where
      constructor AbsorptionProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftAbsorp_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP (+P xP yP) == xP
        leftAbsorp_+_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP (*P xP yP) == xP
    record AbsorptionSig : Set where
      constructor AbsorptionSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  
  module AddCommMonWithMultMagma where
    record AddCommMonWithMultMagma
      : Set where
      constructor AddCommMonWithMultMagmaC
      field
        A : Set
        0 : A
        + : A -> A -> A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        * : A -> A -> A
    record AddCommMonWithMultMagmaHom
      (A1 : AddCommMonWithMultMagma)
      (A2 : AddCommMonWithMultMagma) :
      Set where
      constructor AddCommMonWithMultMagmaHomC
      field
        hom : A A1 -> A A2
        pres-0 : hom (0 A1) == 0 A2
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
        pres-* :
          (x1 : A A1) (x2 : A A1) ->
          hom (* A1 x1 x2) ==
            * A2 (hom x1) (hom x2)
    data AddCommMonWithMultMagmaLang
      : Set where
      0L :
        AddCommMonWithMultMagmaLang
      +L :
        AddCommMonWithMultMagmaLang ->
        AddCommMonWithMultMagmaLang ->
        AddCommMonWithMultMagmaLang
      *L :
        AddCommMonWithMultMagmaLang ->
        AddCommMonWithMultMagmaLang ->
        AddCommMonWithMultMagmaLang
    record AddCommMonWithMultMagmaProd
      : Set where
      constructor AddCommMonWithMultMagmaProdC
      field
        AP : Set
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
    record AddCommMonWithMultMagmaSig
      : Set where
      constructor AddCommMonWithMultMagmaSigSigC
      field
        AS : Set
        0S : AS
        +S : AS -> AS -> AS
        *S : AS -> AS -> AS
  
  module AddCommMonWithMultSemigroup where
    record AddCommMonWithMultSemigroup
      : Set where
      constructor AddCommMonWithMultSemigroupC
      field
        A : Set
        * : A -> A -> A
        0 : A
        + : A -> A -> A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
    record AddCommMonWithMultSemigroupHom
      (A1 : AddCommMonWithMultSemigroup)
      (A2 : AddCommMonWithMultSemigroup) :
      Set where
      constructor AddCommMonWithMultSemigroupHomC
      field
        hom : A A1 -> A A2
        pres-* :
          (x1 : A A1) (x2 : A A1) ->
          hom (* A1 x1 x2) ==
            * A2 (hom x1) (hom x2)
        pres-0 : hom (0 A1) == 0 A2
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
    data AddCommMonWithMultSemigroupLang
      : Set where
      *L :
        AddCommMonWithMultSemigroupLang ->
        AddCommMonWithMultSemigroupLang ->
        AddCommMonWithMultSemigroupLang
      0L :
        AddCommMonWithMultSemigroupLang
      +L :
        AddCommMonWithMultSemigroupLang ->
        AddCommMonWithMultSemigroupLang ->
        AddCommMonWithMultSemigroupLang
    record AddCommMonWithMultSemigroupProd
      : Set where
      constructor AddCommMonWithMultSemigroupProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
    record AddCommMonWithMultSemigroupSig
      : Set where
      constructor AddCommMonWithMultSemigroupSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        0S : AS
        +S : AS -> AS -> AS
  
  module AddGroup_RingoidSig where
    record AddGroup_RingoidSig
      : Set where
      constructor AddGroup_RingoidSigC
      field
        A : Set
        + : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        * : A -> A -> A
    record AddGroup_RingoidSigHom
      (A1 : AddGroup_RingoidSig)
      (A2 : AddGroup_RingoidSig) :
      Set where
      constructor AddGroup_RingoidSigHomC
      field
        hom : A A1 -> A A2
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
        pres-0 : hom (0 A1) == 0 A2
        pres-neg :
          (x1 : A A1) ->
          hom (neg A1 x1) ==
            neg A2 (hom x1)
        pres-* :
          (x1 : A A1) (x2 : A A1) ->
          hom (* A1 x1 x2) ==
            * A2 (hom x1) (hom x2)
    data AddGroup_RingoidSigLang
      : Set where
      +L :
        AddGroup_RingoidSigLang ->
        AddGroup_RingoidSigLang ->
        AddGroup_RingoidSigLang
      0L : AddGroup_RingoidSigLang
      negL :
        AddGroup_RingoidSigLang ->
        AddGroup_RingoidSigLang
      *L :
        AddGroup_RingoidSigLang ->
        AddGroup_RingoidSigLang ->
        AddGroup_RingoidSigLang
    record AddGroup_RingoidSigProd
      : Set where
      constructor AddGroup_RingoidSigProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        negP : Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        leftInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P xP (negP xP) == 0P
        rightInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P (negP xP) xP == 0P
    record AddGroup_RingoidSigSig
      : Set where
      constructor AddGroup_RingoidSigSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
        0S : AS
        negS : AS -> AS
        *S : AS -> AS -> AS
  
  module AdditiveCommutativeMonoid where
    record AdditiveCommutativeMonoid
      : Set where
      constructor AdditiveCommutativeMonoidC
      field
        A : Set
        0 : A
        + : A -> A -> A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
    record AdditiveCommutativeMonoidHom
      (A1 : AdditiveCommutativeMonoid)
      (A2 : AdditiveCommutativeMonoid) :
      Set where
      constructor AdditiveCommutativeMonoidHomC
      field
        hom : A A1 -> A A2
        pres-0 : hom (0 A1) == 0 A2
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
    data AdditiveCommutativeMonoidLang
      : Set where
      0L :
        AdditiveCommutativeMonoidLang
      +L :
        AdditiveCommutativeMonoidLang ->
        AdditiveCommutativeMonoidLang ->
        AdditiveCommutativeMonoidLang
    record AdditiveCommutativeMonoidProd
      : Set where
      constructor AdditiveCommutativeMonoidProdC
      field
        AP : Set
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
    record AdditiveCommutativeMonoidSig
      : Set where
      constructor AdditiveCommutativeMonoidSigSigC
      field
        AS : Set
        0S : AS
        +S : AS -> AS -> AS
  
  module AdditiveCommutativeSemigroup where
    record AdditiveCommutativeSemigroup
      : Set where
      constructor AdditiveCommutativeSemigroupC
      field
        A : Set
        + : A -> A -> A
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
    record AdditiveCommutativeSemigroupHom
      (A1 : AdditiveCommutativeSemigroup)
      (A2 : AdditiveCommutativeSemigroup) :
      Set where
      constructor AdditiveCommutativeSemigroupHomC
      field
        hom : A A1 -> A A2
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
    data AdditiveCommutativeSemigroupLang
      : Set where
      +L :
        AdditiveCommutativeSemigroupLang ->
        AdditiveCommutativeSemigroupLang ->
        AdditiveCommutativeSemigroupLang
    record AdditiveCommutativeSemigroupProd
      : Set where
      constructor AdditiveCommutativeSemigroupProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
    record AdditiveCommutativeSemigroupSig
      : Set where
      constructor AdditiveCommutativeSemigroupSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
  
  module AdditiveGroup where
    record AdditiveGroup : Set where
      constructor AdditiveGroupC
      field
        A : Set
        0 : A
        + : A -> A -> A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
    record AdditiveGroupHom
      (A1 : AdditiveGroup)
      (A2 : AdditiveGroup) : Set where
      constructor AdditiveGroupHomC
      field
        hom : A A1 -> A A2
        pres-0 : hom (0 A1) == 0 A2
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
        pres-neg :
          (x1 : A A1) ->
          hom (neg A1 x1) ==
            neg A2 (hom x1)
    data AdditiveGroupLang
      : Set where
      0L : AdditiveGroupLang
      +L :
        AdditiveGroupLang ->
        AdditiveGroupLang ->
        AdditiveGroupLang
      negL :
        AdditiveGroupLang ->
        AdditiveGroupLang
    record AdditiveGroupProd
      : Set where
      constructor AdditiveGroupProdC
      field
        AP : Set
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        negP : Prod AP AP -> Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        leftInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P xP (negP xP) == 0P
        rightInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P (negP xP) xP == 0P
    record AdditiveGroupSig
      : Set where
      constructor AdditiveGroupSigSigC
      field
        AS : Set
        0S : AS
        +S : AS -> AS -> AS
        negS : AS -> AS
  
  module AdditiveMagma where
    record AdditiveMagma : Set where
      constructor AdditiveMagmaC
      field
        A : Set
        + : A -> A -> A
    record AdditiveMagmaHom
      (A1 : AdditiveMagma)
      (A2 : AdditiveMagma) : Set where
      constructor AdditiveMagmaHomC
      field
        hom : A A1 -> A A2
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
    data AdditiveMagmaLang
      : Set where
      +L :
        AdditiveMagmaLang ->
        AdditiveMagmaLang ->
        AdditiveMagmaLang
    record AdditiveMagmaProd
      : Set where
      constructor AdditiveMagmaProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record AdditiveMagmaSig
      : Set where
      constructor AdditiveMagmaSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
  
  module AdditiveMonoid where
    record AdditiveMonoid
      : Set where
      constructor AdditiveMonoidC
      field
        A : Set
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
    record AdditiveMonoidHom
      (A1 : AdditiveMonoid)
      (A2 : AdditiveMonoid) :
      Set where
      constructor AdditiveMonoidHomC
      field
        hom : A A1 -> A A2
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
        pres-0 : hom (0 A1) == 0 A2
    data AdditiveMonoidLang
      : Set where
      +L :
        AdditiveMonoidLang ->
        AdditiveMonoidLang ->
        AdditiveMonoidLang
      0L : AdditiveMonoidLang
    record AdditiveMonoidProd
      : Set where
      constructor AdditiveMonoidProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
    record AdditiveMonoidSig
      : Set where
      constructor AdditiveMonoidSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
        0S : AS
  
  module AdditivePointedMagma where
    record AdditivePointedMagma
      : Set where
      constructor AdditivePointedMagmaC
      field
        A : Set
        0 : A
        + : A -> A -> A
    record AdditivePointedMagmaHom
      (A1 : AdditivePointedMagma)
      (A2 : AdditivePointedMagma) :
      Set where
      constructor AdditivePointedMagmaHomC
      field
        hom : A A1 -> A A2
        pres-0 : hom (0 A1) == 0 A2
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
    data AdditivePointedMagmaLang
      : Set where
      0L : AdditivePointedMagmaLang
      +L :
        AdditivePointedMagmaLang ->
        AdditivePointedMagmaLang ->
        AdditivePointedMagmaLang
    record AdditivePointedMagmaProd
      : Set where
      constructor AdditivePointedMagmaProdC
      field
        AP : Set
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record AdditivePointedMagmaSig
      : Set where
      constructor AdditivePointedMagmaSigSigC
      field
        AS : Set
        0S : AS
        +S : AS -> AS -> AS
  
  module AdditivePointedSemigroup where
    record AdditivePointedSemigroup
      : Set where
      constructor AdditivePointedSemigroupC
      field
        A : Set
        0 : A
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
    record AdditivePointedSemigroupHom
      (A1 : AdditivePointedSemigroup)
      (A2 : AdditivePointedSemigroup) :
      Set where
      constructor AdditivePointedSemigroupHomC
      field
        hom : A A1 -> A A2
        pres-0 : hom (0 A1) == 0 A2
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
    data AdditivePointedSemigroupLang
      : Set where
      0L :
        AdditivePointedSemigroupLang
      +L :
        AdditivePointedSemigroupLang ->
        AdditivePointedSemigroupLang ->
        AdditivePointedSemigroupLang
    record AdditivePointedSemigroupProd
      : Set where
      constructor AdditivePointedSemigroupProdC
      field
        AP : Set
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
    record AdditivePointedSemigroupSig
      : Set where
      constructor AdditivePointedSemigroupSigSigC
      field
        AS : Set
        0S : AS
        +S : AS -> AS -> AS
  
  module AdditiveSemigroup where
    record AdditiveSemigroup
      : Set where
      constructor AdditiveSemigroupC
      field
        A : Set
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
    record AdditiveSemigroupHom
      (A1 : AdditiveSemigroup)
      (A2 : AdditiveSemigroup) :
      Set where
      constructor AdditiveSemigroupHomC
      field
        hom : A A1 -> A A2
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
    data AdditiveSemigroupLang
      : Set where
      +L :
        AdditiveSemigroupLang ->
        AdditiveSemigroupLang ->
        AdditiveSemigroupLang
    record AdditiveSemigroupProd
      : Set where
      constructor AdditiveSemigroupProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
    record AdditiveSemigroupSig
      : Set where
      constructor AdditiveSemigroupSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
  
  module AdditiveUnaryAntiDistribution where
    record AdditiveUnaryAntiDistribution
      : Set where
      constructor AdditiveUnaryAntiDistributionC
      field
        A : Set
        prim : A -> A
        + : A -> A -> A
        antidis_prim_+ :
          (x : A) (y : A) ->
          prim (+ x y) ==
            + (prim y) (prim x)
    record AdditiveUnaryAntiDistributionHom
      (A1 : AdditiveUnaryAntiDistribution)
      (A2 : AdditiveUnaryAntiDistribution) :
      Set where
      constructor AdditiveUnaryAntiDistributionHomC
      field
        hom : A A1 -> A A2
        pres-prim :
          (x1 : A A1) ->
          hom (prim A1 x1) ==
            prim A2 (hom x1)
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
    data AdditiveUnaryAntiDistributionLang
      : Set where
      primL :
        AdditiveUnaryAntiDistributionLang ->
        AdditiveUnaryAntiDistributionLang
      +L :
        AdditiveUnaryAntiDistributionLang ->
        AdditiveUnaryAntiDistributionLang ->
        AdditiveUnaryAntiDistributionLang
    record AdditiveUnaryAntiDistributionProd
      : Set where
      constructor AdditiveUnaryAntiDistributionProdC
      field
        AP : Set
        primP : Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        antidis_prim_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (+P xP yP) ==
            +P (primP yP) (primP xP)
    record AdditiveUnaryAntiDistributionSig
      : Set where
      constructor AdditiveUnaryAntiDistributionSigSigC
      field
        AS : Set
        primS : AS -> AS
        +S : AS -> AS -> AS
  
  module AdditiveUnital where
    record AdditiveUnital
      : Set where
      constructor AdditiveUnitalC
      field
        A : Set
        0 : A
        + : A -> A -> A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
    record AdditiveUnitalHom
      (A1 : AdditiveUnital)
      (A2 : AdditiveUnital) :
      Set where
      constructor AdditiveUnitalHomC
      field
        hom : A A1 -> A A2
        pres-0 : hom (0 A1) == 0 A2
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
    data AdditiveUnitalLang
      : Set where
      0L : AdditiveUnitalLang
      +L :
        AdditiveUnitalLang ->
        AdditiveUnitalLang ->
        AdditiveUnitalLang
    record AdditiveUnitalProd
      : Set where
      constructor AdditiveUnitalProdC
      field
        AP : Set
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
    record AdditiveUnitalSig
      : Set where
      constructor AdditiveUnitalSigSigC
      field
        AS : Set
        0S : AS
        +S : AS -> AS -> AS
  
  module AndDeMorgan where
    record AndDeMorgan : Set where
      constructor AndDeMorganC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        prim : A -> A
        andDeMorgan_*_+_prim :
          (x : A) (y : A) (z : A) ->
          prim (* x y) ==
            + (prim x) (prim y)
    record AndDeMorganHom
      (A1 : AndDeMorgan)
      (A2 : AndDeMorgan) : Set where
      constructor AndDeMorganHomC
      field
        hom : A A1 -> A A2
        pres-* :
          (x1 : A A1) (x2 : A A1) ->
          hom (* A1 x1 x2) ==
            * A2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A A1) ->
          hom (prim A1 x1) ==
            prim A2 (hom x1)
    data AndDeMorganLang : Set where
      *L :
        AndDeMorganLang ->
        AndDeMorganLang ->
        AndDeMorganLang
      +L :
        AndDeMorganLang ->
        AndDeMorganLang ->
        AndDeMorganLang
      primL :
        AndDeMorganLang ->
        AndDeMorganLang
    record AndDeMorganProd
      : Set where
      constructor AndDeMorganProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        andDeMorgan_*_+_primP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          primP (*P xP yP) ==
            +P (primP xP) (primP yP)
    record AndDeMorganSig
      : Set where
      constructor AndDeMorganSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        primS : AS -> AS
  
  module AntiAbsorbent where
    record AntiAbsorbent : Set where
      constructor AntiAbsorbentC
      field
        A : Set
        op : A -> A -> A
        antiAbsorbent :
          (x : A) (y : A) ->
          op x (op x y) == y
    record AntiAbsorbentHom
      (A1 : AntiAbsorbent)
      (A2 : AntiAbsorbent) : Set where
      constructor AntiAbsorbentHomC
      field
        hom : A A1 -> A A2
        pres-op :
          (x1 : A A1) (x2 : A A1) ->
          hom (op A1 x1 x2) ==
            op A2 (hom x1) (hom x2)
    data AntiAbsorbentLang
      : Set where
      opL :
        AntiAbsorbentLang ->
        AntiAbsorbentLang ->
        AntiAbsorbentLang
    record AntiAbsorbentProd
      : Set where
      constructor AntiAbsorbentProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        antiAbsorbentP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (opP xP yP) == yP
    record AntiAbsorbentSig
      : Set where
      constructor AntiAbsorbentSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module AntiCommutativeRing where
    record AntiCommutativeRing
      : Set where
      constructor AntiCommutativeRingC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
        antiCommutative :
          (x : A) (y : A) ->
          * x y == neg (* y x)
    record AntiCommutativeRingHom
      (A1 : AntiCommutativeRing)
      (A2 : AntiCommutativeRing) :
      Set where
      constructor AntiCommutativeRingHomC
      field
        hom : A A1 -> A A2
        pres-* :
          (x1 : A A1) (x2 : A A1) ->
          hom (* A1 x1 x2) ==
            * A2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
        pres-0 : hom (0 A1) == 0 A2
        pres-neg :
          (x1 : A A1) ->
          hom (neg A1 x1) ==
            neg A2 (hom x1)
        pres-1 : hom (1 A1) == 1 A2
    data AntiCommutativeRingLang
      : Set where
      *L :
        AntiCommutativeRingLang ->
        AntiCommutativeRingLang ->
        AntiCommutativeRingLang
      +L :
        AntiCommutativeRingLang ->
        AntiCommutativeRingLang ->
        AntiCommutativeRingLang
      0L : AntiCommutativeRingLang
      negL :
        AntiCommutativeRingLang ->
        AntiCommutativeRingLang
      1L : AntiCommutativeRingLang
    record AntiCommutativeRingProd
      : Set where
      constructor AntiCommutativeRingProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        negP : Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        leftInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P xP (negP xP) == 0P
        rightInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P (negP xP) xP == 0P
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        leftZero_op_0P :
          (xP : Prod AP AP) ->
          *P 0P xP == 0P
        rightZero_op_0P :
          (xP : Prod AP AP) ->
          *P xP 0P == 0P
        antiCommutativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == negP (*P yP xP)
    record AntiCommutativeRingSig
      : Set where
      constructor AntiCommutativeRingSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        0S : AS
        negS : AS -> AS
        1S : AS
  
  module AssocPlusRingoid where
    record AssocPlusRingoid
      : Set where
      constructor AssocPlusRingoidC
      field
        A : Set
        + : A -> A -> A
        * : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
    record AssocPlusRingoidHom
      (A1 : AssocPlusRingoid)
      (A2 : AssocPlusRingoid) :
      Set where
      constructor AssocPlusRingoidHomC
      field
        hom : A A1 -> A A2
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
        pres-* :
          (x1 : A A1) (x2 : A A1) ->
          hom (* A1 x1 x2) ==
            * A2 (hom x1) (hom x2)
    data AssocPlusRingoidLang
      : Set where
      +L :
        AssocPlusRingoidLang ->
        AssocPlusRingoidLang ->
        AssocPlusRingoidLang
      *L :
        AssocPlusRingoidLang ->
        AssocPlusRingoidLang ->
        AssocPlusRingoidLang
    record AssocPlusRingoidProd
      : Set where
      constructor AssocPlusRingoidProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
    record AssocPlusRingoidSig
      : Set where
      constructor AssocPlusRingoidSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
        *S : AS -> AS -> AS
  
  module AssocTimesRingoid where
    record AssocTimesRingoid
      : Set where
      constructor AssocTimesRingoidC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
    record AssocTimesRingoidHom
      (A1 : AssocTimesRingoid)
      (A2 : AssocTimesRingoid) :
      Set where
      constructor AssocTimesRingoidHomC
      field
        hom : A A1 -> A A2
        pres-* :
          (x1 : A A1) (x2 : A A1) ->
          hom (* A1 x1 x2) ==
            * A2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
    data AssocTimesRingoidLang
      : Set where
      *L :
        AssocTimesRingoidLang ->
        AssocTimesRingoidLang ->
        AssocTimesRingoidLang
      +L :
        AssocTimesRingoidLang ->
        AssocTimesRingoidLang ->
        AssocTimesRingoidLang
    record AssocTimesRingoidProd
      : Set where
      constructor AssocTimesRingoidProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
    record AssocTimesRingoidSig
      : Set where
      constructor AssocTimesRingoidSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  
  module AssociativeLeftRingoid where
    record AssociativeLeftRingoid
      : Set where
      constructor AssociativeLeftRingoidC
      field
        A : Set
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        + : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
    record AssociativeLeftRingoidHom
      (A1 : AssociativeLeftRingoid)
      (A2 : AssociativeLeftRingoid) :
      Set where
      constructor AssociativeLeftRingoidHomC
      field
        hom : A A1 -> A A2
        pres-* :
          (x1 : A A1) (x2 : A A1) ->
          hom (* A1 x1 x2) ==
            * A2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
    data AssociativeLeftRingoidLang
      : Set where
      *L :
        AssociativeLeftRingoidLang ->
        AssociativeLeftRingoidLang ->
        AssociativeLeftRingoidLang
      +L :
        AssociativeLeftRingoidLang ->
        AssociativeLeftRingoidLang ->
        AssociativeLeftRingoidLang
    record AssociativeLeftRingoidProd
      : Set where
      constructor AssociativeLeftRingoidProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
    record AssociativeLeftRingoidSig
      : Set where
      constructor AssociativeLeftRingoidSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  
  module AssociativeNonDistributiveRingoid where
    record AssociativeNonDistributiveRingoid
      : Set where
      constructor AssociativeNonDistributiveRingoidC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
    record AssociativeNonDistributiveRingoidHom
      (A1 : AssociativeNonDistributiveRingoid)
      (A2 : AssociativeNonDistributiveRingoid) :
      Set where
      constructor AssociativeNonDistributiveRingoidHomC
      field
        hom : A A1 -> A A2
        pres-* :
          (x1 : A A1) (x2 : A A1) ->
          hom (* A1 x1 x2) ==
            * A2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
    data AssociativeNonDistributiveRingoidLang
      : Set where
      *L :
        AssociativeNonDistributiveRingoidLang ->
        AssociativeNonDistributiveRingoidLang ->
        AssociativeNonDistributiveRingoidLang
      +L :
        AssociativeNonDistributiveRingoidLang ->
        AssociativeNonDistributiveRingoidLang ->
        AssociativeNonDistributiveRingoidLang
    record AssociativeNonDistributiveRingoidProd
      : Set where
      constructor AssociativeNonDistributiveRingoidProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
    record AssociativeNonDistributiveRingoidSig
      : Set where
      constructor AssociativeNonDistributiveRingoidSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  
  module AssociativeRightRingoid where
    record AssociativeRightRingoid
      : Set where
      constructor AssociativeRightRingoidC
      field
        A : Set
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        + : A -> A -> A
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record AssociativeRightRingoidHom
      (A1 : AssociativeRightRingoid)
      (A2 : AssociativeRightRingoid) :
      Set where
      constructor AssociativeRightRingoidHomC
      field
        hom : A A1 -> A A2
        pres-* :
          (x1 : A A1) (x2 : A A1) ->
          hom (* A1 x1 x2) ==
            * A2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
    data AssociativeRightRingoidLang
      : Set where
      *L :
        AssociativeRightRingoidLang ->
        AssociativeRightRingoidLang ->
        AssociativeRightRingoidLang
      +L :
        AssociativeRightRingoidLang ->
        AssociativeRightRingoidLang ->
        AssociativeRightRingoidLang
    record AssociativeRightRingoidProd
      : Set where
      constructor AssociativeRightRingoidProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record AssociativeRightRingoidSig
      : Set where
      constructor AssociativeRightRingoidSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  
  module Band where
    record Band : Set where
      constructor BandC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        idempotent_op :
          (x : A) -> op x x == x
    record BandHom
      (B1 : Band) (B2 : Band) :
      Set where
      constructor BandHomC
      field
        hom : A B1 -> A B2
        pres-op :
          (x1 : A B1) (x2 : A B1) ->
          hom (op B1 x1 x2) ==
            op B2 (hom x1) (hom x2)
    data BandLang : Set where
      opL :
        BandLang -> BandLang -> BandLang
    record BandProd : Set where
      constructor BandProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        idempotent_opP :
          (xP : Prod AP AP) ->
          opP xP xP == xP
    record BandSig : Set where
      constructor BandSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module BinaryInverse where
    record BinaryInverse : Set where
      constructor BinaryInverseC
      field
        A : Set
        |> : A -> A -> A
        <| : A -> A -> A
        leftInverse :
          (x : A) (y : A) ->
          <| (|> x y) x == y
        rightInverse :
          (x : A) (y : A) ->
          |> x (<| y x) == y
    record BinaryInverseHom
      (B1 : BinaryInverse)
      (B2 : BinaryInverse) : Set where
      constructor BinaryInverseHomC
      field
        hom : A B1 -> A B2
        pres-|> :
          (x1 : A B1) (x2 : A B1) ->
          hom (|> B1 x1 x2) ==
            |> B2 (hom x1) (hom x2)
        pres-<| :
          (x1 : A B1) (x2 : A B1) ->
          hom (<| B1 x1 x2) ==
            <| B2 (hom x1) (hom x2)
    data BinaryInverseLang
      : Set where
      |>L :
        BinaryInverseLang ->
        BinaryInverseLang ->
        BinaryInverseLang
      <|L :
        BinaryInverseLang ->
        BinaryInverseLang ->
        BinaryInverseLang
    record BinaryInverseProd
      : Set where
      constructor BinaryInverseProdC
      field
        AP : Set
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftInverseP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          <|P (|>P xP yP) xP == yP
        rightInverseP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          |>P xP (<|P yP xP) == yP
    record BinaryInverseSig
      : Set where
      constructor BinaryInverseSigSigC
      field
        AS : Set
        |>S : AS -> AS -> AS
        <|S : AS -> AS -> AS
  
  module BooleanGroup where
    record BooleanGroup : Set where
      constructor BooleanGroupC
      field
        A : Set
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        unipotence :
          (x : A) -> op x x == e
    record BooleanGroupHom
      (B1 : BooleanGroup)
      (B2 : BooleanGroup) : Set where
      constructor BooleanGroupHomC
      field
        hom : A B1 -> A B2
        pres-e : hom (e B1) == e B2
        pres-op :
          (x1 : A B1) (x2 : A B1) ->
          hom (op B1 x1 x2) ==
            op B2 (hom x1) (hom x2)
    data BooleanGroupLang
      : Set where
      eL : BooleanGroupLang
      opL :
        BooleanGroupLang ->
        BooleanGroupLang ->
        BooleanGroupLang
    record BooleanGroupProd
      : Set where
      constructor BooleanGroupProdC
      field
        AP : Set
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        unipotenceP :
          (xP : Prod AP AP) ->
          opP xP xP == eP
    record BooleanGroupSig
      : Set where
      constructor BooleanGroupSigSigC
      field
        AS : Set
        eS : AS
        opS : AS -> AS -> AS
  
  module BooleanRing where
    record BooleanRing : Set where
      constructor BooleanRingC
      field
        A : Set
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        + : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
        idempotent_* :
          (x : A) -> * x x == x
    record BooleanRingHom
      (B1 : BooleanRing)
      (B2 : BooleanRing) : Set where
      constructor BooleanRingHomC
      field
        hom : A B1 -> A B2
        pres-* :
          (x1 : A B1) (x2 : A B1) ->
          hom (* B1 x1 x2) ==
            * B2 (hom x1) (hom x2)
        pres-1 : hom (1 B1) == 1 B2
        pres-+ :
          (x1 : A B1) (x2 : A B1) ->
          hom (+ B1 x1 x2) ==
            + B2 (hom x1) (hom x2)
        pres-0 : hom (0 B1) == 0 B2
        pres-neg :
          (x1 : A B1) ->
          hom (neg B1 x1) ==
            neg B2 (hom x1)
    data BooleanRingLang : Set where
      *L :
        BooleanRingLang ->
        BooleanRingLang ->
        BooleanRingLang
      1L : BooleanRingLang
      +L :
        BooleanRingLang ->
        BooleanRingLang ->
        BooleanRingLang
      0L : BooleanRingLang
      negL :
        BooleanRingLang ->
        BooleanRingLang
    record BooleanRingProd
      : Set where
      constructor BooleanRingProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        negP : Prod AP AP -> Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        leftInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P xP (negP xP) == 0P
        rightInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P (negP xP) xP == 0P
        leftZero_op_0P :
          (xP : Prod AP AP) ->
          *P 0P xP == 0P
        rightZero_op_0P :
          (xP : Prod AP AP) ->
          *P xP 0P == 0P
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
    record BooleanRingSig
      : Set where
      constructor BooleanRingSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        1S : AS
        +S : AS -> AS -> AS
        0S : AS
        negS : AS -> AS
  
  module BoundedDistributiveLattice where
    record BoundedDistributiveLattice
      : Set where
      constructor BoundedDistributiveLatticeC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        idempotent_* :
          (x : A) -> * x x == x
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        idempotent_+ :
          (x : A) -> + x x == x
        leftAbsorp_*_+ :
          (x : A) (y : A) ->
          * x (+ x y) == x
        leftAbsorp_+_* :
          (x : A) (y : A) ->
          + x (* x y) == x
        leftModular_*_+ :
          (x : A) (y : A) (z : A) ->
          + (* x y) (* x z) ==
            * x (+ y (* x z))
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
    record BoundedDistributiveLatticeHom
      (B1 : BoundedDistributiveLattice)
      (B2 : BoundedDistributiveLattice) :
      Set where
      constructor BoundedDistributiveLatticeHomC
      field
        hom : A B1 -> A B2
        pres-* :
          (x1 : A B1) (x2 : A B1) ->
          hom (* B1 x1 x2) ==
            * B2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A B1) (x2 : A B1) ->
          hom (+ B1 x1 x2) ==
            + B2 (hom x1) (hom x2)
        pres-0 : hom (0 B1) == 0 B2
        pres-1 : hom (1 B1) == 1 B2
    data BoundedDistributiveLatticeLang
      : Set where
      *L :
        BoundedDistributiveLatticeLang ->
        BoundedDistributiveLatticeLang ->
        BoundedDistributiveLatticeLang
      +L :
        BoundedDistributiveLatticeLang ->
        BoundedDistributiveLatticeLang ->
        BoundedDistributiveLatticeLang
      0L :
        BoundedDistributiveLatticeLang
      1L :
        BoundedDistributiveLatticeLang
    record BoundedDistributiveLatticeProd
      : Set where
      constructor BoundedDistributiveLatticeProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        1P : Prod AP AP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
        leftAbsorp_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP (+P xP yP) == xP
        leftAbsorp_+_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP (*P xP yP) == xP
        leftModular_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (*P xP yP) (*P xP zP) ==
            *P xP (+P yP (*P xP zP))
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
    record BoundedDistributiveLatticeSig
      : Set where
      constructor BoundedDistributiveLatticeSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        0S : AS
        1S : AS
  
  module BoundedJoinLattice where
    record BoundedJoinLattice
      : Set where
      constructor BoundedJoinLatticeC
      field
        A : Set
        + : A -> A -> A
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        idempotent_+ :
          (x : A) -> + x x == x
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        * : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        idempotent_* :
          (x : A) -> * x x == x
        leftAbsorp_*_+ :
          (x : A) (y : A) ->
          * x (+ x y) == x
        leftAbsorp_+_* :
          (x : A) (y : A) ->
          + x (* x y) == x
    record BoundedJoinLatticeHom
      (B1 : BoundedJoinLattice)
      (B2 : BoundedJoinLattice) :
      Set where
      constructor BoundedJoinLatticeHomC
      field
        hom : A B1 -> A B2
        pres-+ :
          (x1 : A B1) (x2 : A B1) ->
          hom (+ B1 x1 x2) ==
            + B2 (hom x1) (hom x2)
        pres-0 : hom (0 B1) == 0 B2
        pres-* :
          (x1 : A B1) (x2 : A B1) ->
          hom (* B1 x1 x2) ==
            * B2 (hom x1) (hom x2)
    data BoundedJoinLatticeLang
      : Set where
      +L :
        BoundedJoinLatticeLang ->
        BoundedJoinLatticeLang ->
        BoundedJoinLatticeLang
      0L : BoundedJoinLatticeLang
      *L :
        BoundedJoinLatticeLang ->
        BoundedJoinLatticeLang ->
        BoundedJoinLatticeLang
    record BoundedJoinLatticeProd
      : Set where
      constructor BoundedJoinLatticeProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
        leftAbsorp_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP (+P xP yP) == xP
        leftAbsorp_+_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP (*P xP yP) == xP
    record BoundedJoinLatticeSig
      : Set where
      constructor BoundedJoinLatticeSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
        0S : AS
        *S : AS -> AS -> AS
  
  module BoundedJoinSemilattice where
    record BoundedJoinSemilattice
      : Set where
      constructor BoundedJoinSemilatticeC
      field
        A : Set
        + : A -> A -> A
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        idempotent_+ :
          (x : A) -> + x x == x
    record BoundedJoinSemilatticeHom
      (B1 : BoundedJoinSemilattice)
      (B2 : BoundedJoinSemilattice) :
      Set where
      constructor BoundedJoinSemilatticeHomC
      field
        hom : A B1 -> A B2
        pres-+ :
          (x1 : A B1) (x2 : A B1) ->
          hom (+ B1 x1 x2) ==
            + B2 (hom x1) (hom x2)
        pres-0 : hom (0 B1) == 0 B2
    data BoundedJoinSemilatticeLang
      : Set where
      +L :
        BoundedJoinSemilatticeLang ->
        BoundedJoinSemilatticeLang ->
        BoundedJoinSemilatticeLang
      0L : BoundedJoinSemilatticeLang
    record BoundedJoinSemilatticeProd
      : Set where
      constructor BoundedJoinSemilatticeProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
    record BoundedJoinSemilatticeSig
      : Set where
      constructor BoundedJoinSemilatticeSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
        0S : AS
  
  module BoundedLattice where
    record BoundedLattice
      : Set where
      constructor BoundedLatticeC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        idempotent_* :
          (x : A) -> * x x == x
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        idempotent_+ :
          (x : A) -> + x x == x
        leftAbsorp_*_+ :
          (x : A) (y : A) ->
          * x (+ x y) == x
        leftAbsorp_+_* :
          (x : A) (y : A) ->
          + x (* x y) == x
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
    record BoundedLatticeHom
      (B1 : BoundedLattice)
      (B2 : BoundedLattice) :
      Set where
      constructor BoundedLatticeHomC
      field
        hom : A B1 -> A B2
        pres-* :
          (x1 : A B1) (x2 : A B1) ->
          hom (* B1 x1 x2) ==
            * B2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A B1) (x2 : A B1) ->
          hom (+ B1 x1 x2) ==
            + B2 (hom x1) (hom x2)
        pres-0 : hom (0 B1) == 0 B2
        pres-1 : hom (1 B1) == 1 B2
    data BoundedLatticeLang
      : Set where
      *L :
        BoundedLatticeLang ->
        BoundedLatticeLang ->
        BoundedLatticeLang
      +L :
        BoundedLatticeLang ->
        BoundedLatticeLang ->
        BoundedLatticeLang
      0L : BoundedLatticeLang
      1L : BoundedLatticeLang
    record BoundedLatticeProd
      : Set where
      constructor BoundedLatticeProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        1P : Prod AP AP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
        leftAbsorp_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP (+P xP yP) == xP
        leftAbsorp_+_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP (*P xP yP) == xP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
    record BoundedLatticeSig
      : Set where
      constructor BoundedLatticeSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        0S : AS
        1S : AS
  
  module BoundedMeetLattice where
    record BoundedMeetLattice
      : Set where
      constructor BoundedMeetLatticeC
      field
        A : Set
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        idempotent_* :
          (x : A) -> * x x == x
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        + : A -> A -> A
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        idempotent_+ :
          (x : A) -> + x x == x
        leftAbsorp_*_+ :
          (x : A) (y : A) ->
          * x (+ x y) == x
        leftAbsorp_+_* :
          (x : A) (y : A) ->
          + x (* x y) == x
    record BoundedMeetLatticeHom
      (B1 : BoundedMeetLattice)
      (B2 : BoundedMeetLattice) :
      Set where
      constructor BoundedMeetLatticeHomC
      field
        hom : A B1 -> A B2
        pres-* :
          (x1 : A B1) (x2 : A B1) ->
          hom (* B1 x1 x2) ==
            * B2 (hom x1) (hom x2)
        pres-1 : hom (1 B1) == 1 B2
        pres-+ :
          (x1 : A B1) (x2 : A B1) ->
          hom (+ B1 x1 x2) ==
            + B2 (hom x1) (hom x2)
    data BoundedMeetLatticeLang
      : Set where
      *L :
        BoundedMeetLatticeLang ->
        BoundedMeetLatticeLang ->
        BoundedMeetLatticeLang
      1L : BoundedMeetLatticeLang
      +L :
        BoundedMeetLatticeLang ->
        BoundedMeetLatticeLang ->
        BoundedMeetLatticeLang
    record BoundedMeetLatticeProd
      : Set where
      constructor BoundedMeetLatticeProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
        leftAbsorp_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP (+P xP yP) == xP
        leftAbsorp_+_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP (*P xP yP) == xP
    record BoundedMeetLatticeSig
      : Set where
      constructor BoundedMeetLatticeSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        1S : AS
        +S : AS -> AS -> AS
  
  module BoundedMeetSemilattice where
    record BoundedMeetSemilattice
      : Set where
      constructor BoundedMeetSemilatticeC
      field
        A : Set
        * : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        idempotent_* :
          (x : A) -> * x x == x
    record BoundedMeetSemilatticeHom
      (B1 : BoundedMeetSemilattice)
      (B2 : BoundedMeetSemilattice) :
      Set where
      constructor BoundedMeetSemilatticeHomC
      field
        hom : A B1 -> A B2
        pres-* :
          (x1 : A B1) (x2 : A B1) ->
          hom (* B1 x1 x2) ==
            * B2 (hom x1) (hom x2)
        pres-1 : hom (1 B1) == 1 B2
    data BoundedMeetSemilatticeLang
      : Set where
      *L :
        BoundedMeetSemilatticeLang ->
        BoundedMeetSemilatticeLang ->
        BoundedMeetSemilatticeLang
      1L : BoundedMeetSemilatticeLang
    record BoundedMeetSemilatticeProd
      : Set where
      constructor BoundedMeetSemilatticeProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
    record BoundedMeetSemilatticeSig
      : Set where
      constructor BoundedMeetSemilatticeSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        1S : AS
  
  module BoundedModularLattice where
    record BoundedModularLattice
      : Set where
      constructor BoundedModularLatticeC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        idempotent_* :
          (x : A) -> * x x == x
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        idempotent_+ :
          (x : A) -> + x x == x
        leftAbsorp_*_+ :
          (x : A) (y : A) ->
          * x (+ x y) == x
        leftAbsorp_+_* :
          (x : A) (y : A) ->
          + x (* x y) == x
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        leftModular_*_+ :
          (x : A) (y : A) (z : A) ->
          + (* x y) (* x z) ==
            * x (+ y (* x z))
    record BoundedModularLatticeHom
      (B1 : BoundedModularLattice)
      (B2 : BoundedModularLattice) :
      Set where
      constructor BoundedModularLatticeHomC
      field
        hom : A B1 -> A B2
        pres-* :
          (x1 : A B1) (x2 : A B1) ->
          hom (* B1 x1 x2) ==
            * B2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A B1) (x2 : A B1) ->
          hom (+ B1 x1 x2) ==
            + B2 (hom x1) (hom x2)
        pres-0 : hom (0 B1) == 0 B2
        pres-1 : hom (1 B1) == 1 B2
    data BoundedModularLatticeLang
      : Set where
      *L :
        BoundedModularLatticeLang ->
        BoundedModularLatticeLang ->
        BoundedModularLatticeLang
      +L :
        BoundedModularLatticeLang ->
        BoundedModularLatticeLang ->
        BoundedModularLatticeLang
      0L : BoundedModularLatticeLang
      1L : BoundedModularLatticeLang
    record BoundedModularLatticeProd
      : Set where
      constructor BoundedModularLatticeProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        1P : Prod AP AP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
        leftAbsorp_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP (+P xP yP) == xP
        leftAbsorp_+_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP (*P xP yP) == xP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        leftModular_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (*P xP yP) (*P xP zP) ==
            *P xP (+P yP (*P xP zP))
    record BoundedModularLatticeSig
      : Set where
      constructor BoundedModularLatticeSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        0S : AS
        1S : AS
  
  module CancellativeCommutativeMonoid where
    record CancellativeCommutativeMonoid
      : Set where
      constructor CancellativeCommutativeMonoidC
      field
        A : Set
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        leftCancellative :
          (x : A) (y : A) (z : A) ->
          op z x == op z y -> x == y
        rightCancellative :
          (x : A) (y : A) (z : A) ->
          op x z == op y z -> x == y
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
    record CancellativeCommutativeMonoidHom
      (C1 : CancellativeCommutativeMonoid)
      (C2 : CancellativeCommutativeMonoid) :
      Set where
      constructor CancellativeCommutativeMonoidHomC
      field
        hom : A C1 -> A C2
        pres-e : hom (e C1) == e C2
        pres-op :
          (x1 : A C1) (x2 : A C1) ->
          hom (op C1 x1 x2) ==
            op C2 (hom x1) (hom x2)
    data CancellativeCommutativeMonoidLang
      : Set where
      eL :
        CancellativeCommutativeMonoidLang
      opL :
        CancellativeCommutativeMonoidLang ->
        CancellativeCommutativeMonoidLang ->
        CancellativeCommutativeMonoidLang
    record CancellativeCommutativeMonoidProd
      : Set where
      constructor CancellativeCommutativeMonoidProdC
      field
        AP : Set
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        leftCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP zP xP == opP zP yP ->
          xP == yP
        rightCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP xP zP == opP yP zP ->
          xP == yP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
    record CancellativeCommutativeMonoidSig
      : Set where
      constructor CancellativeCommutativeMonoidSigSigC
      field
        AS : Set
        eS : AS
        opS : AS -> AS -> AS
  
  module CancellativeCommutativeSemigroup where
    record CancellativeCommutativeSemigroup
      : Set where
      constructor CancellativeCommutativeSemigroupC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
        leftCancellative :
          (x : A) (y : A) (z : A) ->
          op z x == op z y -> x == y
        rightCancellative :
          (x : A) (y : A) (z : A) ->
          op x z == op y z -> x == y
    record CancellativeCommutativeSemigroupHom
      (C1 : CancellativeCommutativeSemigroup)
      (C2 : CancellativeCommutativeSemigroup) :
      Set where
      constructor CancellativeCommutativeSemigroupHomC
      field
        hom : A C1 -> A C2
        pres-op :
          (x1 : A C1) (x2 : A C1) ->
          hom (op C1 x1 x2) ==
            op C2 (hom x1) (hom x2)
    data CancellativeCommutativeSemigroupLang
      : Set where
      opL :
        CancellativeCommutativeSemigroupLang ->
        CancellativeCommutativeSemigroupLang ->
        CancellativeCommutativeSemigroupLang
    record CancellativeCommutativeSemigroupProd
      : Set where
      constructor CancellativeCommutativeSemigroupProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
        leftCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP zP xP == opP zP yP ->
          xP == yP
        rightCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP xP zP == opP yP zP ->
          xP == yP
    record CancellativeCommutativeSemigroupSig
      : Set where
      constructor CancellativeCommutativeSemigroupSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module CancellativeMagma where
    record CancellativeMagma
      : Set where
      constructor CancellativeMagmaC
      field
        A : Set
        op : A -> A -> A
        leftCancellative :
          (x : A) (y : A) (z : A) ->
          op z x == op z y -> x == y
        rightCancellative :
          (x : A) (y : A) (z : A) ->
          op x z == op y z -> x == y
    record CancellativeMagmaHom
      (C1 : CancellativeMagma)
      (C2 : CancellativeMagma) :
      Set where
      constructor CancellativeMagmaHomC
      field
        hom : A C1 -> A C2
        pres-op :
          (x1 : A C1) (x2 : A C1) ->
          hom (op C1 x1 x2) ==
            op C2 (hom x1) (hom x2)
    data CancellativeMagmaLang
      : Set where
      opL :
        CancellativeMagmaLang ->
        CancellativeMagmaLang ->
        CancellativeMagmaLang
    record CancellativeMagmaProd
      : Set where
      constructor CancellativeMagmaProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP zP xP == opP zP yP ->
          xP == yP
        rightCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP xP zP == opP yP zP ->
          xP == yP
    record CancellativeMagmaSig
      : Set where
      constructor CancellativeMagmaSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module CancellativeMonoid where
    record CancellativeMonoid
      : Set where
      constructor CancellativeMonoidC
      field
        A : Set
        op : A -> A -> A
        e : A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        leftCancellative :
          (x : A) (y : A) (z : A) ->
          op z x == op z y -> x == y
        rightCancellative :
          (x : A) (y : A) (z : A) ->
          op x z == op y z -> x == y
    record CancellativeMonoidHom
      (C1 : CancellativeMonoid)
      (C2 : CancellativeMonoid) :
      Set where
      constructor CancellativeMonoidHomC
      field
        hom : A C1 -> A C2
        pres-op :
          (x1 : A C1) (x2 : A C1) ->
          hom (op C1 x1 x2) ==
            op C2 (hom x1) (hom x2)
        pres-e : hom (e C1) == e C2
    data CancellativeMonoidLang
      : Set where
      opL :
        CancellativeMonoidLang ->
        CancellativeMonoidLang ->
        CancellativeMonoidLang
      eL : CancellativeMonoidLang
    record CancellativeMonoidProd
      : Set where
      constructor CancellativeMonoidProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        leftCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP zP xP == opP zP yP ->
          xP == yP
        rightCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP xP zP == opP yP zP ->
          xP == yP
    record CancellativeMonoidSig
      : Set where
      constructor CancellativeMonoidSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        eS : AS
  
  module CancellativeSemigroup where
    record CancellativeSemigroup
      : Set where
      constructor CancellativeSemigroupC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        leftCancellative :
          (x : A) (y : A) (z : A) ->
          op z x == op z y -> x == y
        rightCancellative :
          (x : A) (y : A) (z : A) ->
          op x z == op y z -> x == y
    record CancellativeSemigroupHom
      (C1 : CancellativeSemigroup)
      (C2 : CancellativeSemigroup) :
      Set where
      constructor CancellativeSemigroupHomC
      field
        hom : A C1 -> A C2
        pres-op :
          (x1 : A C1) (x2 : A C1) ->
          hom (op C1 x1 x2) ==
            op C2 (hom x1) (hom x2)
    data CancellativeSemigroupLang
      : Set where
      opL :
        CancellativeSemigroupLang ->
        CancellativeSemigroupLang ->
        CancellativeSemigroupLang
    record CancellativeSemigroupProd
      : Set where
      constructor CancellativeSemigroupProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        leftCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP zP xP == opP zP yP ->
          xP == yP
        rightCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP xP zP == opP yP zP ->
          xP == yP
    record CancellativeSemigroupSig
      : Set where
      constructor CancellativeSemigroupSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module Carrier where
    record Carrier : Set where
      constructor CarrierC
      field
        A : Set
    record CarrierHom
      (C1 : Carrier) (C2 : Carrier) :
      Set where
      constructor CarrierHomC
      field
        hom : A C1 -> A C2
    data CarrierLang : Set where
      
    record CarrierProd : Set where
      constructor CarrierProdC
      field
        AP : Set
    record CarrierSig : Set where
      constructor CarrierSigSigC
      field
        AS : Set
  
  module CommutativeAdditiveMagma where
    record CommutativeAdditiveMagma
      : Set where
      constructor CommutativeAdditiveMagmaC
      field
        A : Set
        + : A -> A -> A
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
    record CommutativeAdditiveMagmaHom
      (C1 : CommutativeAdditiveMagma)
      (C2 : CommutativeAdditiveMagma) :
      Set where
      constructor CommutativeAdditiveMagmaHomC
      field
        hom : A C1 -> A C2
        pres-+ :
          (x1 : A C1) (x2 : A C1) ->
          hom (+ C1 x1 x2) ==
            + C2 (hom x1) (hom x2)
    data CommutativeAdditiveMagmaLang
      : Set where
      +L :
        CommutativeAdditiveMagmaLang ->
        CommutativeAdditiveMagmaLang ->
        CommutativeAdditiveMagmaLang
    record CommutativeAdditiveMagmaProd
      : Set where
      constructor CommutativeAdditiveMagmaProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
    record CommutativeAdditiveMagmaSig
      : Set where
      constructor CommutativeAdditiveMagmaSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
  
  module CommutativeGroup where
    record CommutativeGroup
      : Set where
      constructor CommutativeGroupC
      field
        A : Set
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        inv : A -> A
        leftInverse_inv_op_e :
          (x : A) -> op x (inv x) == e
        rightInverse_inv_op_e :
          (x : A) -> op (inv x) x == e
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
    record CommutativeGroupHom
      (C1 : CommutativeGroup)
      (C2 : CommutativeGroup) :
      Set where
      constructor CommutativeGroupHomC
      field
        hom : A C1 -> A C2
        pres-e : hom (e C1) == e C2
        pres-op :
          (x1 : A C1) (x2 : A C1) ->
          hom (op C1 x1 x2) ==
            op C2 (hom x1) (hom x2)
        pres-inv :
          (x1 : A C1) ->
          hom (inv C1 x1) ==
            inv C2 (hom x1)
    data CommutativeGroupLang
      : Set where
      eL : CommutativeGroupLang
      opL :
        CommutativeGroupLang ->
        CommutativeGroupLang ->
        CommutativeGroupLang
      invL :
        CommutativeGroupLang ->
        CommutativeGroupLang
    record CommutativeGroupProd
      : Set where
      constructor CommutativeGroupProdC
      field
        AP : Set
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        invP : Prod AP AP -> Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        leftInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP xP (invP xP) == eP
        rightInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP (invP xP) xP == eP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
    record CommutativeGroupSig
      : Set where
      constructor CommutativeGroupSigSigC
      field
        AS : Set
        eS : AS
        opS : AS -> AS -> AS
        invS : AS -> AS
  
  module CommutativeMagma where
    record CommutativeMagma
      : Set where
      constructor CommutativeMagmaC
      field
        A : Set
        op : A -> A -> A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
    record CommutativeMagmaHom
      (C1 : CommutativeMagma)
      (C2 : CommutativeMagma) :
      Set where
      constructor CommutativeMagmaHomC
      field
        hom : A C1 -> A C2
        pres-op :
          (x1 : A C1) (x2 : A C1) ->
          hom (op C1 x1 x2) ==
            op C2 (hom x1) (hom x2)
    data CommutativeMagmaLang
      : Set where
      opL :
        CommutativeMagmaLang ->
        CommutativeMagmaLang ->
        CommutativeMagmaLang
    record CommutativeMagmaProd
      : Set where
      constructor CommutativeMagmaProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
    record CommutativeMagmaSig
      : Set where
      constructor CommutativeMagmaSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module CommutativeMonoid where
    record CommutativeMonoid
      : Set where
      constructor CommutativeMonoidC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        e : A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
    record CommutativeMonoidHom
      (C1 : CommutativeMonoid)
      (C2 : CommutativeMonoid) :
      Set where
      constructor CommutativeMonoidHomC
      field
        hom : A C1 -> A C2
        pres-op :
          (x1 : A C1) (x2 : A C1) ->
          hom (op C1 x1 x2) ==
            op C2 (hom x1) (hom x2)
        pres-e : hom (e C1) == e C2
    data CommutativeMonoidLang
      : Set where
      opL :
        CommutativeMonoidLang ->
        CommutativeMonoidLang ->
        CommutativeMonoidLang
      eL : CommutativeMonoidLang
    record CommutativeMonoidProd
      : Set where
      constructor CommutativeMonoidProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
    record CommutativeMonoidSig
      : Set where
      constructor CommutativeMonoidSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        eS : AS
  
  module CommutativeMonoid1 where
    record CommutativeMonoid1
      : Set where
      constructor CommutativeMonoid1C
      field
        A : Set
        1 : A
        op : A -> A -> A
        lunit_1 : (x : A) -> op 1 x == x
        runit_1 : (x : A) -> op x 1 == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
    record CommutativeMonoid1Hom
      (C1 : CommutativeMonoid1)
      (C2 : CommutativeMonoid1) :
      Set where
      constructor CommutativeMonoid1HomC
      field
        hom : A C1 -> A C2
        pres-1 : hom (1 C1) == 1 C2
        pres-op :
          (x1 : A C1) (x2 : A C1) ->
          hom (op C1 x1 x2) ==
            op C2 (hom x1) (hom x2)
    data CommutativeMonoid1Lang
      : Set where
      1L : CommutativeMonoid1Lang
      opL :
        CommutativeMonoid1Lang ->
        CommutativeMonoid1Lang ->
        CommutativeMonoid1Lang
    record CommutativeMonoid1Prod
      : Set where
      constructor CommutativeMonoid1ProdC
      field
        AP : Set
        1P : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_1P :
          (xP : Prod AP AP) ->
          opP 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          opP xP 1P == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
    record CommutativeMonoid1Sig
      : Set where
      constructor CommutativeMonoid1SigSigC
      field
        AS : Set
        1S : AS
        opS : AS -> AS -> AS
  
  module CommutativePointedMagma where
    record CommutativePointedMagma
      : Set where
      constructor CommutativePointedMagmaC
      field
        A : Set
        op : A -> A -> A
        e : A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
    record CommutativePointedMagmaHom
      (C1 : CommutativePointedMagma)
      (C2 : CommutativePointedMagma) :
      Set where
      constructor CommutativePointedMagmaHomC
      field
        hom : A C1 -> A C2
        pres-op :
          (x1 : A C1) (x2 : A C1) ->
          hom (op C1 x1 x2) ==
            op C2 (hom x1) (hom x2)
        pres-e : hom (e C1) == e C2
    data CommutativePointedMagmaLang
      : Set where
      opL :
        CommutativePointedMagmaLang ->
        CommutativePointedMagmaLang ->
        CommutativePointedMagmaLang
      eL : CommutativePointedMagmaLang
    record CommutativePointedMagmaProd
      : Set where
      constructor CommutativePointedMagmaProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
    record CommutativePointedMagmaSig
      : Set where
      constructor CommutativePointedMagmaSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        eS : AS
  
  module CommutativeRing where
    record CommutativeRing
      : Set where
      constructor CommutativeRingC
      field
        A : Set
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        + : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
    record CommutativeRingHom
      (C1 : CommutativeRing)
      (C2 : CommutativeRing) :
      Set where
      constructor CommutativeRingHomC
      field
        hom : A C1 -> A C2
        pres-* :
          (x1 : A C1) (x2 : A C1) ->
          hom (* C1 x1 x2) ==
            * C2 (hom x1) (hom x2)
        pres-1 : hom (1 C1) == 1 C2
        pres-+ :
          (x1 : A C1) (x2 : A C1) ->
          hom (+ C1 x1 x2) ==
            + C2 (hom x1) (hom x2)
        pres-0 : hom (0 C1) == 0 C2
        pres-neg :
          (x1 : A C1) ->
          hom (neg C1 x1) ==
            neg C2 (hom x1)
    data CommutativeRingLang
      : Set where
      *L :
        CommutativeRingLang ->
        CommutativeRingLang ->
        CommutativeRingLang
      1L : CommutativeRingLang
      +L :
        CommutativeRingLang ->
        CommutativeRingLang ->
        CommutativeRingLang
      0L : CommutativeRingLang
      negL :
        CommutativeRingLang ->
        CommutativeRingLang
    record CommutativeRingProd
      : Set where
      constructor CommutativeRingProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        negP : Prod AP AP -> Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        leftInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P xP (negP xP) == 0P
        rightInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P (negP xP) xP == 0P
        leftZero_op_0P :
          (xP : Prod AP AP) ->
          *P 0P xP == 0P
        rightZero_op_0P :
          (xP : Prod AP AP) ->
          *P xP 0P == 0P
    record CommutativeRingSig
      : Set where
      constructor CommutativeRingSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        1S : AS
        +S : AS -> AS -> AS
        0S : AS
        negS : AS -> AS
  
  module CommutativeSemigroup where
    record CommutativeSemigroup
      : Set where
      constructor CommutativeSemigroupC
      field
        A : Set
        op : A -> A -> A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
    record CommutativeSemigroupHom
      (C1 : CommutativeSemigroup)
      (C2 : CommutativeSemigroup) :
      Set where
      constructor CommutativeSemigroupHomC
      field
        hom : A C1 -> A C2
        pres-op :
          (x1 : A C1) (x2 : A C1) ->
          hom (op C1 x1 x2) ==
            op C2 (hom x1) (hom x2)
    data CommutativeSemigroupLang
      : Set where
      opL :
        CommutativeSemigroupLang ->
        CommutativeSemigroupLang ->
        CommutativeSemigroupLang
    record CommutativeSemigroupProd
      : Set where
      constructor CommutativeSemigroupProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
    record CommutativeSemigroupSig
      : Set where
      constructor CommutativeSemigroupSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module ComplementSig where
    record ComplementSig : Set where
      constructor ComplementSigC
      field
        A : Set
        compl : A -> A
    record ComplementSigHom
      (C1 : ComplementSig)
      (C2 : ComplementSig) : Set where
      constructor ComplementSigHomC
      field
        hom : A C1 -> A C2
        pres-compl :
          (x1 : A C1) ->
          hom (compl C1 x1) ==
            compl C2 (hom x1)
    data ComplementSigLang
      : Set where
      complL :
        ComplementSigLang ->
        ComplementSigLang
    record ComplementSigProd
      : Set where
      constructor ComplementSigProdC
      field
        AP : Set
        complP :
          Prod AP AP -> Prod AP AP
    record ComplementSigSig
      : Set where
      constructor ComplementSigSigSigC
      field
        AS : Set
        complS : AS -> AS
  
  module DistributiveLattice where
    record DistributiveLattice
      : Set where
      constructor DistributiveLatticeC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        idempotent_* :
          (x : A) -> * x x == x
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        idempotent_+ :
          (x : A) -> + x x == x
        leftAbsorp_*_+ :
          (x : A) (y : A) ->
          * x (+ x y) == x
        leftAbsorp_+_* :
          (x : A) (y : A) ->
          + x (* x y) == x
        leftModular_*_+ :
          (x : A) (y : A) (z : A) ->
          + (* x y) (* x z) ==
            * x (+ y (* x z))
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
    record DistributiveLatticeHom
      (D1 : DistributiveLattice)
      (D2 : DistributiveLattice) :
      Set where
      constructor DistributiveLatticeHomC
      field
        hom : A D1 -> A D2
        pres-* :
          (x1 : A D1) (x2 : A D1) ->
          hom (* D1 x1 x2) ==
            * D2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A D1) (x2 : A D1) ->
          hom (+ D1 x1 x2) ==
            + D2 (hom x1) (hom x2)
    data DistributiveLatticeLang
      : Set where
      *L :
        DistributiveLatticeLang ->
        DistributiveLatticeLang ->
        DistributiveLatticeLang
      +L :
        DistributiveLatticeLang ->
        DistributiveLatticeLang ->
        DistributiveLatticeLang
    record DistributiveLatticeProd
      : Set where
      constructor DistributiveLatticeProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
        leftAbsorp_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP (+P xP yP) == xP
        leftAbsorp_+_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP (*P xP yP) == xP
        leftModular_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (*P xP yP) (*P xP zP) ==
            *P xP (+P yP (*P xP zP))
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
    record DistributiveLatticeSig
      : Set where
      constructor DistributiveLatticeSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  
  module DoubleMonoid where
    record DoubleMonoid : Set where
      constructor DoubleMonoidC
      field
        A : Set
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
    record DoubleMonoidHom
      (D1 : DoubleMonoid)
      (D2 : DoubleMonoid) : Set where
      constructor DoubleMonoidHomC
      field
        hom : A D1 -> A D2
        pres-+ :
          (x1 : A D1) (x2 : A D1) ->
          hom (+ D1 x1 x2) ==
            + D2 (hom x1) (hom x2)
        pres-0 : hom (0 D1) == 0 D2
        pres-* :
          (x1 : A D1) (x2 : A D1) ->
          hom (* D1 x1 x2) ==
            * D2 (hom x1) (hom x2)
        pres-1 : hom (1 D1) == 1 D2
    data DoubleMonoidLang
      : Set where
      +L :
        DoubleMonoidLang ->
        DoubleMonoidLang ->
        DoubleMonoidLang
      0L : DoubleMonoidLang
      *L :
        DoubleMonoidLang ->
        DoubleMonoidLang ->
        DoubleMonoidLang
      1L : DoubleMonoidLang
    record DoubleMonoidProd
      : Set where
      constructor DoubleMonoidProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
    record DoubleMonoidSig
      : Set where
      constructor DoubleMonoidSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
        0S : AS
        *S : AS -> AS -> AS
        1S : AS
  
  module DualDeMorgan where
    record DualDeMorgan : Set where
      constructor DualDeMorganC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        prim : A -> A
        andDeMorgan_*_+_prim :
          (x : A) (y : A) (z : A) ->
          prim (* x y) ==
            + (prim x) (prim y)
        orDeMorgan_+_*_prim :
          (x : A) (y : A) (z : A) ->
          prim (+ x y) ==
            * (prim x) (prim y)
    record DualDeMorganHom
      (D1 : DualDeMorgan)
      (D2 : DualDeMorgan) : Set where
      constructor DualDeMorganHomC
      field
        hom : A D1 -> A D2
        pres-* :
          (x1 : A D1) (x2 : A D1) ->
          hom (* D1 x1 x2) ==
            * D2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A D1) (x2 : A D1) ->
          hom (+ D1 x1 x2) ==
            + D2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A D1) ->
          hom (prim D1 x1) ==
            prim D2 (hom x1)
    data DualDeMorganLang
      : Set where
      *L :
        DualDeMorganLang ->
        DualDeMorganLang ->
        DualDeMorganLang
      +L :
        DualDeMorganLang ->
        DualDeMorganLang ->
        DualDeMorganLang
      primL :
        DualDeMorganLang ->
        DualDeMorganLang
    record DualDeMorganProd
      : Set where
      constructor DualDeMorganProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        andDeMorgan_*_+_primP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          primP (*P xP yP) ==
            +P (primP xP) (primP yP)
        orDeMorgan_+_*_primP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          primP (+P xP yP) ==
            *P (primP xP) (primP yP)
    record DualDeMorganSig
      : Set where
      constructor DualDeMorganSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        primS : AS -> AS
  
  module DualSemilattices where
    record DualSemilattices
      : Set where
      constructor DualSemilatticesC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        idempotent_* :
          (x : A) -> * x x == x
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        idempotent_+ :
          (x : A) -> + x x == x
    record DualSemilatticesHom
      (D1 : DualSemilattices)
      (D2 : DualSemilattices) :
      Set where
      constructor DualSemilatticesHomC
      field
        hom : A D1 -> A D2
        pres-* :
          (x1 : A D1) (x2 : A D1) ->
          hom (* D1 x1 x2) ==
            * D2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A D1) (x2 : A D1) ->
          hom (+ D1 x1 x2) ==
            + D2 (hom x1) (hom x2)
    data DualSemilatticesLang
      : Set where
      *L :
        DualSemilatticesLang ->
        DualSemilatticesLang ->
        DualSemilatticesLang
      +L :
        DualSemilatticesLang ->
        DualSemilatticesLang ->
        DualSemilatticesLang
    record DualSemilatticesProd
      : Set where
      constructor DualSemilatticesProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
    record DualSemilatticesSig
      : Set where
      constructor DualSemilatticesSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  
  module Empty where
    record Empty : Set where
      constructor EmptyC
      field
        
  
  module FixedPoint where
    record FixedPoint : Set where
      constructor FixedPointC
      field
        A : Set
        prim : A -> A
        e : A
        fixes_prim_e : prim e == e
    record FixedPointHom
      (F1 : FixedPoint)
      (F2 : FixedPoint) : Set where
      constructor FixedPointHomC
      field
        hom : A F1 -> A F2
        pres-prim :
          (x1 : A F1) ->
          hom (prim F1 x1) ==
            prim F2 (hom x1)
        pres-e : hom (e F1) == e F2
    data FixedPointLang : Set where
      primL :
        FixedPointLang -> FixedPointLang
      eL : FixedPointLang
    record FixedPointProd
      : Set where
      constructor FixedPointProdC
      field
        AP : Set
        primP : Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        fixes_prim_eP : primP eP == eP
    record FixedPointSig : Set where
      constructor FixedPointSigSigC
      field
        AS : Set
        primS : AS -> AS
        eS : AS
  
  module Group where
    record Group : Set where
      constructor GroupC
      field
        A : Set
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        inv : A -> A
        leftInverse_inv_op_e :
          (x : A) -> op x (inv x) == e
        rightInverse_inv_op_e :
          (x : A) -> op (inv x) x == e
    record GroupHom
      (G1 : Group) (G2 : Group) :
      Set where
      constructor GroupHomC
      field
        hom : A G1 -> A G2
        pres-e : hom (e G1) == e G2
        pres-op :
          (x1 : A G1) (x2 : A G1) ->
          hom (op G1 x1 x2) ==
            op G2 (hom x1) (hom x2)
        pres-inv :
          (x1 : A G1) ->
          hom (inv G1 x1) ==
            inv G2 (hom x1)
    data GroupLang : Set where
      eL : GroupLang
      opL :
        GroupLang ->
        GroupLang -> GroupLang
      invL : GroupLang -> GroupLang
    record GroupProd : Set where
      constructor GroupProdC
      field
        AP : Set
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        invP : Prod AP AP -> Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        leftInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP xP (invP xP) == eP
        rightInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP (invP xP) xP == eP
    record GroupSig : Set where
      constructor GroupSigSigC
      field
        AS : Set
        eS : AS
        opS : AS -> AS -> AS
        invS : AS -> AS
  
  module Group1 where
    record Group1 : Set where
      constructor Group1C
      field
        A : Set
        1 : A
        op : A -> A -> A
        lunit_1 : (x : A) -> op 1 x == x
        runit_1 : (x : A) -> op x 1 == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        inv : A -> A
        leftInverse_inv_op_1 :
          (x : A) -> op x (inv x) == 1
        rightInverse_inv_op_1 :
          (x : A) -> op (inv x) x == 1
    record Group1Hom
      (G1 : Group1) (G2 : Group1) :
      Set where
      constructor Group1HomC
      field
        hom : A G1 -> A G2
        pres-1 : hom (1 G1) == 1 G2
        pres-op :
          (x1 : A G1) (x2 : A G1) ->
          hom (op G1 x1 x2) ==
            op G2 (hom x1) (hom x2)
        pres-inv :
          (x1 : A G1) ->
          hom (inv G1 x1) ==
            inv G2 (hom x1)
    data Group1Lang : Set where
      1L : Group1Lang
      opL :
        Group1Lang ->
        Group1Lang -> Group1Lang
      invL : Group1Lang -> Group1Lang
    record Group1Prod : Set where
      constructor Group1ProdC
      field
        AP : Set
        1P : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        invP : Prod AP AP -> Prod AP AP
        lunit_1P :
          (xP : Prod AP AP) ->
          opP 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          opP xP 1P == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        leftInverse_inv_op_1P :
          (xP : Prod AP AP) ->
          opP xP (invP xP) == 1P
        rightInverse_inv_op_1P :
          (xP : Prod AP AP) ->
          opP (invP xP) xP == 1P
    record Group1Sig : Set where
      constructor Group1SigSigC
      field
        AS : Set
        1S : AS
        opS : AS -> AS -> AS
        invS : AS -> AS
  
  module IdempotentAdditiveMagma where
    record IdempotentAdditiveMagma
      : Set where
      constructor IdempotentAdditiveMagmaC
      field
        A : Set
        + : A -> A -> A
        idempotent_+ :
          (x : A) -> + x x == x
    record IdempotentAdditiveMagmaHom
      (I1 : IdempotentAdditiveMagma)
      (I2 : IdempotentAdditiveMagma) :
      Set where
      constructor IdempotentAdditiveMagmaHomC
      field
        hom : A I1 -> A I2
        pres-+ :
          (x1 : A I1) (x2 : A I1) ->
          hom (+ I1 x1 x2) ==
            + I2 (hom x1) (hom x2)
    data IdempotentAdditiveMagmaLang
      : Set where
      +L :
        IdempotentAdditiveMagmaLang ->
        IdempotentAdditiveMagmaLang ->
        IdempotentAdditiveMagmaLang
    record IdempotentAdditiveMagmaProd
      : Set where
      constructor IdempotentAdditiveMagmaProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
    record IdempotentAdditiveMagmaSig
      : Set where
      constructor IdempotentAdditiveMagmaSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
  
  module IdempotentMagma where
    record IdempotentMagma
      : Set where
      constructor IdempotentMagmaC
      field
        A : Set
        op : A -> A -> A
        idempotent_op :
          (x : A) -> op x x == x
    record IdempotentMagmaHom
      (I1 : IdempotentMagma)
      (I2 : IdempotentMagma) :
      Set where
      constructor IdempotentMagmaHomC
      field
        hom : A I1 -> A I2
        pres-op :
          (x1 : A I1) (x2 : A I1) ->
          hom (op I1 x1 x2) ==
            op I2 (hom x1) (hom x2)
    data IdempotentMagmaLang
      : Set where
      opL :
        IdempotentMagmaLang ->
        IdempotentMagmaLang ->
        IdempotentMagmaLang
    record IdempotentMagmaProd
      : Set where
      constructor IdempotentMagmaProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        idempotent_opP :
          (xP : Prod AP AP) ->
          opP xP xP == xP
    record IdempotentMagmaSig
      : Set where
      constructor IdempotentMagmaSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module IdempotentMultMagma where
    record IdempotentMultMagma
      : Set where
      constructor IdempotentMultMagmaC
      field
        A : Set
        * : A -> A -> A
        idempotent_* :
          (x : A) -> * x x == x
    record IdempotentMultMagmaHom
      (I1 : IdempotentMultMagma)
      (I2 : IdempotentMultMagma) :
      Set where
      constructor IdempotentMultMagmaHomC
      field
        hom : A I1 -> A I2
        pres-* :
          (x1 : A I1) (x2 : A I1) ->
          hom (* I1 x1 x2) ==
            * I2 (hom x1) (hom x2)
    data IdempotentMultMagmaLang
      : Set where
      *L :
        IdempotentMultMagmaLang ->
        IdempotentMultMagmaLang ->
        IdempotentMultMagmaLang
    record IdempotentMultMagmaProd
      : Set where
      constructor IdempotentMultMagmaProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
    record IdempotentMultMagmaSig
      : Set where
      constructor IdempotentMultMagmaSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
  
  module IdempotentSemiRng where
    record IdempotentSemiRng
      : Set where
      constructor IdempotentSemiRngC
      field
        A : Set
        + : A -> A -> A
        * : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        idempotent_+ :
          (x : A) -> + x x == x
    record IdempotentSemiRngHom
      (I1 : IdempotentSemiRng)
      (I2 : IdempotentSemiRng) :
      Set where
      constructor IdempotentSemiRngHomC
      field
        hom : A I1 -> A I2
        pres-+ :
          (x1 : A I1) (x2 : A I1) ->
          hom (+ I1 x1 x2) ==
            + I2 (hom x1) (hom x2)
        pres-* :
          (x1 : A I1) (x2 : A I1) ->
          hom (* I1 x1 x2) ==
            * I2 (hom x1) (hom x2)
        pres-0 : hom (0 I1) == 0 I2
    data IdempotentSemiRngLang
      : Set where
      +L :
        IdempotentSemiRngLang ->
        IdempotentSemiRngLang ->
        IdempotentSemiRngLang
      *L :
        IdempotentSemiRngLang ->
        IdempotentSemiRngLang ->
        IdempotentSemiRngLang
      0L : IdempotentSemiRngLang
    record IdempotentSemiRngProd
      : Set where
      constructor IdempotentSemiRngProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
    record IdempotentSemiRngSig
      : Set where
      constructor IdempotentSemiRngSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
        *S : AS -> AS -> AS
        0S : AS
  
  module IdempotentSemiring where
    record IdempotentSemiring
      : Set where
      constructor IdempotentSemiringC
      field
        A : Set
        + : A -> A -> A
        0 : A
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
        idempotent_+ :
          (x : A) -> + x x == x
    record IdempotentSemiringHom
      (I1 : IdempotentSemiring)
      (I2 : IdempotentSemiring) :
      Set where
      constructor IdempotentSemiringHomC
      field
        hom : A I1 -> A I2
        pres-+ :
          (x1 : A I1) (x2 : A I1) ->
          hom (+ I1 x1 x2) ==
            + I2 (hom x1) (hom x2)
        pres-0 : hom (0 I1) == 0 I2
        pres-* :
          (x1 : A I1) (x2 : A I1) ->
          hom (* I1 x1 x2) ==
            * I2 (hom x1) (hom x2)
        pres-1 : hom (1 I1) == 1 I2
    data IdempotentSemiringLang
      : Set where
      +L :
        IdempotentSemiringLang ->
        IdempotentSemiringLang ->
        IdempotentSemiringLang
      0L : IdempotentSemiringLang
      *L :
        IdempotentSemiringLang ->
        IdempotentSemiringLang ->
        IdempotentSemiringLang
      1L : IdempotentSemiringLang
    record IdempotentSemiringProd
      : Set where
      constructor IdempotentSemiringProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        leftZero_op_0P :
          (xP : Prod AP AP) ->
          *P 0P xP == 0P
        rightZero_op_0P :
          (xP : Prod AP AP) ->
          *P xP 0P == 0P
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
    record IdempotentSemiringSig
      : Set where
      constructor IdempotentSemiringSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
        0S : AS
        *S : AS -> AS -> AS
        1S : AS
  
  module IdempotentUnary where
    record IdempotentUnary
      : Set where
      constructor IdempotentUnaryC
      field
        A : Set
        prim : A -> A
        idempotent_prim :
          (x : A) ->
          prim (prim x) == prim x
    record IdempotentUnaryHom
      (I1 : IdempotentUnary)
      (I2 : IdempotentUnary) :
      Set where
      constructor IdempotentUnaryHomC
      field
        hom : A I1 -> A I2
        pres-prim :
          (x1 : A I1) ->
          hom (prim I1 x1) ==
            prim I2 (hom x1)
    data IdempotentUnaryLang
      : Set where
      primL :
        IdempotentUnaryLang ->
        IdempotentUnaryLang
    record IdempotentUnaryProd
      : Set where
      constructor IdempotentUnaryProdC
      field
        AP : Set
        primP : Prod AP AP -> Prod AP AP
        idempotent_primP :
          (xP : Prod AP AP) ->
          primP (primP xP) == primP xP
    record IdempotentUnarySig
      : Set where
      constructor IdempotentUnarySigSigC
      field
        AS : Set
        primS : AS -> AS
  
  module Inverse where
    record Inverse : Set where
      constructor InverseC
      field
        A : Set
        inv : A -> A
        e : A
        op : A -> A -> A
        leftInverse_inv_op_e :
          (x : A) -> op x (inv x) == e
        rightInverse_inv_op_e :
          (x : A) -> op (inv x) x == e
    record InverseHom
      (I1 : Inverse) (I2 : Inverse) :
      Set where
      constructor InverseHomC
      field
        hom : A I1 -> A I2
        pres-inv :
          (x1 : A I1) ->
          hom (inv I1 x1) ==
            inv I2 (hom x1)
        pres-e : hom (e I1) == e I2
        pres-op :
          (x1 : A I1) (x2 : A I1) ->
          hom (op I1 x1 x2) ==
            op I2 (hom x1) (hom x2)
    data InverseLang : Set where
      invL :
        InverseLang -> InverseLang
      eL : InverseLang
      opL :
        InverseLang ->
        InverseLang -> InverseLang
    record InverseProd : Set where
      constructor InverseProdC
      field
        AP : Set
        invP : Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP xP (invP xP) == eP
        rightInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP (invP xP) xP == eP
    record InverseSig : Set where
      constructor InverseSigSigC
      field
        AS : Set
        invS : AS -> AS
        eS : AS
        opS : AS -> AS -> AS
  
  module InverseSig where
    record InverseSig : Set where
      constructor InverseSigC
      field
        A : Set
        inv : A -> A
        e : A
        op : A -> A -> A
    record InverseSigHom
      (I1 : InverseSig)
      (I2 : InverseSig) : Set where
      constructor InverseSigHomC
      field
        hom : A I1 -> A I2
        pres-inv :
          (x1 : A I1) ->
          hom (inv I1 x1) ==
            inv I2 (hom x1)
        pres-e : hom (e I1) == e I2
        pres-op :
          (x1 : A I1) (x2 : A I1) ->
          hom (op I1 x1 x2) ==
            op I2 (hom x1) (hom x2)
    data InverseSigLang : Set where
      invL :
        InverseSigLang -> InverseSigLang
      eL : InverseSigLang
      opL :
        InverseSigLang ->
        InverseSigLang -> InverseSigLang
    record InverseSigProd
      : Set where
      constructor InverseSigProdC
      field
        AP : Set
        invP : Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record InverseSigSig : Set where
      constructor InverseSigSigSigC
      field
        AS : Set
        invS : AS -> AS
        eS : AS
        opS : AS -> AS -> AS
  
  module InverseUnaryOperation where
    record InverseUnaryOperation
      : Set where
      constructor InverseUnaryOperationC
      field
        A : Set
        inv : A -> A
    record InverseUnaryOperationHom
      (I1 : InverseUnaryOperation)
      (I2 : InverseUnaryOperation) :
      Set where
      constructor InverseUnaryOperationHomC
      field
        hom : A I1 -> A I2
        pres-inv :
          (x1 : A I1) ->
          hom (inv I1 x1) ==
            inv I2 (hom x1)
    data InverseUnaryOperationLang
      : Set where
      invL :
        InverseUnaryOperationLang ->
        InverseUnaryOperationLang
    record InverseUnaryOperationProd
      : Set where
      constructor InverseUnaryOperationProdC
      field
        AP : Set
        invP : Prod AP AP -> Prod AP AP
    record InverseUnaryOperationSig
      : Set where
      constructor InverseUnaryOperationSigSigC
      field
        AS : Set
        invS : AS -> AS
  
  module Involution where
    record Involution : Set where
      constructor InvolutionC
      field
        A : Set
        prim : A -> A
        involutive_prim :
          (x : A) -> prim (prim x) == x
    record InvolutionHom
      (I1 : Involution)
      (I2 : Involution) : Set where
      constructor InvolutionHomC
      field
        hom : A I1 -> A I2
        pres-prim :
          (x1 : A I1) ->
          hom (prim I1 x1) ==
            prim I2 (hom x1)
    data InvolutionLang : Set where
      primL :
        InvolutionLang -> InvolutionLang
    record InvolutionProd
      : Set where
      constructor InvolutionProdC
      field
        AP : Set
        primP : Prod AP AP -> Prod AP AP
        involutive_primP :
          (xP : Prod AP AP) ->
          primP (primP xP) == xP
    record InvolutionSig : Set where
      constructor InvolutionSigSigC
      field
        AS : Set
        primS : AS -> AS
  
  module InvolutiveAddMagmaSig where
    record InvolutiveAddMagmaSig
      : Set where
      constructor InvolutiveAddMagmaSigC
      field
        A : Set
        + : A -> A -> A
        prim : A -> A
    record InvolutiveAddMagmaSigHom
      (I1 : InvolutiveAddMagmaSig)
      (I2 : InvolutiveAddMagmaSig) :
      Set where
      constructor InvolutiveAddMagmaSigHomC
      field
        hom : A I1 -> A I2
        pres-+ :
          (x1 : A I1) (x2 : A I1) ->
          hom (+ I1 x1 x2) ==
            + I2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A I1) ->
          hom (prim I1 x1) ==
            prim I2 (hom x1)
    data InvolutiveAddMagmaSigLang
      : Set where
      +L :
        InvolutiveAddMagmaSigLang ->
        InvolutiveAddMagmaSigLang ->
        InvolutiveAddMagmaSigLang
      primL :
        InvolutiveAddMagmaSigLang ->
        InvolutiveAddMagmaSigLang
    record InvolutiveAddMagmaSigProd
      : Set where
      constructor InvolutiveAddMagmaSigProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
    record InvolutiveAddMagmaSigSig
      : Set where
      constructor InvolutiveAddMagmaSigSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
        primS : AS -> AS
  
  module InvolutiveFixedPoint where
    record InvolutiveFixedPoint
      : Set where
      constructor InvolutiveFixedPointC
      field
        A : Set
        prim : A -> A
        1 : A
        fixes_prim_1 : prim 1 == 1
        involutive_prim :
          (x : A) -> prim (prim x) == x
    record InvolutiveFixedPointHom
      (I1 : InvolutiveFixedPoint)
      (I2 : InvolutiveFixedPoint) :
      Set where
      constructor InvolutiveFixedPointHomC
      field
        hom : A I1 -> A I2
        pres-prim :
          (x1 : A I1) ->
          hom (prim I1 x1) ==
            prim I2 (hom x1)
        pres-1 : hom (1 I1) == 1 I2
    data InvolutiveFixedPointLang
      : Set where
      primL :
        InvolutiveFixedPointLang ->
        InvolutiveFixedPointLang
      1L : InvolutiveFixedPointLang
    record InvolutiveFixedPointProd
      : Set where
      constructor InvolutiveFixedPointProdC
      field
        AP : Set
        primP : Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        fixes_prim_1P : primP 1P == 1P
        involutive_primP :
          (xP : Prod AP AP) ->
          primP (primP xP) == xP
    record InvolutiveFixedPointSig
      : Set where
      constructor InvolutiveFixedPointSigSigC
      field
        AS : Set
        primS : AS -> AS
        1S : AS
  
  module InvolutiveFixes where
    record InvolutiveFixes
      : Set where
      constructor InvolutiveFixesC
      field
        A : Set
        1 : A
        prim : A -> A
        fixes_prim_1 : prim 1 == 1
    record InvolutiveFixesHom
      (I1 : InvolutiveFixes)
      (I2 : InvolutiveFixes) :
      Set where
      constructor InvolutiveFixesHomC
      field
        hom : A I1 -> A I2
        pres-1 : hom (1 I1) == 1 I2
        pres-prim :
          (x1 : A I1) ->
          hom (prim I1 x1) ==
            prim I2 (hom x1)
    data InvolutiveFixesLang
      : Set where
      1L : InvolutiveFixesLang
      primL :
        InvolutiveFixesLang ->
        InvolutiveFixesLang
    record InvolutiveFixesProd
      : Set where
      constructor InvolutiveFixesProdC
      field
        AP : Set
        1P : Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        fixes_prim_1P : primP 1P == 1P
    record InvolutiveFixesSig
      : Set where
      constructor InvolutiveFixesSigSigC
      field
        AS : Set
        1S : AS
        primS : AS -> AS
  
  module InvolutiveMagma where
    record InvolutiveMagma
      : Set where
      constructor InvolutiveMagmaC
      field
        A : Set
        prim : A -> A
        involutive_prim :
          (x : A) -> prim (prim x) == x
        op : A -> A -> A
        antidis_prim_op :
          (x : A) (y : A) ->
          prim (op x y) ==
            op (prim y) (prim x)
    record InvolutiveMagmaHom
      (I1 : InvolutiveMagma)
      (I2 : InvolutiveMagma) :
      Set where
      constructor InvolutiveMagmaHomC
      field
        hom : A I1 -> A I2
        pres-prim :
          (x1 : A I1) ->
          hom (prim I1 x1) ==
            prim I2 (hom x1)
        pres-op :
          (x1 : A I1) (x2 : A I1) ->
          hom (op I1 x1 x2) ==
            op I2 (hom x1) (hom x2)
    data InvolutiveMagmaLang
      : Set where
      primL :
        InvolutiveMagmaLang ->
        InvolutiveMagmaLang
      opL :
        InvolutiveMagmaLang ->
        InvolutiveMagmaLang ->
        InvolutiveMagmaLang
    record InvolutiveMagmaProd
      : Set where
      constructor InvolutiveMagmaProdC
      field
        AP : Set
        primP : Prod AP AP -> Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        involutive_primP :
          (xP : Prod AP AP) ->
          primP (primP xP) == xP
        antidis_prim_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (opP xP yP) ==
            opP (primP yP) (primP xP)
    record InvolutiveMagmaSig
      : Set where
      constructor InvolutiveMagmaSigSigC
      field
        AS : Set
        primS : AS -> AS
        opS : AS -> AS -> AS
  
  module InvolutiveMagmaSig where
    record InvolutiveMagmaSig
      : Set where
      constructor InvolutiveMagmaSigC
      field
        A : Set
        prim : A -> A
        op : A -> A -> A
    record InvolutiveMagmaSigHom
      (I1 : InvolutiveMagmaSig)
      (I2 : InvolutiveMagmaSig) :
      Set where
      constructor InvolutiveMagmaSigHomC
      field
        hom : A I1 -> A I2
        pres-prim :
          (x1 : A I1) ->
          hom (prim I1 x1) ==
            prim I2 (hom x1)
        pres-op :
          (x1 : A I1) (x2 : A I1) ->
          hom (op I1 x1 x2) ==
            op I2 (hom x1) (hom x2)
    data InvolutiveMagmaSigLang
      : Set where
      primL :
        InvolutiveMagmaSigLang ->
        InvolutiveMagmaSigLang
      opL :
        InvolutiveMagmaSigLang ->
        InvolutiveMagmaSigLang ->
        InvolutiveMagmaSigLang
    record InvolutiveMagmaSigProd
      : Set where
      constructor InvolutiveMagmaSigProdC
      field
        AP : Set
        primP : Prod AP AP -> Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record InvolutiveMagmaSigSig
      : Set where
      constructor InvolutiveMagmaSigSigSigC
      field
        AS : Set
        primS : AS -> AS
        opS : AS -> AS -> AS
  
  module InvolutiveMultMagmaSig where
    record InvolutiveMultMagmaSig
      : Set where
      constructor InvolutiveMultMagmaSigC
      field
        A : Set
        * : A -> A -> A
        prim : A -> A
    record InvolutiveMultMagmaSigHom
      (I1 : InvolutiveMultMagmaSig)
      (I2 : InvolutiveMultMagmaSig) :
      Set where
      constructor InvolutiveMultMagmaSigHomC
      field
        hom : A I1 -> A I2
        pres-* :
          (x1 : A I1) (x2 : A I1) ->
          hom (* I1 x1 x2) ==
            * I2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A I1) ->
          hom (prim I1 x1) ==
            prim I2 (hom x1)
    data InvolutiveMultMagmaSigLang
      : Set where
      *L :
        InvolutiveMultMagmaSigLang ->
        InvolutiveMultMagmaSigLang ->
        InvolutiveMultMagmaSigLang
      primL :
        InvolutiveMultMagmaSigLang ->
        InvolutiveMultMagmaSigLang
    record InvolutiveMultMagmaSigProd
      : Set where
      constructor InvolutiveMultMagmaSigProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
    record InvolutiveMultMagmaSigSig
      : Set where
      constructor InvolutiveMultMagmaSigSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        primS : AS -> AS
  
  module InvolutivePointedMagmaSig where
    record InvolutivePointedMagmaSig
      : Set where
      constructor InvolutivePointedMagmaSigC
      field
        A : Set
        prim : A -> A
        e : A
        op : A -> A -> A
    record InvolutivePointedMagmaSigHom
      (I1 : InvolutivePointedMagmaSig)
      (I2 : InvolutivePointedMagmaSig) :
      Set where
      constructor InvolutivePointedMagmaSigHomC
      field
        hom : A I1 -> A I2
        pres-prim :
          (x1 : A I1) ->
          hom (prim I1 x1) ==
            prim I2 (hom x1)
        pres-e : hom (e I1) == e I2
        pres-op :
          (x1 : A I1) (x2 : A I1) ->
          hom (op I1 x1 x2) ==
            op I2 (hom x1) (hom x2)
    data InvolutivePointedMagmaSigLang
      : Set where
      primL :
        InvolutivePointedMagmaSigLang ->
        InvolutivePointedMagmaSigLang
      eL :
        InvolutivePointedMagmaSigLang
      opL :
        InvolutivePointedMagmaSigLang ->
        InvolutivePointedMagmaSigLang ->
        InvolutivePointedMagmaSigLang
    record InvolutivePointedMagmaSigProd
      : Set where
      constructor InvolutivePointedMagmaSigProdC
      field
        AP : Set
        primP : Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record InvolutivePointedMagmaSigSig
      : Set where
      constructor InvolutivePointedMagmaSigSigSigC
      field
        AS : Set
        primS : AS -> AS
        eS : AS
        opS : AS -> AS -> AS
  
  module InvolutivePointedSemigroup where
    record InvolutivePointedSemigroup
      : Set where
      constructor InvolutivePointedSemigroupC
      field
        A : Set
        op : A -> A -> A
        e : A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        prim : A -> A
        involutive_prim :
          (x : A) -> prim (prim x) == x
        antidis_prim_op :
          (x : A) (y : A) ->
          prim (op x y) ==
            op (prim y) (prim x)
    record InvolutivePointedSemigroupHom
      (I1 : InvolutivePointedSemigroup)
      (I2 : InvolutivePointedSemigroup) :
      Set where
      constructor InvolutivePointedSemigroupHomC
      field
        hom : A I1 -> A I2
        pres-op :
          (x1 : A I1) (x2 : A I1) ->
          hom (op I1 x1 x2) ==
            op I2 (hom x1) (hom x2)
        pres-e : hom (e I1) == e I2
        pres-prim :
          (x1 : A I1) ->
          hom (prim I1 x1) ==
            prim I2 (hom x1)
    data InvolutivePointedSemigroupLang
      : Set where
      opL :
        InvolutivePointedSemigroupLang ->
        InvolutivePointedSemigroupLang ->
        InvolutivePointedSemigroupLang
      eL :
        InvolutivePointedSemigroupLang
      primL :
        InvolutivePointedSemigroupLang ->
        InvolutivePointedSemigroupLang
    record InvolutivePointedSemigroupProd
      : Set where
      constructor InvolutivePointedSemigroupProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        involutive_primP :
          (xP : Prod AP AP) ->
          primP (primP xP) == xP
        antidis_prim_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (opP xP yP) ==
            opP (primP yP) (primP xP)
    record InvolutivePointedSemigroupSig
      : Set where
      constructor InvolutivePointedSemigroupSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        eS : AS
        primS : AS -> AS
  
  module InvolutiveRing where
    record InvolutiveRing
      : Set where
      constructor InvolutiveRingC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        1 : A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        prim : A -> A
        fixes_prim_1 : prim 1 == 1
        involutive_prim :
          (x : A) -> prim (prim x) == x
        antidis_prim_+ :
          (x : A) (y : A) ->
          prim (+ x y) ==
            + (prim y) (prim x)
        antidis_prim_* :
          (x : A) (y : A) ->
          prim (* x y) ==
            * (prim y) (prim x)
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
    record InvolutiveRingHom
      (I1 : InvolutiveRing)
      (I2 : InvolutiveRing) :
      Set where
      constructor InvolutiveRingHomC
      field
        hom : A I1 -> A I2
        pres-* :
          (x1 : A I1) (x2 : A I1) ->
          hom (* I1 x1 x2) ==
            * I2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A I1) (x2 : A I1) ->
          hom (+ I1 x1 x2) ==
            + I2 (hom x1) (hom x2)
        pres-1 : hom (1 I1) == 1 I2
        pres-prim :
          (x1 : A I1) ->
          hom (prim I1 x1) ==
            prim I2 (hom x1)
        pres-0 : hom (0 I1) == 0 I2
        pres-neg :
          (x1 : A I1) ->
          hom (neg I1 x1) ==
            neg I2 (hom x1)
    data InvolutiveRingLang
      : Set where
      *L :
        InvolutiveRingLang ->
        InvolutiveRingLang ->
        InvolutiveRingLang
      +L :
        InvolutiveRingLang ->
        InvolutiveRingLang ->
        InvolutiveRingLang
      1L : InvolutiveRingLang
      primL :
        InvolutiveRingLang ->
        InvolutiveRingLang
      0L : InvolutiveRingLang
      negL :
        InvolutiveRingLang ->
        InvolutiveRingLang
    record InvolutiveRingProd
      : Set where
      constructor InvolutiveRingProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        negP : Prod AP AP -> Prod AP AP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        fixes_prim_1P : primP 1P == 1P
        involutive_primP :
          (xP : Prod AP AP) ->
          primP (primP xP) == xP
        antidis_prim_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (+P xP yP) ==
            +P (primP yP) (primP xP)
        antidis_prim_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (*P xP yP) ==
            *P (primP yP) (primP xP)
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P xP (negP xP) == 0P
        rightInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P (negP xP) xP == 0P
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        leftZero_op_0P :
          (xP : Prod AP AP) ->
          *P 0P xP == 0P
        rightZero_op_0P :
          (xP : Prod AP AP) ->
          *P xP 0P == 0P
    record InvolutiveRingSig
      : Set where
      constructor InvolutiveRingSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        1S : AS
        primS : AS -> AS
        0S : AS
        negS : AS -> AS
  
  module InvolutiveRingoid where
    record InvolutiveRingoid
      : Set where
      constructor InvolutiveRingoidC
      field
        A : Set
        prim : A -> A
        1 : A
        fixes_prim_1 : prim 1 == 1
        involutive_prim :
          (x : A) -> prim (prim x) == x
        * : A -> A -> A
        + : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        antidis_prim_+ :
          (x : A) (y : A) ->
          prim (+ x y) ==
            + (prim y) (prim x)
        antidis_prim_* :
          (x : A) (y : A) ->
          prim (* x y) ==
            * (prim y) (prim x)
    record InvolutiveRingoidHom
      (I1 : InvolutiveRingoid)
      (I2 : InvolutiveRingoid) :
      Set where
      constructor InvolutiveRingoidHomC
      field
        hom : A I1 -> A I2
        pres-prim :
          (x1 : A I1) ->
          hom (prim I1 x1) ==
            prim I2 (hom x1)
        pres-1 : hom (1 I1) == 1 I2
        pres-* :
          (x1 : A I1) (x2 : A I1) ->
          hom (* I1 x1 x2) ==
            * I2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A I1) (x2 : A I1) ->
          hom (+ I1 x1 x2) ==
            + I2 (hom x1) (hom x2)
    data InvolutiveRingoidLang
      : Set where
      primL :
        InvolutiveRingoidLang ->
        InvolutiveRingoidLang
      1L : InvolutiveRingoidLang
      *L :
        InvolutiveRingoidLang ->
        InvolutiveRingoidLang ->
        InvolutiveRingoidLang
      +L :
        InvolutiveRingoidLang ->
        InvolutiveRingoidLang ->
        InvolutiveRingoidLang
    record InvolutiveRingoidProd
      : Set where
      constructor InvolutiveRingoidProdC
      field
        AP : Set
        primP : Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        fixes_prim_1P : primP 1P == 1P
        involutive_primP :
          (xP : Prod AP AP) ->
          primP (primP xP) == xP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        antidis_prim_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (+P xP yP) ==
            +P (primP yP) (primP xP)
        antidis_prim_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (*P xP yP) ==
            *P (primP yP) (primP xP)
    record InvolutiveRingoidSig
      : Set where
      constructor InvolutiveRingoidSigSigC
      field
        AS : Set
        primS : AS -> AS
        1S : AS
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  
  module InvolutiveRingoidSig where
    record InvolutiveRingoidSig
      : Set where
      constructor InvolutiveRingoidSigC
      field
        A : Set
        prim : A -> A
        * : A -> A -> A
        + : A -> A -> A
    record InvolutiveRingoidSigHom
      (I1 : InvolutiveRingoidSig)
      (I2 : InvolutiveRingoidSig) :
      Set where
      constructor InvolutiveRingoidSigHomC
      field
        hom : A I1 -> A I2
        pres-prim :
          (x1 : A I1) ->
          hom (prim I1 x1) ==
            prim I2 (hom x1)
        pres-* :
          (x1 : A I1) (x2 : A I1) ->
          hom (* I1 x1 x2) ==
            * I2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A I1) (x2 : A I1) ->
          hom (+ I1 x1 x2) ==
            + I2 (hom x1) (hom x2)
    data InvolutiveRingoidSigLang
      : Set where
      primL :
        InvolutiveRingoidSigLang ->
        InvolutiveRingoidSigLang
      *L :
        InvolutiveRingoidSigLang ->
        InvolutiveRingoidSigLang ->
        InvolutiveRingoidSigLang
      +L :
        InvolutiveRingoidSigLang ->
        InvolutiveRingoidSigLang ->
        InvolutiveRingoidSigLang
    record InvolutiveRingoidSigProd
      : Set where
      constructor InvolutiveRingoidSigProdC
      field
        AP : Set
        primP : Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record InvolutiveRingoidSigSig
      : Set where
      constructor InvolutiveRingoidSigSigSigC
      field
        AS : Set
        primS : AS -> AS
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  
  module InvolutiveRingoidWithAntiDistrib where
    record InvolutiveRingoidWithAntiDistrib
      : Set where
      constructor InvolutiveRingoidWithAntiDistribC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        prim : A -> A
        antidis_prim_+ :
          (x : A) (y : A) ->
          prim (+ x y) ==
            + (prim y) (prim x)
        antidis_prim_* :
          (x : A) (y : A) ->
          prim (* x y) ==
            * (prim y) (prim x)
    record InvolutiveRingoidWithAntiDistribHom
      (I1 : InvolutiveRingoidWithAntiDistrib)
      (I2 : InvolutiveRingoidWithAntiDistrib) :
      Set where
      constructor InvolutiveRingoidWithAntiDistribHomC
      field
        hom : A I1 -> A I2
        pres-* :
          (x1 : A I1) (x2 : A I1) ->
          hom (* I1 x1 x2) ==
            * I2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A I1) (x2 : A I1) ->
          hom (+ I1 x1 x2) ==
            + I2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A I1) ->
          hom (prim I1 x1) ==
            prim I2 (hom x1)
    data InvolutiveRingoidWithAntiDistribLang
      : Set where
      *L :
        InvolutiveRingoidWithAntiDistribLang ->
        InvolutiveRingoidWithAntiDistribLang ->
        InvolutiveRingoidWithAntiDistribLang
      +L :
        InvolutiveRingoidWithAntiDistribLang ->
        InvolutiveRingoidWithAntiDistribLang ->
        InvolutiveRingoidWithAntiDistribLang
      primL :
        InvolutiveRingoidWithAntiDistribLang ->
        InvolutiveRingoidWithAntiDistribLang
    record InvolutiveRingoidWithAntiDistribProd
      : Set where
      constructor InvolutiveRingoidWithAntiDistribProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        antidis_prim_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (+P xP yP) ==
            +P (primP yP) (primP xP)
        antidis_prim_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (*P xP yP) ==
            *P (primP yP) (primP xP)
    record InvolutiveRingoidWithAntiDistribSig
      : Set where
      constructor InvolutiveRingoidWithAntiDistribSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        primS : AS -> AS
  
  module InvolutiveSemigroup where
    record InvolutiveSemigroup
      : Set where
      constructor InvolutiveSemigroupC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        prim : A -> A
        involutive_prim :
          (x : A) -> prim (prim x) == x
        antidis_prim_op :
          (x : A) (y : A) ->
          prim (op x y) ==
            op (prim y) (prim x)
    record InvolutiveSemigroupHom
      (I1 : InvolutiveSemigroup)
      (I2 : InvolutiveSemigroup) :
      Set where
      constructor InvolutiveSemigroupHomC
      field
        hom : A I1 -> A I2
        pres-op :
          (x1 : A I1) (x2 : A I1) ->
          hom (op I1 x1 x2) ==
            op I2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A I1) ->
          hom (prim I1 x1) ==
            prim I2 (hom x1)
    data InvolutiveSemigroupLang
      : Set where
      opL :
        InvolutiveSemigroupLang ->
        InvolutiveSemigroupLang ->
        InvolutiveSemigroupLang
      primL :
        InvolutiveSemigroupLang ->
        InvolutiveSemigroupLang
    record InvolutiveSemigroupProd
      : Set where
      constructor InvolutiveSemigroupProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        involutive_primP :
          (xP : Prod AP AP) ->
          primP (primP xP) == xP
        antidis_prim_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (opP xP yP) ==
            opP (primP yP) (primP xP)
    record InvolutiveSemigroupSig
      : Set where
      constructor InvolutiveSemigroupSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        primS : AS -> AS
  
  module JacobianIdentity where
    record JacobianIdentity
      : Set where
      constructor JacobianIdentityC
      field
        A : Set
        0 : A
        + : A -> A -> A
        * : A -> A -> A
        jacobian_*_+ :
          (x : A) (y : A) (z : A) ->
          +
            (+ (* x (* y z)) (* y (* z x)))
            (* z (* x y)) == 0
    record JacobianIdentityHom
      (J1 : JacobianIdentity)
      (J2 : JacobianIdentity) :
      Set where
      constructor JacobianIdentityHomC
      field
        hom : A J1 -> A J2
        pres-0 : hom (0 J1) == 0 J2
        pres-+ :
          (x1 : A J1) (x2 : A J1) ->
          hom (+ J1 x1 x2) ==
            + J2 (hom x1) (hom x2)
        pres-* :
          (x1 : A J1) (x2 : A J1) ->
          hom (* J1 x1 x2) ==
            * J2 (hom x1) (hom x2)
    data JacobianIdentityLang
      : Set where
      0L : JacobianIdentityLang
      +L :
        JacobianIdentityLang ->
        JacobianIdentityLang ->
        JacobianIdentityLang
      *L :
        JacobianIdentityLang ->
        JacobianIdentityLang ->
        JacobianIdentityLang
    record JacobianIdentityProd
      : Set where
      constructor JacobianIdentityProdC
      field
        AP : Set
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        jacobian_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P
            (+P (*P xP (*P yP zP))
               (*P yP (*P zP xP)))
            (*P zP (*P xP yP)) == 0P
    record JacobianIdentitySig
      : Set where
      constructor JacobianIdentitySigSigC
      field
        AS : Set
        0S : AS
        +S : AS -> AS -> AS
        *S : AS -> AS -> AS
  
  module JoinSemilattice where
    record JoinSemilattice
      : Set where
      constructor JoinSemilatticeC
      field
        A : Set
        + : A -> A -> A
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        idempotent_+ :
          (x : A) -> + x x == x
    record JoinSemilatticeHom
      (J1 : JoinSemilattice)
      (J2 : JoinSemilattice) :
      Set where
      constructor JoinSemilatticeHomC
      field
        hom : A J1 -> A J2
        pres-+ :
          (x1 : A J1) (x2 : A J1) ->
          hom (+ J1 x1 x2) ==
            + J2 (hom x1) (hom x2)
    data JoinSemilatticeLang
      : Set where
      +L :
        JoinSemilatticeLang ->
        JoinSemilatticeLang ->
        JoinSemilatticeLang
    record JoinSemilatticeProd
      : Set where
      constructor JoinSemilatticeProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
    record JoinSemilatticeSig
      : Set where
      constructor JoinSemilatticeSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
  
  module JoinSemilattice_RingoidSig where
    record JoinSemilattice_RingoidSig
      : Set where
      constructor JoinSemilattice_RingoidSigC
      field
        A : Set
        + : A -> A -> A
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        idempotent_+ :
          (x : A) -> + x x == x
        * : A -> A -> A
    record JoinSemilattice_RingoidSigHom
      (J1 : JoinSemilattice_RingoidSig)
      (J2 : JoinSemilattice_RingoidSig) :
      Set where
      constructor JoinSemilattice_RingoidSigHomC
      field
        hom : A J1 -> A J2
        pres-+ :
          (x1 : A J1) (x2 : A J1) ->
          hom (+ J1 x1 x2) ==
            + J2 (hom x1) (hom x2)
        pres-* :
          (x1 : A J1) (x2 : A J1) ->
          hom (* J1 x1 x2) ==
            * J2 (hom x1) (hom x2)
    data JoinSemilattice_RingoidSigLang
      : Set where
      +L :
        JoinSemilattice_RingoidSigLang ->
        JoinSemilattice_RingoidSigLang ->
        JoinSemilattice_RingoidSigLang
      *L :
        JoinSemilattice_RingoidSigLang ->
        JoinSemilattice_RingoidSigLang ->
        JoinSemilattice_RingoidSigLang
    record JoinSemilattice_RingoidSigProd
      : Set where
      constructor JoinSemilattice_RingoidSigProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
    record JoinSemilattice_RingoidSigSig
      : Set where
      constructor JoinSemilattice_RingoidSigSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
        *S : AS -> AS -> AS
  
  module Kei where
    record Kei : Set where
      constructor KeiC
      field
        A : Set
        |> : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        idempotent_|> :
          (x : A) -> |> x x == x
        rightSelfInverse_|> :
          (x : A) (y : A) ->
          |> (|> x y) y == x
    record KeiHom
      (K1 : Kei) (K2 : Kei) :
      Set where
      constructor KeiHomC
      field
        hom : A K1 -> A K2
        pres-|> :
          (x1 : A K1) (x2 : A K1) ->
          hom (|> K1 x1 x2) ==
            |> K2 (hom x1) (hom x2)
    data KeiLang : Set where
      |>L :
        KeiLang -> KeiLang -> KeiLang
    record KeiProd : Set where
      constructor KeiProdC
      field
        AP : Set
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          |>P xP (|>P yP zP) ==
            |>P (|>P xP yP) (|>P xP zP)
        idempotent_|>P :
          (xP : Prod AP AP) ->
          |>P xP xP == xP
        rightSelfInverse_|>P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          |>P (|>P xP yP) yP == xP
    record KeiSig : Set where
      constructor KeiSigSigC
      field
        AS : Set
        |>S : AS -> AS -> AS
  
  module Lattice where
    record Lattice : Set where
      constructor LatticeC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        idempotent_* :
          (x : A) -> * x x == x
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        idempotent_+ :
          (x : A) -> + x x == x
        leftAbsorp_*_+ :
          (x : A) (y : A) ->
          * x (+ x y) == x
        leftAbsorp_+_* :
          (x : A) (y : A) ->
          + x (* x y) == x
    record LatticeHom
      (L1 : Lattice) (L2 : Lattice) :
      Set where
      constructor LatticeHomC
      field
        hom : A L1 -> A L2
        pres-* :
          (x1 : A L1) (x2 : A L1) ->
          hom (* L1 x1 x2) ==
            * L2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A L1) (x2 : A L1) ->
          hom (+ L1 x1 x2) ==
            + L2 (hom x1) (hom x2)
    data LatticeLang : Set where
      *L :
        LatticeLang ->
        LatticeLang -> LatticeLang
      +L :
        LatticeLang ->
        LatticeLang -> LatticeLang
    record LatticeProd : Set where
      constructor LatticeProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
        leftAbsorp_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP (+P xP yP) == xP
        leftAbsorp_+_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP (*P xP yP) == xP
    record LatticeSig : Set where
      constructor LatticeSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  
  module Left0 where
    record Left0 : Set where
      constructor Left0C
      field
        A : Set
        0 : A
        op : A -> A -> A
        leftZero_op_0 :
          (x : A) -> op 0 x == 0
    record Left0Hom
      (L1 : Left0) (L2 : Left0) :
      Set where
      constructor Left0HomC
      field
        hom : A L1 -> A L2
        pres-0 : hom (0 L1) == 0 L2
        pres-op :
          (x1 : A L1) (x2 : A L1) ->
          hom (op L1 x1 x2) ==
            op L2 (hom x1) (hom x2)
    data Left0Lang : Set where
      0L : Left0Lang
      opL :
        Left0Lang ->
        Left0Lang -> Left0Lang
    record Left0Prod : Set where
      constructor Left0ProdC
      field
        AP : Set
        0P : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftZero_op_0P :
          (xP : Prod AP AP) ->
          opP 0P xP == 0P
    record Left0Sig : Set where
      constructor Left0SigSigC
      field
        AS : Set
        0S : AS
        opS : AS -> AS -> AS
  
  module LeftAbsorption where
    record LeftAbsorption
      : Set where
      constructor LeftAbsorptionC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        leftAbsorp_*_+ :
          (x : A) (y : A) ->
          * x (+ x y) == x
    record LeftAbsorptionHom
      (L1 : LeftAbsorption)
      (L2 : LeftAbsorption) :
      Set where
      constructor LeftAbsorptionHomC
      field
        hom : A L1 -> A L2
        pres-* :
          (x1 : A L1) (x2 : A L1) ->
          hom (* L1 x1 x2) ==
            * L2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A L1) (x2 : A L1) ->
          hom (+ L1 x1 x2) ==
            + L2 (hom x1) (hom x2)
    data LeftAbsorptionLang
      : Set where
      *L :
        LeftAbsorptionLang ->
        LeftAbsorptionLang ->
        LeftAbsorptionLang
      +L :
        LeftAbsorptionLang ->
        LeftAbsorptionLang ->
        LeftAbsorptionLang
    record LeftAbsorptionProd
      : Set where
      constructor LeftAbsorptionProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftAbsorp_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP (+P xP yP) == xP
    record LeftAbsorptionSig
      : Set where
      constructor LeftAbsorptionSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  
  module LeftAbsorptionOp where
    record LeftAbsorptionOp
      : Set where
      constructor LeftAbsorptionOpC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        leftAbsorp_+_* :
          (x : A) (y : A) ->
          + x (* x y) == x
    record LeftAbsorptionOpHom
      (L1 : LeftAbsorptionOp)
      (L2 : LeftAbsorptionOp) :
      Set where
      constructor LeftAbsorptionOpHomC
      field
        hom : A L1 -> A L2
        pres-* :
          (x1 : A L1) (x2 : A L1) ->
          hom (* L1 x1 x2) ==
            * L2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A L1) (x2 : A L1) ->
          hom (+ L1 x1 x2) ==
            + L2 (hom x1) (hom x2)
    data LeftAbsorptionOpLang
      : Set where
      *L :
        LeftAbsorptionOpLang ->
        LeftAbsorptionOpLang ->
        LeftAbsorptionOpLang
      +L :
        LeftAbsorptionOpLang ->
        LeftAbsorptionOpLang ->
        LeftAbsorptionOpLang
    record LeftAbsorptionOpProd
      : Set where
      constructor LeftAbsorptionOpProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftAbsorp_+_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP (*P xP yP) == xP
    record LeftAbsorptionOpSig
      : Set where
      constructor LeftAbsorptionOpSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  
  module LeftBiMagma where
    record LeftBiMagma : Set where
      constructor LeftBiMagmaC
      field
        A : Set
        op : A -> A -> A
        linv : A -> A -> A
    record LeftBiMagmaHom
      (L1 : LeftBiMagma)
      (L2 : LeftBiMagma) : Set where
      constructor LeftBiMagmaHomC
      field
        hom : A L1 -> A L2
        pres-op :
          (x1 : A L1) (x2 : A L1) ->
          hom (op L1 x1 x2) ==
            op L2 (hom x1) (hom x2)
        pres-linv :
          (x1 : A L1) (x2 : A L1) ->
          hom (linv L1 x1 x2) ==
            linv L2 (hom x1) (hom x2)
    data LeftBiMagmaLang : Set where
      opL :
        LeftBiMagmaLang ->
        LeftBiMagmaLang ->
        LeftBiMagmaLang
      linvL :
        LeftBiMagmaLang ->
        LeftBiMagmaLang ->
        LeftBiMagmaLang
    record LeftBiMagmaProd
      : Set where
      constructor LeftBiMagmaProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        linvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record LeftBiMagmaSig
      : Set where
      constructor LeftBiMagmaSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        linvS : AS -> AS -> AS
  
  module LeftBinaryInverse where
    record LeftBinaryInverse
      : Set where
      constructor LeftBinaryInverseC
      field
        A : Set
        |> : A -> A -> A
        <| : A -> A -> A
        leftInverse :
          (x : A) (y : A) ->
          <| (|> x y) x == y
    record LeftBinaryInverseHom
      (L1 : LeftBinaryInverse)
      (L2 : LeftBinaryInverse) :
      Set where
      constructor LeftBinaryInverseHomC
      field
        hom : A L1 -> A L2
        pres-|> :
          (x1 : A L1) (x2 : A L1) ->
          hom (|> L1 x1 x2) ==
            |> L2 (hom x1) (hom x2)
        pres-<| :
          (x1 : A L1) (x2 : A L1) ->
          hom (<| L1 x1 x2) ==
            <| L2 (hom x1) (hom x2)
    data LeftBinaryInverseLang
      : Set where
      |>L :
        LeftBinaryInverseLang ->
        LeftBinaryInverseLang ->
        LeftBinaryInverseLang
      <|L :
        LeftBinaryInverseLang ->
        LeftBinaryInverseLang ->
        LeftBinaryInverseLang
    record LeftBinaryInverseProd
      : Set where
      constructor LeftBinaryInverseProdC
      field
        AP : Set
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftInverseP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          <|P (|>P xP yP) xP == yP
    record LeftBinaryInverseSig
      : Set where
      constructor LeftBinaryInverseSigSigC
      field
        AS : Set
        |>S : AS -> AS -> AS
        <|S : AS -> AS -> AS
  
  module LeftCancellative where
    record LeftCancellative
      : Set where
      constructor LeftCancellativeC
      field
        A : Set
        op : A -> A -> A
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
    record LeftCancellativeHom
      (L1 : LeftCancellative)
      (L2 : LeftCancellative) :
      Set where
      constructor LeftCancellativeHomC
      field
        hom : A L1 -> A L2
        pres-op :
          (x1 : A L1) (x2 : A L1) ->
          hom (op L1 x1 x2) ==
            op L2 (hom x1) (hom x2)
        pres-linv :
          (x1 : A L1) (x2 : A L1) ->
          hom (linv L1 x1 x2) ==
            linv L2 (hom x1) (hom x2)
    data LeftCancellativeLang
      : Set where
      opL :
        LeftCancellativeLang ->
        LeftCancellativeLang ->
        LeftCancellativeLang
      linvL :
        LeftCancellativeLang ->
        LeftCancellativeLang ->
        LeftCancellativeLang
    record LeftCancellativeProd
      : Set where
      constructor LeftCancellativeProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        linvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (linvP xP yP) == yP
    record LeftCancellativeSig
      : Set where
      constructor LeftCancellativeSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        linvS : AS -> AS -> AS
  
  module LeftCancellativeMagma where
    record LeftCancellativeMagma
      : Set where
      constructor LeftCancellativeMagmaC
      field
        A : Set
        op : A -> A -> A
        leftCancellative :
          (x : A) (y : A) (z : A) ->
          op z x == op z y -> x == y
    record LeftCancellativeMagmaHom
      (L1 : LeftCancellativeMagma)
      (L2 : LeftCancellativeMagma) :
      Set where
      constructor LeftCancellativeMagmaHomC
      field
        hom : A L1 -> A L2
        pres-op :
          (x1 : A L1) (x2 : A L1) ->
          hom (op L1 x1 x2) ==
            op L2 (hom x1) (hom x2)
    data LeftCancellativeMagmaLang
      : Set where
      opL :
        LeftCancellativeMagmaLang ->
        LeftCancellativeMagmaLang ->
        LeftCancellativeMagmaLang
    record LeftCancellativeMagmaProd
      : Set where
      constructor LeftCancellativeMagmaProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP zP xP == opP zP yP ->
          xP == yP
    record LeftCancellativeMagmaSig
      : Set where
      constructor LeftCancellativeMagmaSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module LeftCancellativeOp where
    record LeftCancellativeOp
      : Set where
      constructor LeftCancellativeOpC
      field
        A : Set
        op : A -> A -> A
        linv : A -> A -> A
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
    record LeftCancellativeOpHom
      (L1 : LeftCancellativeOp)
      (L2 : LeftCancellativeOp) :
      Set where
      constructor LeftCancellativeOpHomC
      field
        hom : A L1 -> A L2
        pres-op :
          (x1 : A L1) (x2 : A L1) ->
          hom (op L1 x1 x2) ==
            op L2 (hom x1) (hom x2)
        pres-linv :
          (x1 : A L1) (x2 : A L1) ->
          hom (linv L1 x1 x2) ==
            linv L2 (hom x1) (hom x2)
    data LeftCancellativeOpLang
      : Set where
      opL :
        LeftCancellativeOpLang ->
        LeftCancellativeOpLang ->
        LeftCancellativeOpLang
      linvL :
        LeftCancellativeOpLang ->
        LeftCancellativeOpLang ->
        LeftCancellativeOpLang
    record LeftCancellativeOpProd
      : Set where
      constructor LeftCancellativeOpProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        linvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lefCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          linvP xP (opP xP yP) == yP
    record LeftCancellativeOpSig
      : Set where
      constructor LeftCancellativeOpSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        linvS : AS -> AS -> AS
  
  module LeftCancellativeSemigroup where
    record LeftCancellativeSemigroup
      : Set where
      constructor LeftCancellativeSemigroupC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        leftCancellative :
          (x : A) (y : A) (z : A) ->
          op z x == op z y -> x == y
    record LeftCancellativeSemigroupHom
      (L1 : LeftCancellativeSemigroup)
      (L2 : LeftCancellativeSemigroup) :
      Set where
      constructor LeftCancellativeSemigroupHomC
      field
        hom : A L1 -> A L2
        pres-op :
          (x1 : A L1) (x2 : A L1) ->
          hom (op L1 x1 x2) ==
            op L2 (hom x1) (hom x2)
    data LeftCancellativeSemigroupLang
      : Set where
      opL :
        LeftCancellativeSemigroupLang ->
        LeftCancellativeSemigroupLang ->
        LeftCancellativeSemigroupLang
    record LeftCancellativeSemigroupProd
      : Set where
      constructor LeftCancellativeSemigroupProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        leftCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP zP xP == opP zP yP ->
          xP == yP
    record LeftCancellativeSemigroupSig
      : Set where
      constructor LeftCancellativeSemigroupSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module LeftDistributiveMagma where
    record LeftDistributiveMagma
      : Set where
      constructor LeftDistributiveMagmaC
      field
        A : Set
        op : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          op x (op y z) ==
            op (op x y) (op x z)
    record LeftDistributiveMagmaHom
      (L1 : LeftDistributiveMagma)
      (L2 : LeftDistributiveMagma) :
      Set where
      constructor LeftDistributiveMagmaHomC
      field
        hom : A L1 -> A L2
        pres-op :
          (x1 : A L1) (x2 : A L1) ->
          hom (op L1 x1 x2) ==
            op L2 (hom x1) (hom x2)
    data LeftDistributiveMagmaLang
      : Set where
      opL :
        LeftDistributiveMagmaLang ->
        LeftDistributiveMagmaLang ->
        LeftDistributiveMagmaLang
    record LeftDistributiveMagmaProd
      : Set where
      constructor LeftDistributiveMagmaProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP xP (opP yP zP) ==
            opP (opP xP yP) (opP xP zP)
    record LeftDistributiveMagmaSig
      : Set where
      constructor LeftDistributiveMagmaSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module LeftIdempotence where
    record LeftIdempotence
      : Set where
      constructor LeftIdempotenceC
      field
        A : Set
        |> : A -> A -> A
        idempotent_|> :
          (x : A) -> |> x x == x
    record LeftIdempotenceHom
      (L1 : LeftIdempotence)
      (L2 : LeftIdempotence) :
      Set where
      constructor LeftIdempotenceHomC
      field
        hom : A L1 -> A L2
        pres-|> :
          (x1 : A L1) (x2 : A L1) ->
          hom (|> L1 x1 x2) ==
            |> L2 (hom x1) (hom x2)
    data LeftIdempotenceLang
      : Set where
      |>L :
        LeftIdempotenceLang ->
        LeftIdempotenceLang ->
        LeftIdempotenceLang
    record LeftIdempotenceProd
      : Set where
      constructor LeftIdempotenceProdC
      field
        AP : Set
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        idempotent_|>P :
          (xP : Prod AP AP) ->
          |>P xP xP == xP
    record LeftIdempotenceSig
      : Set where
      constructor LeftIdempotenceSigSigC
      field
        AS : Set
        |>S : AS -> AS -> AS
  
  module LeftInverse where
    record LeftInverse : Set where
      constructor LeftInverseC
      field
        A : Set
        inv : A -> A
        e : A
        op : A -> A -> A
        leftInverse_inv_op_e :
          (x : A) -> op x (inv x) == e
    record LeftInverseHom
      (L1 : LeftInverse)
      (L2 : LeftInverse) : Set where
      constructor LeftInverseHomC
      field
        hom : A L1 -> A L2
        pres-inv :
          (x1 : A L1) ->
          hom (inv L1 x1) ==
            inv L2 (hom x1)
        pres-e : hom (e L1) == e L2
        pres-op :
          (x1 : A L1) (x2 : A L1) ->
          hom (op L1 x1 x2) ==
            op L2 (hom x1) (hom x2)
    data LeftInverseLang : Set where
      invL :
        LeftInverseLang ->
        LeftInverseLang
      eL : LeftInverseLang
      opL :
        LeftInverseLang ->
        LeftInverseLang ->
        LeftInverseLang
    record LeftInverseProd
      : Set where
      constructor LeftInverseProdC
      field
        AP : Set
        invP : Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP xP (invP xP) == eP
    record LeftInverseSig
      : Set where
      constructor LeftInverseSigSigC
      field
        AS : Set
        invS : AS -> AS
        eS : AS
        opS : AS -> AS -> AS
  
  module LeftInverseMagma where
    record LeftInverseMagma
      : Set where
      constructor LeftInverseMagmaC
      field
        A : Set
        linv : A -> A -> A
    record LeftInverseMagmaHom
      (L1 : LeftInverseMagma)
      (L2 : LeftInverseMagma) :
      Set where
      constructor LeftInverseMagmaHomC
      field
        hom : A L1 -> A L2
        pres-linv :
          (x1 : A L1) (x2 : A L1) ->
          hom (linv L1 x1 x2) ==
            linv L2 (hom x1) (hom x2)
    data LeftInverseMagmaLang
      : Set where
      linvL :
        LeftInverseMagmaLang ->
        LeftInverseMagmaLang ->
        LeftInverseMagmaLang
    record LeftInverseMagmaProd
      : Set where
      constructor LeftInverseMagmaProdC
      field
        AP : Set
        linvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record LeftInverseMagmaSig
      : Set where
      constructor LeftInverseMagmaSigSigC
      field
        AS : Set
        linvS : AS -> AS -> AS
  
  module LeftLoop where
    record LeftLoop : Set where
      constructor LeftLoopC
      field
        A : Set
        op : A -> A -> A
        e : A
        runit_e : (x : A) -> op x e == x
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
    record LeftLoopHom
      (L1 : LeftLoop)
      (L2 : LeftLoop) : Set where
      constructor LeftLoopHomC
      field
        hom : A L1 -> A L2
        pres-op :
          (x1 : A L1) (x2 : A L1) ->
          hom (op L1 x1 x2) ==
            op L2 (hom x1) (hom x2)
        pres-e : hom (e L1) == e L2
        pres-linv :
          (x1 : A L1) (x2 : A L1) ->
          hom (linv L1 x1 x2) ==
            linv L2 (hom x1) (hom x2)
    data LeftLoopLang : Set where
      opL :
        LeftLoopLang ->
        LeftLoopLang -> LeftLoopLang
      eL : LeftLoopLang
      linvL :
        LeftLoopLang ->
        LeftLoopLang -> LeftLoopLang
    record LeftLoopProd : Set where
      constructor LeftLoopProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        linvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        leftCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (linvP xP yP) == yP
        lefCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          linvP xP (opP xP yP) == yP
    record LeftLoopSig : Set where
      constructor LeftLoopSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        eS : AS
        linvS : AS -> AS -> AS
  
  module LeftMonoid where
    record LeftMonoid : Set where
      constructor LeftMonoidC
      field
        A : Set
        op : A -> A -> A
        e : A
        lunit_e : (x : A) -> op e x == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
    record LeftMonoidHom
      (L1 : LeftMonoid)
      (L2 : LeftMonoid) : Set where
      constructor LeftMonoidHomC
      field
        hom : A L1 -> A L2
        pres-op :
          (x1 : A L1) (x2 : A L1) ->
          hom (op L1 x1 x2) ==
            op L2 (hom x1) (hom x2)
        pres-e : hom (e L1) == e L2
    data LeftMonoidLang : Set where
      opL :
        LeftMonoidLang ->
        LeftMonoidLang -> LeftMonoidLang
      eL : LeftMonoidLang
    record LeftMonoidProd
      : Set where
      constructor LeftMonoidProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
    record LeftMonoidSig : Set where
      constructor LeftMonoidSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        eS : AS
  
  module LeftPreSemiring where
    record LeftPreSemiring
      : Set where
      constructor LeftPreSemiringC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
    record LeftPreSemiringHom
      (L1 : LeftPreSemiring)
      (L2 : LeftPreSemiring) :
      Set where
      constructor LeftPreSemiringHomC
      field
        hom : A L1 -> A L2
        pres-* :
          (x1 : A L1) (x2 : A L1) ->
          hom (* L1 x1 x2) ==
            * L2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A L1) (x2 : A L1) ->
          hom (+ L1 x1 x2) ==
            + L2 (hom x1) (hom x2)
    data LeftPreSemiringLang
      : Set where
      *L :
        LeftPreSemiringLang ->
        LeftPreSemiringLang ->
        LeftPreSemiringLang
      +L :
        LeftPreSemiringLang ->
        LeftPreSemiringLang ->
        LeftPreSemiringLang
    record LeftPreSemiringProd
      : Set where
      constructor LeftPreSemiringProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
    record LeftPreSemiringSig
      : Set where
      constructor LeftPreSemiringSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  
  module LeftQuasiGroup where
    record LeftQuasiGroup
      : Set where
      constructor LeftQuasiGroupC
      field
        A : Set
        op : A -> A -> A
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
    record LeftQuasiGroupHom
      (L1 : LeftQuasiGroup)
      (L2 : LeftQuasiGroup) :
      Set where
      constructor LeftQuasiGroupHomC
      field
        hom : A L1 -> A L2
        pres-op :
          (x1 : A L1) (x2 : A L1) ->
          hom (op L1 x1 x2) ==
            op L2 (hom x1) (hom x2)
        pres-linv :
          (x1 : A L1) (x2 : A L1) ->
          hom (linv L1 x1 x2) ==
            linv L2 (hom x1) (hom x2)
    data LeftQuasiGroupLang
      : Set where
      opL :
        LeftQuasiGroupLang ->
        LeftQuasiGroupLang ->
        LeftQuasiGroupLang
      linvL :
        LeftQuasiGroupLang ->
        LeftQuasiGroupLang ->
        LeftQuasiGroupLang
    record LeftQuasiGroupProd
      : Set where
      constructor LeftQuasiGroupProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        linvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (linvP xP yP) == yP
        lefCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          linvP xP (opP xP yP) == yP
    record LeftQuasiGroupSig
      : Set where
      constructor LeftQuasiGroupSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        linvS : AS -> AS -> AS
  
  module LeftRack where
    record LeftRack : Set where
      constructor LeftRackC
      field
        A : Set
        |> : A -> A -> A
        <| : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
    record LeftRackHom
      (L1 : LeftRack)
      (L2 : LeftRack) : Set where
      constructor LeftRackHomC
      field
        hom : A L1 -> A L2
        pres-|> :
          (x1 : A L1) (x2 : A L1) ->
          hom (|> L1 x1 x2) ==
            |> L2 (hom x1) (hom x2)
        pres-<| :
          (x1 : A L1) (x2 : A L1) ->
          hom (<| L1 x1 x2) ==
            <| L2 (hom x1) (hom x2)
    data LeftRackLang : Set where
      |>L :
        LeftRackLang ->
        LeftRackLang -> LeftRackLang
      <|L :
        LeftRackLang ->
        LeftRackLang -> LeftRackLang
    record LeftRackProd : Set where
      constructor LeftRackProdC
      field
        AP : Set
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          |>P xP (|>P yP zP) ==
            |>P (|>P xP yP) (|>P xP zP)
    record LeftRackSig : Set where
      constructor LeftRackSigSigC
      field
        AS : Set
        |>S : AS -> AS -> AS
        <|S : AS -> AS -> AS
  
  module LeftRingoid where
    record LeftRingoid : Set where
      constructor LeftRingoidC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
    record LeftRingoidHom
      (L1 : LeftRingoid)
      (L2 : LeftRingoid) : Set where
      constructor LeftRingoidHomC
      field
        hom : A L1 -> A L2
        pres-* :
          (x1 : A L1) (x2 : A L1) ->
          hom (* L1 x1 x2) ==
            * L2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A L1) (x2 : A L1) ->
          hom (+ L1 x1 x2) ==
            + L2 (hom x1) (hom x2)
    data LeftRingoidLang : Set where
      *L :
        LeftRingoidLang ->
        LeftRingoidLang ->
        LeftRingoidLang
      +L :
        LeftRingoidLang ->
        LeftRingoidLang ->
        LeftRingoidLang
    record LeftRingoidProd
      : Set where
      constructor LeftRingoidProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
    record LeftRingoidSig
      : Set where
      constructor LeftRingoidSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  
  module LeftShelf where
    record LeftShelf : Set where
      constructor LeftShelfC
      field
        A : Set
        |> : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
    record LeftShelfHom
      (L1 : LeftShelf)
      (L2 : LeftShelf) : Set where
      constructor LeftShelfHomC
      field
        hom : A L1 -> A L2
        pres-|> :
          (x1 : A L1) (x2 : A L1) ->
          hom (|> L1 x1 x2) ==
            |> L2 (hom x1) (hom x2)
    data LeftShelfLang : Set where
      |>L :
        LeftShelfLang ->
        LeftShelfLang -> LeftShelfLang
    record LeftShelfProd : Set where
      constructor LeftShelfProdC
      field
        AP : Set
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          |>P xP (|>P yP zP) ==
            |>P (|>P xP yP) (|>P xP zP)
    record LeftShelfSig : Set where
      constructor LeftShelfSigSigC
      field
        AS : Set
        |>S : AS -> AS -> AS
  
  module LeftShelfSig where
    record LeftShelfSig : Set where
      constructor LeftShelfSigC
      field
        A : Set
        |> : A -> A -> A
    record LeftShelfSigHom
      (L1 : LeftShelfSig)
      (L2 : LeftShelfSig) : Set where
      constructor LeftShelfSigHomC
      field
        hom : A L1 -> A L2
        pres-|> :
          (x1 : A L1) (x2 : A L1) ->
          hom (|> L1 x1 x2) ==
            |> L2 (hom x1) (hom x2)
    data LeftShelfSigLang
      : Set where
      |>L :
        LeftShelfSigLang ->
        LeftShelfSigLang ->
        LeftShelfSigLang
    record LeftShelfSigProd
      : Set where
      constructor LeftShelfSigProdC
      field
        AP : Set
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record LeftShelfSigSig
      : Set where
      constructor LeftShelfSigSigSigC
      field
        AS : Set
        |>S : AS -> AS -> AS
  
  module LeftSpindle where
    record LeftSpindle : Set where
      constructor LeftSpindleC
      field
        A : Set
        |> : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        idempotent_|> :
          (x : A) -> |> x x == x
    record LeftSpindleHom
      (L1 : LeftSpindle)
      (L2 : LeftSpindle) : Set where
      constructor LeftSpindleHomC
      field
        hom : A L1 -> A L2
        pres-|> :
          (x1 : A L1) (x2 : A L1) ->
          hom (|> L1 x1 x2) ==
            |> L2 (hom x1) (hom x2)
    data LeftSpindleLang : Set where
      |>L :
        LeftSpindleLang ->
        LeftSpindleLang ->
        LeftSpindleLang
    record LeftSpindleProd
      : Set where
      constructor LeftSpindleProdC
      field
        AP : Set
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          |>P xP (|>P yP zP) ==
            |>P (|>P xP yP) (|>P xP zP)
        idempotent_|>P :
          (xP : Prod AP AP) ->
          |>P xP xP == xP
    record LeftSpindleSig
      : Set where
      constructor LeftSpindleSigSigC
      field
        AS : Set
        |>S : AS -> AS -> AS
  
  module LeftSpindle_Shelf where
    record LeftSpindle_Shelf
      : Set where
      constructor LeftSpindle_ShelfC
      field
        A : Set
        |> : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        idempotent_|> :
          (x : A) -> |> x x == x
        <| : A -> A -> A
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
    record LeftSpindle_ShelfHom
      (L1 : LeftSpindle_Shelf)
      (L2 : LeftSpindle_Shelf) :
      Set where
      constructor LeftSpindle_ShelfHomC
      field
        hom : A L1 -> A L2
        pres-|> :
          (x1 : A L1) (x2 : A L1) ->
          hom (|> L1 x1 x2) ==
            |> L2 (hom x1) (hom x2)
        pres-<| :
          (x1 : A L1) (x2 : A L1) ->
          hom (<| L1 x1 x2) ==
            <| L2 (hom x1) (hom x2)
    data LeftSpindle_ShelfLang
      : Set where
      |>L :
        LeftSpindle_ShelfLang ->
        LeftSpindle_ShelfLang ->
        LeftSpindle_ShelfLang
      <|L :
        LeftSpindle_ShelfLang ->
        LeftSpindle_ShelfLang ->
        LeftSpindle_ShelfLang
    record LeftSpindle_ShelfProd
      : Set where
      constructor LeftSpindle_ShelfProdC
      field
        AP : Set
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          |>P xP (|>P yP zP) ==
            |>P (|>P xP yP) (|>P xP zP)
        idempotent_|>P :
          (xP : Prod AP AP) ->
          |>P xP xP == xP
        rightDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          <|P (<|P yP zP) xP ==
            <|P (<|P yP xP) (<|P zP xP)
    record LeftSpindle_ShelfSig
      : Set where
      constructor LeftSpindle_ShelfSigSigC
      field
        AS : Set
        |>S : AS -> AS -> AS
        <|S : AS -> AS -> AS
  
  module LeftSpindle_ShelfSig where
    record LeftSpindle_ShelfSig
      : Set where
      constructor LeftSpindle_ShelfSigC
      field
        A : Set
        |> : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        idempotent_|> :
          (x : A) -> |> x x == x
        <| : A -> A -> A
    record LeftSpindle_ShelfSigHom
      (L1 : LeftSpindle_ShelfSig)
      (L2 : LeftSpindle_ShelfSig) :
      Set where
      constructor LeftSpindle_ShelfSigHomC
      field
        hom : A L1 -> A L2
        pres-|> :
          (x1 : A L1) (x2 : A L1) ->
          hom (|> L1 x1 x2) ==
            |> L2 (hom x1) (hom x2)
        pres-<| :
          (x1 : A L1) (x2 : A L1) ->
          hom (<| L1 x1 x2) ==
            <| L2 (hom x1) (hom x2)
    data LeftSpindle_ShelfSigLang
      : Set where
      |>L :
        LeftSpindle_ShelfSigLang ->
        LeftSpindle_ShelfSigLang ->
        LeftSpindle_ShelfSigLang
      <|L :
        LeftSpindle_ShelfSigLang ->
        LeftSpindle_ShelfSigLang ->
        LeftSpindle_ShelfSigLang
    record LeftSpindle_ShelfSigProd
      : Set where
      constructor LeftSpindle_ShelfSigProdC
      field
        AP : Set
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          |>P xP (|>P yP zP) ==
            |>P (|>P xP yP) (|>P xP zP)
        idempotent_|>P :
          (xP : Prod AP AP) ->
          |>P xP xP == xP
    record LeftSpindle_ShelfSigSig
      : Set where
      constructor LeftSpindle_ShelfSigSigSigC
      field
        AS : Set
        |>S : AS -> AS -> AS
        <|S : AS -> AS -> AS
  
  module LeftUnital where
    record LeftUnital : Set where
      constructor LeftUnitalC
      field
        A : Set
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
    record LeftUnitalHom
      (L1 : LeftUnital)
      (L2 : LeftUnital) : Set where
      constructor LeftUnitalHomC
      field
        hom : A L1 -> A L2
        pres-e : hom (e L1) == e L2
        pres-op :
          (x1 : A L1) (x2 : A L1) ->
          hom (op L1 x1 x2) ==
            op L2 (hom x1) (hom x2)
    data LeftUnitalLang : Set where
      eL : LeftUnitalLang
      opL :
        LeftUnitalLang ->
        LeftUnitalLang -> LeftUnitalLang
    record LeftUnitalProd
      : Set where
      constructor LeftUnitalProdC
      field
        AP : Set
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
    record LeftUnitalSig : Set where
      constructor LeftUnitalSigSigC
      field
        AS : Set
        eS : AS
        opS : AS -> AS -> AS
  
  module LeftZero where
    record LeftZero : Set where
      constructor LeftZeroC
      field
        A : Set
        e : A
        op : A -> A -> A
        leftZero_op_e :
          (x : A) -> op e x == e
    record LeftZeroHom
      (L1 : LeftZero)
      (L2 : LeftZero) : Set where
      constructor LeftZeroHomC
      field
        hom : A L1 -> A L2
        pres-e : hom (e L1) == e L2
        pres-op :
          (x1 : A L1) (x2 : A L1) ->
          hom (op L1 x1 x2) ==
            op L2 (hom x1) (hom x2)
    data LeftZeroLang : Set where
      eL : LeftZeroLang
      opL :
        LeftZeroLang ->
        LeftZeroLang -> LeftZeroLang
    record LeftZeroProd : Set where
      constructor LeftZeroProdC
      field
        AP : Set
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftZero_op_eP :
          (xP : Prod AP AP) ->
          opP eP xP == eP
    record LeftZeroSig : Set where
      constructor LeftZeroSigSigC
      field
        AS : Set
        eS : AS
        opS : AS -> AS -> AS
  
  module LieRing where
    record LieRing : Set where
      constructor LieRingC
      field
        A : Set
        0 : A
        + : A -> A -> A
        * : A -> A -> A
        jacobian_*_+ :
          (x : A) (y : A) (z : A) ->
          +
            (+ (* x (* y z)) (* y (* z x)))
            (* z (* x y)) == 0
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
        antiCommutative :
          (x : A) (y : A) ->
          * x y == neg (* y x)
    record LieRingHom
      (L1 : LieRing) (L2 : LieRing) :
      Set where
      constructor LieRingHomC
      field
        hom : A L1 -> A L2
        pres-0 : hom (0 L1) == 0 L2
        pres-+ :
          (x1 : A L1) (x2 : A L1) ->
          hom (+ L1 x1 x2) ==
            + L2 (hom x1) (hom x2)
        pres-* :
          (x1 : A L1) (x2 : A L1) ->
          hom (* L1 x1 x2) ==
            * L2 (hom x1) (hom x2)
        pres-neg :
          (x1 : A L1) ->
          hom (neg L1 x1) ==
            neg L2 (hom x1)
        pres-1 : hom (1 L1) == 1 L2
    data LieRingLang : Set where
      0L : LieRingLang
      +L :
        LieRingLang ->
        LieRingLang -> LieRingLang
      *L :
        LieRingLang ->
        LieRingLang -> LieRingLang
      negL :
        LieRingLang -> LieRingLang
      1L : LieRingLang
    record LieRingProd : Set where
      constructor LieRingProdC
      field
        AP : Set
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        negP : Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        jacobian_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P
            (+P (*P xP (*P yP zP))
               (*P yP (*P zP xP)))
            (*P zP (*P xP yP)) == 0P
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        leftInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P xP (negP xP) == 0P
        rightInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P (negP xP) xP == 0P
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        leftZero_op_0P :
          (xP : Prod AP AP) ->
          *P 0P xP == 0P
        rightZero_op_0P :
          (xP : Prod AP AP) ->
          *P xP 0P == 0P
        antiCommutativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == negP (*P yP xP)
    record LieRingSig : Set where
      constructor LieRingSigSigC
      field
        AS : Set
        0S : AS
        +S : AS -> AS -> AS
        *S : AS -> AS -> AS
        negS : AS -> AS
        1S : AS
  
  module Loop where
    record Loop : Set where
      constructor LoopC
      field
        A : Set
        op : A -> A -> A
        e : A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
        rinv : A -> A -> A
        rightCancel :
          (x : A) (y : A) ->
          op (rinv y x) x == y
        rightCancelOp :
          (x : A) (y : A) ->
          rinv (op y x) x == y
    record LoopHom
      (L1 : Loop) (L2 : Loop) :
      Set where
      constructor LoopHomC
      field
        hom : A L1 -> A L2
        pres-op :
          (x1 : A L1) (x2 : A L1) ->
          hom (op L1 x1 x2) ==
            op L2 (hom x1) (hom x2)
        pres-e : hom (e L1) == e L2
        pres-linv :
          (x1 : A L1) (x2 : A L1) ->
          hom (linv L1 x1 x2) ==
            linv L2 (hom x1) (hom x2)
        pres-rinv :
          (x1 : A L1) (x2 : A L1) ->
          hom (rinv L1 x1 x2) ==
            rinv L2 (hom x1) (hom x2)
    data LoopLang : Set where
      opL :
        LoopLang -> LoopLang -> LoopLang
      eL : LoopLang
      linvL :
        LoopLang -> LoopLang -> LoopLang
      rinvL :
        LoopLang -> LoopLang -> LoopLang
    record LoopProd : Set where
      constructor LoopProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        linvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rinvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        leftCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (linvP xP yP) == yP
        lefCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          linvP xP (opP xP yP) == yP
        rightCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP (rinvP yP xP) xP == yP
        rightCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          rinvP (opP yP xP) xP == yP
    record LoopSig : Set where
      constructor LoopSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        eS : AS
        linvS : AS -> AS -> AS
        rinvS : AS -> AS -> AS
  
  module Magma where
    record Magma : Set where
      constructor MagmaC
      field
        A : Set
        op : A -> A -> A
    record MagmaHom
      (M1 : Magma) (M2 : Magma) :
      Set where
      constructor MagmaHomC
      field
        hom : A M1 -> A M2
        pres-op :
          (x1 : A M1) (x2 : A M1) ->
          hom (op M1 x1 x2) ==
            op M2 (hom x1) (hom x2)
    data MagmaLang : Set where
      opL :
        MagmaLang ->
        MagmaLang -> MagmaLang
    record MagmaProd : Set where
      constructor MagmaProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record MagmaSig : Set where
      constructor MagmaSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module MedialMagma where
    record MedialMagma : Set where
      constructor MedialMagmaC
      field
        A : Set
        op : A -> A -> A
        mediates :
          (w : A) (x : A) (y : A)
          (z : A) ->
          op (op x y) (op z w) ==
            op (op x z) (op y w)
    record MedialMagmaHom
      (M1 : MedialMagma)
      (M2 : MedialMagma) : Set where
      constructor MedialMagmaHomC
      field
        hom : A M1 -> A M2
        pres-op :
          (x1 : A M1) (x2 : A M1) ->
          hom (op M1 x1 x2) ==
            op M2 (hom x1) (hom x2)
    data MedialMagmaLang : Set where
      opL :
        MedialMagmaLang ->
        MedialMagmaLang ->
        MedialMagmaLang
    record MedialMagmaProd
      : Set where
      constructor MedialMagmaProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        mediatesP :
          (wP : Prod AP AP)
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) (opP zP wP) ==
            opP (opP xP zP) (opP yP wP)
    record MedialMagmaSig
      : Set where
      constructor MedialMagmaSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module MedialQuasiGroup where
    record MedialQuasiGroup
      : Set where
      constructor MedialQuasiGroupC
      field
        A : Set
        op : A -> A -> A
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
        rinv : A -> A -> A
        rightCancel :
          (x : A) (y : A) ->
          op (rinv y x) x == y
        rightCancelOp :
          (x : A) (y : A) ->
          rinv (op y x) x == y
        mediates :
          (w : A) (x : A) (y : A)
          (z : A) ->
          op (op x y) (op z w) ==
            op (op x z) (op y w)
    record MedialQuasiGroupHom
      (M1 : MedialQuasiGroup)
      (M2 : MedialQuasiGroup) :
      Set where
      constructor MedialQuasiGroupHomC
      field
        hom : A M1 -> A M2
        pres-op :
          (x1 : A M1) (x2 : A M1) ->
          hom (op M1 x1 x2) ==
            op M2 (hom x1) (hom x2)
        pres-linv :
          (x1 : A M1) (x2 : A M1) ->
          hom (linv M1 x1 x2) ==
            linv M2 (hom x1) (hom x2)
        pres-rinv :
          (x1 : A M1) (x2 : A M1) ->
          hom (rinv M1 x1 x2) ==
            rinv M2 (hom x1) (hom x2)
    data MedialQuasiGroupLang
      : Set where
      opL :
        MedialQuasiGroupLang ->
        MedialQuasiGroupLang ->
        MedialQuasiGroupLang
      linvL :
        MedialQuasiGroupLang ->
        MedialQuasiGroupLang ->
        MedialQuasiGroupLang
      rinvL :
        MedialQuasiGroupLang ->
        MedialQuasiGroupLang ->
        MedialQuasiGroupLang
    record MedialQuasiGroupProd
      : Set where
      constructor MedialQuasiGroupProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        linvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rinvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (linvP xP yP) == yP
        lefCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          linvP xP (opP xP yP) == yP
        rightCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP (rinvP yP xP) xP == yP
        rightCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          rinvP (opP yP xP) xP == yP
        mediatesP :
          (wP : Prod AP AP)
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) (opP zP wP) ==
            opP (opP xP zP) (opP yP wP)
    record MedialQuasiGroupSig
      : Set where
      constructor MedialQuasiGroupSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        linvS : AS -> AS -> AS
        rinvS : AS -> AS -> AS
  
  module MeetSemilattice where
    record MeetSemilattice
      : Set where
      constructor MeetSemilatticeC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        idempotent_op :
          (x : A) -> op x x == x
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
    record MeetSemilatticeHom
      (M1 : MeetSemilattice)
      (M2 : MeetSemilattice) :
      Set where
      constructor MeetSemilatticeHomC
      field
        hom : A M1 -> A M2
        pres-op :
          (x1 : A M1) (x2 : A M1) ->
          hom (op M1 x1 x2) ==
            op M2 (hom x1) (hom x2)
    data MeetSemilatticeLang
      : Set where
      opL :
        MeetSemilatticeLang ->
        MeetSemilatticeLang ->
        MeetSemilatticeLang
    record MeetSemilatticeProd
      : Set where
      constructor MeetSemilatticeProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        idempotent_opP :
          (xP : Prod AP AP) ->
          opP xP xP == xP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
    record MeetSemilatticeSig
      : Set where
      constructor MeetSemilatticeSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module MiddleAbsorption where
    record MiddleAbsorption
      : Set where
      constructor MiddleAbsorptionC
      field
        A : Set
        op : A -> A -> A
        middleAbsorb_* :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x z
    record MiddleAbsorptionHom
      (M1 : MiddleAbsorption)
      (M2 : MiddleAbsorption) :
      Set where
      constructor MiddleAbsorptionHomC
      field
        hom : A M1 -> A M2
        pres-op :
          (x1 : A M1) (x2 : A M1) ->
          hom (op M1 x1 x2) ==
            op M2 (hom x1) (hom x2)
    data MiddleAbsorptionLang
      : Set where
      opL :
        MiddleAbsorptionLang ->
        MiddleAbsorptionLang ->
        MiddleAbsorptionLang
    record MiddleAbsorptionProd
      : Set where
      constructor MiddleAbsorptionProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        middleAbsorb_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP == opP xP zP
    record MiddleAbsorptionSig
      : Set where
      constructor MiddleAbsorptionSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module MiddleCommute where
    record MiddleCommute : Set where
      constructor MiddleCommuteC
      field
        A : Set
        op : A -> A -> A
        middleCommute_* :
          (x : A) (y : A) (z : A) ->
          op (op (op x y) z) x ==
            op (op (op x z) y) x
    record MiddleCommuteHom
      (M1 : MiddleCommute)
      (M2 : MiddleCommute) : Set where
      constructor MiddleCommuteHomC
      field
        hom : A M1 -> A M2
        pres-op :
          (x1 : A M1) (x2 : A M1) ->
          hom (op M1 x1 x2) ==
            op M2 (hom x1) (hom x2)
    data MiddleCommuteLang
      : Set where
      opL :
        MiddleCommuteLang ->
        MiddleCommuteLang ->
        MiddleCommuteLang
    record MiddleCommuteProd
      : Set where
      constructor MiddleCommuteProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        middleCommute_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP (opP xP yP) zP) xP ==
            opP (opP (opP xP zP) yP) xP
    record MiddleCommuteSig
      : Set where
      constructor MiddleCommuteSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module ModularLattice where
    record ModularLattice
      : Set where
      constructor ModularLatticeC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        idempotent_* :
          (x : A) -> * x x == x
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        idempotent_+ :
          (x : A) -> + x x == x
        leftAbsorp_*_+ :
          (x : A) (y : A) ->
          * x (+ x y) == x
        leftAbsorp_+_* :
          (x : A) (y : A) ->
          + x (* x y) == x
        leftModular_*_+ :
          (x : A) (y : A) (z : A) ->
          + (* x y) (* x z) ==
            * x (+ y (* x z))
    record ModularLatticeHom
      (M1 : ModularLattice)
      (M2 : ModularLattice) :
      Set where
      constructor ModularLatticeHomC
      field
        hom : A M1 -> A M2
        pres-* :
          (x1 : A M1) (x2 : A M1) ->
          hom (* M1 x1 x2) ==
            * M2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A M1) (x2 : A M1) ->
          hom (+ M1 x1 x2) ==
            + M2 (hom x1) (hom x2)
    data ModularLatticeLang
      : Set where
      *L :
        ModularLatticeLang ->
        ModularLatticeLang ->
        ModularLatticeLang
      +L :
        ModularLatticeLang ->
        ModularLatticeLang ->
        ModularLatticeLang
    record ModularLatticeProd
      : Set where
      constructor ModularLatticeProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
        leftAbsorp_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP (+P xP yP) == xP
        leftAbsorp_+_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP (*P xP yP) == xP
        leftModular_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (*P xP yP) (*P xP zP) ==
            *P xP (+P yP (*P xP zP))
    record ModularLatticeSig
      : Set where
      constructor ModularLatticeSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  
  module Modularity where
    record Modularity : Set where
      constructor ModularityC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        leftModular_*_+ :
          (x : A) (y : A) (z : A) ->
          + (* x y) (* x z) ==
            * x (+ y (* x z))
    record ModularityHom
      (M1 : Modularity)
      (M2 : Modularity) : Set where
      constructor ModularityHomC
      field
        hom : A M1 -> A M2
        pres-* :
          (x1 : A M1) (x2 : A M1) ->
          hom (* M1 x1 x2) ==
            * M2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A M1) (x2 : A M1) ->
          hom (+ M1 x1 x2) ==
            + M2 (hom x1) (hom x2)
    data ModularityLang : Set where
      *L :
        ModularityLang ->
        ModularityLang -> ModularityLang
      +L :
        ModularityLang ->
        ModularityLang -> ModularityLang
    record ModularityProd
      : Set where
      constructor ModularityProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftModular_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (*P xP yP) (*P xP zP) ==
            *P xP (+P yP (*P xP zP))
    record ModularitySig : Set where
      constructor ModularitySigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  
  module Monoid where
    record Monoid : Set where
      constructor MonoidC
      field
        A : Set
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
    record MonoidHom
      (M1 : Monoid) (M2 : Monoid) :
      Set where
      constructor MonoidHomC
      field
        hom : A M1 -> A M2
        pres-e : hom (e M1) == e M2
        pres-op :
          (x1 : A M1) (x2 : A M1) ->
          hom (op M1 x1 x2) ==
            op M2 (hom x1) (hom x2)
    data MonoidLang : Set where
      eL : MonoidLang
      opL :
        MonoidLang ->
        MonoidLang -> MonoidLang
    record MonoidProd : Set where
      constructor MonoidProdC
      field
        AP : Set
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
    record MonoidSig : Set where
      constructor MonoidSigSigC
      field
        AS : Set
        eS : AS
        opS : AS -> AS -> AS
  
  module Monoid1 where
    record Monoid1 : Set where
      constructor Monoid1C
      field
        A : Set
        1 : A
        op : A -> A -> A
        lunit_1 : (x : A) -> op 1 x == x
        runit_1 : (x : A) -> op x 1 == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
    record Monoid1Hom
      (M1 : Monoid1) (M2 : Monoid1) :
      Set where
      constructor Monoid1HomC
      field
        hom : A M1 -> A M2
        pres-1 : hom (1 M1) == 1 M2
        pres-op :
          (x1 : A M1) (x2 : A M1) ->
          hom (op M1 x1 x2) ==
            op M2 (hom x1) (hom x2)
    data Monoid1Lang : Set where
      1L : Monoid1Lang
      opL :
        Monoid1Lang ->
        Monoid1Lang -> Monoid1Lang
    record Monoid1Prod : Set where
      constructor Monoid1ProdC
      field
        AP : Set
        1P : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_1P :
          (xP : Prod AP AP) ->
          opP 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          opP xP 1P == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
    record Monoid1Sig : Set where
      constructor Monoid1SigSigC
      field
        AS : Set
        1S : AS
        opS : AS -> AS -> AS
  
  module MoufangIdentity where
    record MoufangIdentity
      : Set where
      constructor MoufangIdentityC
      field
        A : Set
        op : A -> A -> A
        moufangId :
          (x : A) (y : A) (z : A) ->
          op (op z x) (op y z) ==
            op (op z (op x y)) z
    record MoufangIdentityHom
      (M1 : MoufangIdentity)
      (M2 : MoufangIdentity) :
      Set where
      constructor MoufangIdentityHomC
      field
        hom : A M1 -> A M2
        pres-op :
          (x1 : A M1) (x2 : A M1) ->
          hom (op M1 x1 x2) ==
            op M2 (hom x1) (hom x2)
    data MoufangIdentityLang
      : Set where
      opL :
        MoufangIdentityLang ->
        MoufangIdentityLang ->
        MoufangIdentityLang
    record MoufangIdentityProd
      : Set where
      constructor MoufangIdentityProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        moufangIdP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP zP xP) (opP yP zP) ==
            opP (opP zP (opP xP yP)) zP
    record MoufangIdentitySig
      : Set where
      constructor MoufangIdentitySigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module MoufangLaw where
    record MoufangLaw : Set where
      constructor MoufangLawC
      field
        A : Set
        op : A -> A -> A
        moufangLaw :
          (e : A) (x : A) (y : A)
          (z : A) ->
          op y e == y ->
          op (op (op x y) z) x ==
            op x (op y (op (op e z) x))
    record MoufangLawHom
      (M1 : MoufangLaw)
      (M2 : MoufangLaw) : Set where
      constructor MoufangLawHomC
      field
        hom : A M1 -> A M2
        pres-op :
          (x1 : A M1) (x2 : A M1) ->
          hom (op M1 x1 x2) ==
            op M2 (hom x1) (hom x2)
    data MoufangLawLang : Set where
      opL :
        MoufangLawLang ->
        MoufangLawLang -> MoufangLawLang
    record MoufangLawProd
      : Set where
      constructor MoufangLawProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        moufangLawP :
          (eP : Prod AP AP)
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP yP eP == yP ->
          opP (opP (opP xP yP) zP) xP ==
            opP xP
              (opP yP (opP (opP eP zP) xP))
    record MoufangLawSig : Set where
      constructor MoufangLawSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module MoufangLoop where
    record MoufangLoop : Set where
      constructor MoufangLoopC
      field
        A : Set
        op : A -> A -> A
        e : A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
        rinv : A -> A -> A
        rightCancel :
          (x : A) (y : A) ->
          op (rinv y x) x == y
        rightCancelOp :
          (x : A) (y : A) ->
          rinv (op y x) x == y
        moufangId :
          (x : A) (y : A) (z : A) ->
          op (op z x) (op y z) ==
            op (op z (op x y)) z
    record MoufangLoopHom
      (M1 : MoufangLoop)
      (M2 : MoufangLoop) : Set where
      constructor MoufangLoopHomC
      field
        hom : A M1 -> A M2
        pres-op :
          (x1 : A M1) (x2 : A M1) ->
          hom (op M1 x1 x2) ==
            op M2 (hom x1) (hom x2)
        pres-e : hom (e M1) == e M2
        pres-linv :
          (x1 : A M1) (x2 : A M1) ->
          hom (linv M1 x1 x2) ==
            linv M2 (hom x1) (hom x2)
        pres-rinv :
          (x1 : A M1) (x2 : A M1) ->
          hom (rinv M1 x1 x2) ==
            rinv M2 (hom x1) (hom x2)
    data MoufangLoopLang : Set where
      opL :
        MoufangLoopLang ->
        MoufangLoopLang ->
        MoufangLoopLang
      eL : MoufangLoopLang
      linvL :
        MoufangLoopLang ->
        MoufangLoopLang ->
        MoufangLoopLang
      rinvL :
        MoufangLoopLang ->
        MoufangLoopLang ->
        MoufangLoopLang
    record MoufangLoopProd
      : Set where
      constructor MoufangLoopProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        linvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rinvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        leftCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (linvP xP yP) == yP
        lefCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          linvP xP (opP xP yP) == yP
        rightCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP (rinvP yP xP) xP == yP
        rightCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          rinvP (opP yP xP) xP == yP
        moufangIdP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP zP xP) (opP yP zP) ==
            opP (opP zP (opP xP yP)) zP
    record MoufangLoopSig
      : Set where
      constructor MoufangLoopSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        eS : AS
        linvS : AS -> AS -> AS
        rinvS : AS -> AS -> AS
  
  module MoufangQuasiGroup where
    record MoufangQuasiGroup
      : Set where
      constructor MoufangQuasiGroupC
      field
        A : Set
        op : A -> A -> A
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
        rinv : A -> A -> A
        rightCancel :
          (x : A) (y : A) ->
          op (rinv y x) x == y
        rightCancelOp :
          (x : A) (y : A) ->
          rinv (op y x) x == y
        moufangLaw :
          (e : A) (x : A) (y : A)
          (z : A) ->
          op y e == y ->
          op (op (op x y) z) x ==
            op x (op y (op (op e z) x))
    record MoufangQuasiGroupHom
      (M1 : MoufangQuasiGroup)
      (M2 : MoufangQuasiGroup) :
      Set where
      constructor MoufangQuasiGroupHomC
      field
        hom : A M1 -> A M2
        pres-op :
          (x1 : A M1) (x2 : A M1) ->
          hom (op M1 x1 x2) ==
            op M2 (hom x1) (hom x2)
        pres-linv :
          (x1 : A M1) (x2 : A M1) ->
          hom (linv M1 x1 x2) ==
            linv M2 (hom x1) (hom x2)
        pres-rinv :
          (x1 : A M1) (x2 : A M1) ->
          hom (rinv M1 x1 x2) ==
            rinv M2 (hom x1) (hom x2)
    data MoufangQuasiGroupLang
      : Set where
      opL :
        MoufangQuasiGroupLang ->
        MoufangQuasiGroupLang ->
        MoufangQuasiGroupLang
      linvL :
        MoufangQuasiGroupLang ->
        MoufangQuasiGroupLang ->
        MoufangQuasiGroupLang
      rinvL :
        MoufangQuasiGroupLang ->
        MoufangQuasiGroupLang ->
        MoufangQuasiGroupLang
    record MoufangQuasiGroupProd
      : Set where
      constructor MoufangQuasiGroupProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        linvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rinvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (linvP xP yP) == yP
        lefCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          linvP xP (opP xP yP) == yP
        rightCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP (rinvP yP xP) xP == yP
        rightCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          rinvP (opP yP xP) xP == yP
        moufangLawP :
          (eP : Prod AP AP)
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP yP eP == yP ->
          opP (opP (opP xP yP) zP) xP ==
            opP xP
              (opP yP (opP (opP eP zP) xP))
    record MoufangQuasiGroupSig
      : Set where
      constructor MoufangQuasiGroupSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        linvS : AS -> AS -> AS
        rinvS : AS -> AS -> AS
  
  module MultCommutativeMonoid where
    record MultCommutativeMonoid
      : Set where
      constructor MultCommutativeMonoidC
      field
        A : Set
        1 : A
        * : A -> A -> A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
    record MultCommutativeMonoidHom
      (M1 : MultCommutativeMonoid)
      (M2 : MultCommutativeMonoid) :
      Set where
      constructor MultCommutativeMonoidHomC
      field
        hom : A M1 -> A M2
        pres-1 : hom (1 M1) == 1 M2
        pres-* :
          (x1 : A M1) (x2 : A M1) ->
          hom (* M1 x1 x2) ==
            * M2 (hom x1) (hom x2)
    data MultCommutativeMonoidLang
      : Set where
      1L : MultCommutativeMonoidLang
      *L :
        MultCommutativeMonoidLang ->
        MultCommutativeMonoidLang ->
        MultCommutativeMonoidLang
    record MultCommutativeMonoidProd
      : Set where
      constructor MultCommutativeMonoidProdC
      field
        AP : Set
        1P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
    record MultCommutativeMonoidSig
      : Set where
      constructor MultCommutativeMonoidSigSigC
      field
        AS : Set
        1S : AS
        *S : AS -> AS -> AS
  
  module MultCommutativeSemigroup where
    record MultCommutativeSemigroup
      : Set where
      constructor MultCommutativeSemigroupC
      field
        A : Set
        * : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
    record MultCommutativeSemigroupHom
      (M1 : MultCommutativeSemigroup)
      (M2 : MultCommutativeSemigroup) :
      Set where
      constructor MultCommutativeSemigroupHomC
      field
        hom : A M1 -> A M2
        pres-* :
          (x1 : A M1) (x2 : A M1) ->
          hom (* M1 x1 x2) ==
            * M2 (hom x1) (hom x2)
    data MultCommutativeSemigroupLang
      : Set where
      *L :
        MultCommutativeSemigroupLang ->
        MultCommutativeSemigroupLang ->
        MultCommutativeSemigroupLang
    record MultCommutativeSemigroupProd
      : Set where
      constructor MultCommutativeSemigroupProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
    record MultCommutativeSemigroupSig
      : Set where
      constructor MultCommutativeSemigroupSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
  
  module MultGroup where
    record MultGroup : Set where
      constructor MultGroupC
      field
        A : Set
        1 : A
        * : A -> A -> A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        inv : A -> A
        leftInverse_inv_op_1 :
          (x : A) -> * x (inv x) == 1
        rightInverse_inv_op_1 :
          (x : A) -> * (inv x) x == 1
    record MultGroupHom
      (M1 : MultGroup)
      (M2 : MultGroup) : Set where
      constructor MultGroupHomC
      field
        hom : A M1 -> A M2
        pres-1 : hom (1 M1) == 1 M2
        pres-* :
          (x1 : A M1) (x2 : A M1) ->
          hom (* M1 x1 x2) ==
            * M2 (hom x1) (hom x2)
        pres-inv :
          (x1 : A M1) ->
          hom (inv M1 x1) ==
            inv M2 (hom x1)
    data MultGroupLang : Set where
      1L : MultGroupLang
      *L :
        MultGroupLang ->
        MultGroupLang -> MultGroupLang
      invL :
        MultGroupLang -> MultGroupLang
    record MultGroupProd : Set where
      constructor MultGroupProdC
      field
        AP : Set
        1P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        invP : Prod AP AP -> Prod AP AP
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftInverse_inv_op_1P :
          (xP : Prod AP AP) ->
          *P xP (invP xP) == 1P
        rightInverse_inv_op_1P :
          (xP : Prod AP AP) ->
          *P (invP xP) xP == 1P
    record MultGroupSig : Set where
      constructor MultGroupSigSigC
      field
        AS : Set
        1S : AS
        *S : AS -> AS -> AS
        invS : AS -> AS
  
  module MultMagma where
    record MultMagma : Set where
      constructor MultMagmaC
      field
        A : Set
        * : A -> A -> A
    record MultMagmaHom
      (M1 : MultMagma)
      (M2 : MultMagma) : Set where
      constructor MultMagmaHomC
      field
        hom : A M1 -> A M2
        pres-* :
          (x1 : A M1) (x2 : A M1) ->
          hom (* M1 x1 x2) ==
            * M2 (hom x1) (hom x2)
    data MultMagmaLang : Set where
      *L :
        MultMagmaLang ->
        MultMagmaLang -> MultMagmaLang
    record MultMagmaProd : Set where
      constructor MultMagmaProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record MultMagmaSig : Set where
      constructor MultMagmaSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
  
  module MultMeetSemilattice where
    record MultMeetSemilattice
      : Set where
      constructor MultMeetSemilatticeC
      field
        A : Set
        * : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        idempotent_* :
          (x : A) -> * x x == x
    record MultMeetSemilatticeHom
      (M1 : MultMeetSemilattice)
      (M2 : MultMeetSemilattice) :
      Set where
      constructor MultMeetSemilatticeHomC
      field
        hom : A M1 -> A M2
        pres-* :
          (x1 : A M1) (x2 : A M1) ->
          hom (* M1 x1 x2) ==
            * M2 (hom x1) (hom x2)
    data MultMeetSemilatticeLang
      : Set where
      *L :
        MultMeetSemilatticeLang ->
        MultMeetSemilatticeLang ->
        MultMeetSemilatticeLang
    record MultMeetSemilatticeProd
      : Set where
      constructor MultMeetSemilatticeProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
    record MultMeetSemilatticeSig
      : Set where
      constructor MultMeetSemilatticeSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
  
  module MultMonoid where
    record MultMonoid : Set where
      constructor MultMonoidC
      field
        A : Set
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
    record MultMonoidHom
      (M1 : MultMonoid)
      (M2 : MultMonoid) : Set where
      constructor MultMonoidHomC
      field
        hom : A M1 -> A M2
        pres-* :
          (x1 : A M1) (x2 : A M1) ->
          hom (* M1 x1 x2) ==
            * M2 (hom x1) (hom x2)
        pres-1 : hom (1 M1) == 1 M2
    data MultMonoidLang : Set where
      *L :
        MultMonoidLang ->
        MultMonoidLang -> MultMonoidLang
      1L : MultMonoidLang
    record MultMonoidProd
      : Set where
      constructor MultMonoidProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
    record MultMonoidSig : Set where
      constructor MultMonoidSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        1S : AS
  
  module MultPointedMagma where
    record MultPointedMagma
      : Set where
      constructor MultPointedMagmaC
      field
        A : Set
        1 : A
        * : A -> A -> A
    record MultPointedMagmaHom
      (M1 : MultPointedMagma)
      (M2 : MultPointedMagma) :
      Set where
      constructor MultPointedMagmaHomC
      field
        hom : A M1 -> A M2
        pres-1 : hom (1 M1) == 1 M2
        pres-* :
          (x1 : A M1) (x2 : A M1) ->
          hom (* M1 x1 x2) ==
            * M2 (hom x1) (hom x2)
    data MultPointedMagmaLang
      : Set where
      1L : MultPointedMagmaLang
      *L :
        MultPointedMagmaLang ->
        MultPointedMagmaLang ->
        MultPointedMagmaLang
    record MultPointedMagmaProd
      : Set where
      constructor MultPointedMagmaProdC
      field
        AP : Set
        1P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record MultPointedMagmaSig
      : Set where
      constructor MultPointedMagmaSigSigC
      field
        AS : Set
        1S : AS
        *S : AS -> AS -> AS
  
  module MultPointedSemigroup where
    record MultPointedSemigroup
      : Set where
      constructor MultPointedSemigroupC
      field
        A : Set
        1 : A
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
    record MultPointedSemigroupHom
      (M1 : MultPointedSemigroup)
      (M2 : MultPointedSemigroup) :
      Set where
      constructor MultPointedSemigroupHomC
      field
        hom : A M1 -> A M2
        pres-1 : hom (1 M1) == 1 M2
        pres-* :
          (x1 : A M1) (x2 : A M1) ->
          hom (* M1 x1 x2) ==
            * M2 (hom x1) (hom x2)
    data MultPointedSemigroupLang
      : Set where
      1L : MultPointedSemigroupLang
      *L :
        MultPointedSemigroupLang ->
        MultPointedSemigroupLang ->
        MultPointedSemigroupLang
    record MultPointedSemigroupProd
      : Set where
      constructor MultPointedSemigroupProdC
      field
        AP : Set
        1P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
    record MultPointedSemigroupSig
      : Set where
      constructor MultPointedSemigroupSigSigC
      field
        AS : Set
        1S : AS
        *S : AS -> AS -> AS
  
  module MultSemigroup where
    record MultSemigroup : Set where
      constructor MultSemigroupC
      field
        A : Set
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
    record MultSemigroupHom
      (M1 : MultSemigroup)
      (M2 : MultSemigroup) : Set where
      constructor MultSemigroupHomC
      field
        hom : A M1 -> A M2
        pres-* :
          (x1 : A M1) (x2 : A M1) ->
          hom (* M1 x1 x2) ==
            * M2 (hom x1) (hom x2)
    data MultSemigroupLang
      : Set where
      *L :
        MultSemigroupLang ->
        MultSemigroupLang ->
        MultSemigroupLang
    record MultSemigroupProd
      : Set where
      constructor MultSemigroupProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
    record MultSemigroupSig
      : Set where
      constructor MultSemigroupSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
  
  module MultSemilattice_RingoidSig where
    record MultSemilattice_RingoidSig
      : Set where
      constructor MultSemilattice_RingoidSigC
      field
        A : Set
        * : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        idempotent_* :
          (x : A) -> * x x == x
        + : A -> A -> A
    record MultSemilattice_RingoidSigHom
      (M1 : MultSemilattice_RingoidSig)
      (M2 : MultSemilattice_RingoidSig) :
      Set where
      constructor MultSemilattice_RingoidSigHomC
      field
        hom : A M1 -> A M2
        pres-* :
          (x1 : A M1) (x2 : A M1) ->
          hom (* M1 x1 x2) ==
            * M2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A M1) (x2 : A M1) ->
          hom (+ M1 x1 x2) ==
            + M2 (hom x1) (hom x2)
    data MultSemilattice_RingoidSigLang
      : Set where
      *L :
        MultSemilattice_RingoidSigLang ->
        MultSemilattice_RingoidSigLang ->
        MultSemilattice_RingoidSigLang
      +L :
        MultSemilattice_RingoidSigLang ->
        MultSemilattice_RingoidSigLang ->
        MultSemilattice_RingoidSigLang
    record MultSemilattice_RingoidSigProd
      : Set where
      constructor MultSemilattice_RingoidSigProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
    record MultSemilattice_RingoidSigSig
      : Set where
      constructor MultSemilattice_RingoidSigSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  
  module MultUnaryAntiDistribution where
    record MultUnaryAntiDistribution
      : Set where
      constructor MultUnaryAntiDistributionC
      field
        A : Set
        prim : A -> A
        * : A -> A -> A
        antidis_prim_* :
          (x : A) (y : A) ->
          prim (* x y) ==
            * (prim y) (prim x)
    record MultUnaryAntiDistributionHom
      (M1 : MultUnaryAntiDistribution)
      (M2 : MultUnaryAntiDistribution) :
      Set where
      constructor MultUnaryAntiDistributionHomC
      field
        hom : A M1 -> A M2
        pres-prim :
          (x1 : A M1) ->
          hom (prim M1 x1) ==
            prim M2 (hom x1)
        pres-* :
          (x1 : A M1) (x2 : A M1) ->
          hom (* M1 x1 x2) ==
            * M2 (hom x1) (hom x2)
    data MultUnaryAntiDistributionLang
      : Set where
      primL :
        MultUnaryAntiDistributionLang ->
        MultUnaryAntiDistributionLang
      *L :
        MultUnaryAntiDistributionLang ->
        MultUnaryAntiDistributionLang ->
        MultUnaryAntiDistributionLang
    record MultUnaryAntiDistributionProd
      : Set where
      constructor MultUnaryAntiDistributionProdC
      field
        AP : Set
        primP : Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        antidis_prim_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (*P xP yP) ==
            *P (primP yP) (primP xP)
    record MultUnaryAntiDistributionSig
      : Set where
      constructor MultUnaryAntiDistributionSigSigC
      field
        AS : Set
        primS : AS -> AS
        *S : AS -> AS -> AS
  
  module MultUnital where
    record MultUnital : Set where
      constructor MultUnitalC
      field
        A : Set
        1 : A
        * : A -> A -> A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
    record MultUnitalHom
      (M1 : MultUnital)
      (M2 : MultUnital) : Set where
      constructor MultUnitalHomC
      field
        hom : A M1 -> A M2
        pres-1 : hom (1 M1) == 1 M2
        pres-* :
          (x1 : A M1) (x2 : A M1) ->
          hom (* M1 x1 x2) ==
            * M2 (hom x1) (hom x2)
    data MultUnitalLang : Set where
      1L : MultUnitalLang
      *L :
        MultUnitalLang ->
        MultUnitalLang -> MultUnitalLang
    record MultUnitalProd
      : Set where
      constructor MultUnitalProdC
      field
        AP : Set
        1P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
    record MultUnitalSig : Set where
      constructor MultUnitalSigSigC
      field
        AS : Set
        1S : AS
        *S : AS -> AS -> AS
  
  module NearRing where
    record NearRing : Set where
      constructor NearRingC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record NearRingHom
      (N1 : NearRing)
      (N2 : NearRing) : Set where
      constructor NearRingHomC
      field
        hom : A N1 -> A N2
        pres-* :
          (x1 : A N1) (x2 : A N1) ->
          hom (* N1 x1 x2) ==
            * N2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A N1) (x2 : A N1) ->
          hom (+ N1 x1 x2) ==
            + N2 (hom x1) (hom x2)
        pres-0 : hom (0 N1) == 0 N2
        pres-neg :
          (x1 : A N1) ->
          hom (neg N1 x1) ==
            neg N2 (hom x1)
    data NearRingLang : Set where
      *L :
        NearRingLang ->
        NearRingLang -> NearRingLang
      +L :
        NearRingLang ->
        NearRingLang -> NearRingLang
      0L : NearRingLang
      negL :
        NearRingLang -> NearRingLang
    record NearRingProd : Set where
      constructor NearRingProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        negP : Prod AP AP -> Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        leftInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P xP (negP xP) == 0P
        rightInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P (negP xP) xP == 0P
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record NearRingSig : Set where
      constructor NearRingSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        0S : AS
        negS : AS -> AS
  
  module NearSemiring where
    record NearSemiring : Set where
      constructor NearSemiringC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record NearSemiringHom
      (N1 : NearSemiring)
      (N2 : NearSemiring) : Set where
      constructor NearSemiringHomC
      field
        hom : A N1 -> A N2
        pres-* :
          (x1 : A N1) (x2 : A N1) ->
          hom (* N1 x1 x2) ==
            * N2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A N1) (x2 : A N1) ->
          hom (+ N1 x1 x2) ==
            + N2 (hom x1) (hom x2)
    data NearSemiringLang
      : Set where
      *L :
        NearSemiringLang ->
        NearSemiringLang ->
        NearSemiringLang
      +L :
        NearSemiringLang ->
        NearSemiringLang ->
        NearSemiringLang
    record NearSemiringProd
      : Set where
      constructor NearSemiringProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record NearSemiringSig
      : Set where
      constructor NearSemiringSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  
  module NonDistributiveAddPreSemiring where
    record NonDistributiveAddPreSemiring
      : Set where
      constructor NonDistributiveAddPreSemiringC
      field
        A : Set
        + : A -> A -> A
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        * : A -> A -> A
    record NonDistributiveAddPreSemiringHom
      (N1 : NonDistributiveAddPreSemiring)
      (N2 : NonDistributiveAddPreSemiring) :
      Set where
      constructor NonDistributiveAddPreSemiringHomC
      field
        hom : A N1 -> A N2
        pres-+ :
          (x1 : A N1) (x2 : A N1) ->
          hom (+ N1 x1 x2) ==
            + N2 (hom x1) (hom x2)
        pres-* :
          (x1 : A N1) (x2 : A N1) ->
          hom (* N1 x1 x2) ==
            * N2 (hom x1) (hom x2)
    data NonDistributiveAddPreSemiringLang
      : Set where
      +L :
        NonDistributiveAddPreSemiringLang ->
        NonDistributiveAddPreSemiringLang ->
        NonDistributiveAddPreSemiringLang
      *L :
        NonDistributiveAddPreSemiringLang ->
        NonDistributiveAddPreSemiringLang ->
        NonDistributiveAddPreSemiringLang
    record NonDistributiveAddPreSemiringProd
      : Set where
      constructor NonDistributiveAddPreSemiringProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
    record NonDistributiveAddPreSemiringSig
      : Set where
      constructor NonDistributiveAddPreSemiringSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
        *S : AS -> AS -> AS
  
  module NonassociativeNondistributiveRing where
    record NonassociativeNondistributiveRing
      : Set where
      constructor NonassociativeNondistributiveRingC
      field
        A : Set
        * : A -> A -> A
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        inv : A -> A
        leftInverse_inv_op_1 :
          (x : A) -> * x (inv x) == 1
        rightInverse_inv_op_1 :
          (x : A) -> * (inv x) x == 1
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        + : A -> A -> A
    record NonassociativeNondistributiveRingHom
      (N1 : NonassociativeNondistributiveRing)
      (N2 : NonassociativeNondistributiveRing) :
      Set where
      constructor NonassociativeNondistributiveRingHomC
      field
        hom : A N1 -> A N2
        pres-* :
          (x1 : A N1) (x2 : A N1) ->
          hom (* N1 x1 x2) ==
            * N2 (hom x1) (hom x2)
        pres-1 : hom (1 N1) == 1 N2
        pres-inv :
          (x1 : A N1) ->
          hom (inv N1 x1) ==
            inv N2 (hom x1)
        pres-+ :
          (x1 : A N1) (x2 : A N1) ->
          hom (+ N1 x1 x2) ==
            + N2 (hom x1) (hom x2)
    data NonassociativeNondistributiveRingLang
      : Set where
      *L :
        NonassociativeNondistributiveRingLang ->
        NonassociativeNondistributiveRingLang ->
        NonassociativeNondistributiveRingLang
      1L :
        NonassociativeNondistributiveRingLang
      invL :
        NonassociativeNondistributiveRingLang ->
        NonassociativeNondistributiveRingLang
      +L :
        NonassociativeNondistributiveRingLang ->
        NonassociativeNondistributiveRingLang ->
        NonassociativeNondistributiveRingLang
    record NonassociativeNondistributiveRingProd
      : Set where
      constructor NonassociativeNondistributiveRingProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        invP : Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftInverse_inv_op_1P :
          (xP : Prod AP AP) ->
          *P xP (invP xP) == 1P
        rightInverse_inv_op_1P :
          (xP : Prod AP AP) ->
          *P (invP xP) xP == 1P
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
    record NonassociativeNondistributiveRingSig
      : Set where
      constructor NonassociativeNondistributiveRingSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        1S : AS
        invS : AS -> AS
        +S : AS -> AS -> AS
  
  module NonassociativeRing where
    record NonassociativeRing
      : Set where
      constructor NonassociativeRingC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        inv : A -> A
        leftInverse_inv_op_1 :
          (x : A) -> * x (inv x) == 1
        rightInverse_inv_op_1 :
          (x : A) -> * (inv x) x == 1
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record NonassociativeRingHom
      (N1 : NonassociativeRing)
      (N2 : NonassociativeRing) :
      Set where
      constructor NonassociativeRingHomC
      field
        hom : A N1 -> A N2
        pres-* :
          (x1 : A N1) (x2 : A N1) ->
          hom (* N1 x1 x2) ==
            * N2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A N1) (x2 : A N1) ->
          hom (+ N1 x1 x2) ==
            + N2 (hom x1) (hom x2)
        pres-1 : hom (1 N1) == 1 N2
        pres-inv :
          (x1 : A N1) ->
          hom (inv N1 x1) ==
            inv N2 (hom x1)
    data NonassociativeRingLang
      : Set where
      *L :
        NonassociativeRingLang ->
        NonassociativeRingLang ->
        NonassociativeRingLang
      +L :
        NonassociativeRingLang ->
        NonassociativeRingLang ->
        NonassociativeRingLang
      1L : NonassociativeRingLang
      invL :
        NonassociativeRingLang ->
        NonassociativeRingLang
    record NonassociativeRingProd
      : Set where
      constructor NonassociativeRingProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        invP : Prod AP AP -> Prod AP AP
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftInverse_inv_op_1P :
          (xP : Prod AP AP) ->
          *P xP (invP xP) == 1P
        rightInverse_inv_op_1P :
          (xP : Prod AP AP) ->
          *P (invP xP) xP == 1P
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record NonassociativeRingSig
      : Set where
      constructor NonassociativeRingSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        1S : AS
        invS : AS -> AS
  
  module NormalBand where
    record NormalBand : Set where
      constructor NormalBandC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        idempotent_op :
          (x : A) -> op x x == x
        middleCommute_* :
          (x : A) (y : A) (z : A) ->
          op (op (op x y) z) x ==
            op (op (op x z) y) x
    record NormalBandHom
      (N1 : NormalBand)
      (N2 : NormalBand) : Set where
      constructor NormalBandHomC
      field
        hom : A N1 -> A N2
        pres-op :
          (x1 : A N1) (x2 : A N1) ->
          hom (op N1 x1 x2) ==
            op N2 (hom x1) (hom x2)
    data NormalBandLang : Set where
      opL :
        NormalBandLang ->
        NormalBandLang -> NormalBandLang
    record NormalBandProd
      : Set where
      constructor NormalBandProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        idempotent_opP :
          (xP : Prod AP AP) ->
          opP xP xP == xP
        middleCommute_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP (opP xP yP) zP) xP ==
            opP (opP (opP xP zP) yP) xP
    record NormalBandSig : Set where
      constructor NormalBandSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module OrDeMorgran where
    record OrDeMorgran : Set where
      constructor OrDeMorgranC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        prim : A -> A
        orDeMorgan_+_*_prim :
          (x : A) (y : A) (z : A) ->
          prim (+ x y) ==
            * (prim x) (prim y)
    record OrDeMorgranHom
      (O1 : OrDeMorgran)
      (O2 : OrDeMorgran) : Set where
      constructor OrDeMorgranHomC
      field
        hom : A O1 -> A O2
        pres-* :
          (x1 : A O1) (x2 : A O1) ->
          hom (* O1 x1 x2) ==
            * O2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A O1) (x2 : A O1) ->
          hom (+ O1 x1 x2) ==
            + O2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A O1) ->
          hom (prim O1 x1) ==
            prim O2 (hom x1)
    data OrDeMorgranLang : Set where
      *L :
        OrDeMorgranLang ->
        OrDeMorgranLang ->
        OrDeMorgranLang
      +L :
        OrDeMorgranLang ->
        OrDeMorgranLang ->
        OrDeMorgranLang
      primL :
        OrDeMorgranLang ->
        OrDeMorgranLang
    record OrDeMorgranProd
      : Set where
      constructor OrDeMorgranProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        orDeMorgan_+_*_primP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          primP (+P xP yP) ==
            *P (primP xP) (primP yP)
    record OrDeMorgranSig
      : Set where
      constructor OrDeMorgranSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        primS : AS -> AS
  
  module Pointed where
    record Pointed : Set where
      constructor PointedC
      field
        A : Set
        e : A
    record PointedHom
      (P1 : Pointed) (P2 : Pointed) :
      Set where
      constructor PointedHomC
      field
        hom : A P1 -> A P2
        pres-e : hom (e P1) == e P2
    data PointedLang : Set where
      eL : PointedLang
    record PointedProd : Set where
      constructor PointedProdC
      field
        AP : Set
        eP : Prod AP AP
    record PointedSig : Set where
      constructor PointedSigSigC
      field
        AS : Set
        eS : AS
  
  module Pointed0Magma where
    record Pointed0Magma : Set where
      constructor Pointed0MagmaC
      field
        A : Set
        0 : A
        op : A -> A -> A
    record Pointed0MagmaHom
      (P1 : Pointed0Magma)
      (P2 : Pointed0Magma) : Set where
      constructor Pointed0MagmaHomC
      field
        hom : A P1 -> A P2
        pres-0 : hom (0 P1) == 0 P2
        pres-op :
          (x1 : A P1) (x2 : A P1) ->
          hom (op P1 x1 x2) ==
            op P2 (hom x1) (hom x2)
    data Pointed0MagmaLang
      : Set where
      0L : Pointed0MagmaLang
      opL :
        Pointed0MagmaLang ->
        Pointed0MagmaLang ->
        Pointed0MagmaLang
    record Pointed0MagmaProd
      : Set where
      constructor Pointed0MagmaProdC
      field
        AP : Set
        0P : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record Pointed0MagmaSig
      : Set where
      constructor Pointed0MagmaSigSigC
      field
        AS : Set
        0S : AS
        opS : AS -> AS -> AS
  
  module Pointed1Magma where
    record Pointed1Magma : Set where
      constructor Pointed1MagmaC
      field
        A : Set
        1 : A
        op : A -> A -> A
    record Pointed1MagmaHom
      (P1 : Pointed1Magma)
      (P2 : Pointed1Magma) : Set where
      constructor Pointed1MagmaHomC
      field
        hom : A P1 -> A P2
        pres-1 : hom (1 P1) == 1 P2
        pres-op :
          (x1 : A P1) (x2 : A P1) ->
          hom (op P1 x1 x2) ==
            op P2 (hom x1) (hom x2)
    data Pointed1MagmaLang
      : Set where
      1L : Pointed1MagmaLang
      opL :
        Pointed1MagmaLang ->
        Pointed1MagmaLang ->
        Pointed1MagmaLang
    record Pointed1MagmaProd
      : Set where
      constructor Pointed1MagmaProdC
      field
        AP : Set
        1P : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record Pointed1MagmaSig
      : Set where
      constructor Pointed1MagmaSigSigC
      field
        AS : Set
        1S : AS
        opS : AS -> AS -> AS
  
  module PointedInvolutiveMagma0Sig where
    record PointedInvolutiveMagma0Sig
      : Set where
      constructor PointedInvolutiveMagma0SigC
      field
        A : Set
        * : A -> A -> A
        prim : A -> A
        0 : A
    record PointedInvolutiveMagma0SigHom
      (P1 : PointedInvolutiveMagma0Sig)
      (P2 : PointedInvolutiveMagma0Sig) :
      Set where
      constructor PointedInvolutiveMagma0SigHomC
      field
        hom : A P1 -> A P2
        pres-* :
          (x1 : A P1) (x2 : A P1) ->
          hom (* P1 x1 x2) ==
            * P2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A P1) ->
          hom (prim P1 x1) ==
            prim P2 (hom x1)
        pres-0 : hom (0 P1) == 0 P2
    data PointedInvolutiveMagma0SigLang
      : Set where
      *L :
        PointedInvolutiveMagma0SigLang ->
        PointedInvolutiveMagma0SigLang ->
        PointedInvolutiveMagma0SigLang
      primL :
        PointedInvolutiveMagma0SigLang ->
        PointedInvolutiveMagma0SigLang
      0L :
        PointedInvolutiveMagma0SigLang
    record PointedInvolutiveMagma0SigProd
      : Set where
      constructor PointedInvolutiveMagma0SigProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        0P : Prod AP AP
    record PointedInvolutiveMagma0SigSig
      : Set where
      constructor PointedInvolutiveMagma0SigSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        primS : AS -> AS
        0S : AS
  
  module PointedMagma where
    record PointedMagma : Set where
      constructor PointedMagmaC
      field
        A : Set
        e : A
        op : A -> A -> A
    record PointedMagmaHom
      (P1 : PointedMagma)
      (P2 : PointedMagma) : Set where
      constructor PointedMagmaHomC
      field
        hom : A P1 -> A P2
        pres-e : hom (e P1) == e P2
        pres-op :
          (x1 : A P1) (x2 : A P1) ->
          hom (op P1 x1 x2) ==
            op P2 (hom x1) (hom x2)
    data PointedMagmaLang
      : Set where
      eL : PointedMagmaLang
      opL :
        PointedMagmaLang ->
        PointedMagmaLang ->
        PointedMagmaLang
    record PointedMagmaProd
      : Set where
      constructor PointedMagmaProdC
      field
        AP : Set
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record PointedMagmaSig
      : Set where
      constructor PointedMagmaSigSigC
      field
        AS : Set
        eS : AS
        opS : AS -> AS -> AS
  
  module PointedOne where
    record PointedOne : Set where
      constructor PointedOneC
      field
        A : Set
        1 : A
    record PointedOneHom
      (P1 : PointedOne)
      (P2 : PointedOne) : Set where
      constructor PointedOneHomC
      field
        hom : A P1 -> A P2
        pres-1 : hom (1 P1) == 1 P2
    data PointedOneLang : Set where
      1L : PointedOneLang
    record PointedOneProd
      : Set where
      constructor PointedOneProdC
      field
        AP : Set
        1P : Prod AP AP
    record PointedOneSig : Set where
      constructor PointedOneSigSigC
      field
        AS : Set
        1S : AS
  
  module PointedPlusMagma where
    record PointedPlusMagma
      : Set where
      constructor PointedPlusMagmaC
      field
        A : Set
        + : A -> A -> A
        e : A
    record PointedPlusMagmaHom
      (P1 : PointedPlusMagma)
      (P2 : PointedPlusMagma) :
      Set where
      constructor PointedPlusMagmaHomC
      field
        hom : A P1 -> A P2
        pres-+ :
          (x1 : A P1) (x2 : A P1) ->
          hom (+ P1 x1 x2) ==
            + P2 (hom x1) (hom x2)
        pres-e : hom (e P1) == e P2
    data PointedPlusMagmaLang
      : Set where
      +L :
        PointedPlusMagmaLang ->
        PointedPlusMagmaLang ->
        PointedPlusMagmaLang
      eL : PointedPlusMagmaLang
    record PointedPlusMagmaProd
      : Set where
      constructor PointedPlusMagmaProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
    record PointedPlusMagmaSig
      : Set where
      constructor PointedPlusMagmaSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
        eS : AS
  
  module PointedSemigroup where
    record PointedSemigroup
      : Set where
      constructor PointedSemigroupC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        e : A
    record PointedSemigroupHom
      (P1 : PointedSemigroup)
      (P2 : PointedSemigroup) :
      Set where
      constructor PointedSemigroupHomC
      field
        hom : A P1 -> A P2
        pres-op :
          (x1 : A P1) (x2 : A P1) ->
          hom (op P1 x1 x2) ==
            op P2 (hom x1) (hom x2)
        pres-e : hom (e P1) == e P2
    data PointedSemigroupLang
      : Set where
      opL :
        PointedSemigroupLang ->
        PointedSemigroupLang ->
        PointedSemigroupLang
      eL : PointedSemigroupLang
    record PointedSemigroupProd
      : Set where
      constructor PointedSemigroupProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
    record PointedSemigroupSig
      : Set where
      constructor PointedSemigroupSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        eS : AS
  
  module PointedSteinerMagma where
    record PointedSteinerMagma
      : Set where
      constructor PointedSteinerMagmaC
      field
        A : Set
        op : A -> A -> A
        e : A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
        antiAbsorbent :
          (x : A) (y : A) ->
          op x (op x y) == y
    record PointedSteinerMagmaHom
      (P1 : PointedSteinerMagma)
      (P2 : PointedSteinerMagma) :
      Set where
      constructor PointedSteinerMagmaHomC
      field
        hom : A P1 -> A P2
        pres-op :
          (x1 : A P1) (x2 : A P1) ->
          hom (op P1 x1 x2) ==
            op P2 (hom x1) (hom x2)
        pres-e : hom (e P1) == e P2
    data PointedSteinerMagmaLang
      : Set where
      opL :
        PointedSteinerMagmaLang ->
        PointedSteinerMagmaLang ->
        PointedSteinerMagmaLang
      eL : PointedSteinerMagmaLang
    record PointedSteinerMagmaProd
      : Set where
      constructor PointedSteinerMagmaProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
        antiAbsorbentP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (opP xP yP) == yP
    record PointedSteinerMagmaSig
      : Set where
      constructor PointedSteinerMagmaSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        eS : AS
  
  module PointedTimesMagma where
    record PointedTimesMagma
      : Set where
      constructor PointedTimesMagmaC
      field
        A : Set
        * : A -> A -> A
        e : A
    record PointedTimesMagmaHom
      (P1 : PointedTimesMagma)
      (P2 : PointedTimesMagma) :
      Set where
      constructor PointedTimesMagmaHomC
      field
        hom : A P1 -> A P2
        pres-* :
          (x1 : A P1) (x2 : A P1) ->
          hom (* P1 x1 x2) ==
            * P2 (hom x1) (hom x2)
        pres-e : hom (e P1) == e P2
    data PointedTimesMagmaLang
      : Set where
      *L :
        PointedTimesMagmaLang ->
        PointedTimesMagmaLang ->
        PointedTimesMagmaLang
      eL : PointedTimesMagmaLang
    record PointedTimesMagmaProd
      : Set where
      constructor PointedTimesMagmaProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
    record PointedTimesMagmaSig
      : Set where
      constructor PointedTimesMagmaSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        eS : AS
  
  module PointedTimesZeroMagma where
    record PointedTimesZeroMagma
      : Set where
      constructor PointedTimesZeroMagmaC
      field
        A : Set
        0 : A
        * : A -> A -> A
    record PointedTimesZeroMagmaHom
      (P1 : PointedTimesZeroMagma)
      (P2 : PointedTimesZeroMagma) :
      Set where
      constructor PointedTimesZeroMagmaHomC
      field
        hom : A P1 -> A P2
        pres-0 : hom (0 P1) == 0 P2
        pres-* :
          (x1 : A P1) (x2 : A P1) ->
          hom (* P1 x1 x2) ==
            * P2 (hom x1) (hom x2)
    data PointedTimesZeroMagmaLang
      : Set where
      0L : PointedTimesZeroMagmaLang
      *L :
        PointedTimesZeroMagmaLang ->
        PointedTimesZeroMagmaLang ->
        PointedTimesZeroMagmaLang
    record PointedTimesZeroMagmaProd
      : Set where
      constructor PointedTimesZeroMagmaProdC
      field
        AP : Set
        0P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record PointedTimesZeroMagmaSig
      : Set where
      constructor PointedTimesZeroMagmaSigSigC
      field
        AS : Set
        0S : AS
        *S : AS -> AS -> AS
  
  module PointedUnarySystem where
    record PointedUnarySystem
      : Set where
      constructor PointedUnarySystemC
      field
        A : Set
        prim : A -> A
        e : A
    record PointedUnarySystemHom
      (P1 : PointedUnarySystem)
      (P2 : PointedUnarySystem) :
      Set where
      constructor PointedUnarySystemHomC
      field
        hom : A P1 -> A P2
        pres-prim :
          (x1 : A P1) ->
          hom (prim P1 x1) ==
            prim P2 (hom x1)
        pres-e : hom (e P1) == e P2
    data PointedUnarySystemLang
      : Set where
      primL :
        PointedUnarySystemLang ->
        PointedUnarySystemLang
      eL : PointedUnarySystemLang
    record PointedUnarySystemProd
      : Set where
      constructor PointedUnarySystemProdC
      field
        AP : Set
        primP : Prod AP AP -> Prod AP AP
        eP : Prod AP AP
    record PointedUnarySystemSig
      : Set where
      constructor PointedUnarySystemSigSigC
      field
        AS : Set
        primS : AS -> AS
        eS : AS
  
  module PointedZero where
    record PointedZero : Set where
      constructor PointedZeroC
      field
        A : Set
        0 : A
    record PointedZeroHom
      (P1 : PointedZero)
      (P2 : PointedZero) : Set where
      constructor PointedZeroHomC
      field
        hom : A P1 -> A P2
        pres-0 : hom (0 P1) == 0 P2
    data PointedZeroLang : Set where
      0L : PointedZeroLang
    record PointedZeroProd
      : Set where
      constructor PointedZeroProdC
      field
        AP : Set
        0P : Prod AP AP
    record PointedZeroSig
      : Set where
      constructor PointedZeroSigSigC
      field
        AS : Set
        0S : AS
  
  module PreSemiring where
    record PreSemiring : Set where
      constructor PreSemiringC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record PreSemiringHom
      (P1 : PreSemiring)
      (P2 : PreSemiring) : Set where
      constructor PreSemiringHomC
      field
        hom : A P1 -> A P2
        pres-* :
          (x1 : A P1) (x2 : A P1) ->
          hom (* P1 x1 x2) ==
            * P2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A P1) (x2 : A P1) ->
          hom (+ P1 x1 x2) ==
            + P2 (hom x1) (hom x2)
    data PreSemiringLang : Set where
      *L :
        PreSemiringLang ->
        PreSemiringLang ->
        PreSemiringLang
      +L :
        PreSemiringLang ->
        PreSemiringLang ->
        PreSemiringLang
    record PreSemiringProd
      : Set where
      constructor PreSemiringProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record PreSemiringSig
      : Set where
      constructor PreSemiringSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  
  module PrimAdditiveGroup where
    record PrimAdditiveGroup
      : Set where
      constructor PrimAdditiveGroupC
      field
        A : Set
        0_ : A
        *_ : A -> A -> A
        lunit_0_ :
          (x : A) -> *_ 0_ x == x
        runit_0_ :
          (x : A) -> *_ x 0_ == x
        associative_*_ :
          (x : A) (y : A) (z : A) ->
          *_ (*_ x y) z == *_ x (*_ y z)
        inv_ : A -> A
        leftInverse_inv_op_0_ :
          (x : A) -> *_ x (inv_ x) == 0_
        rightInverse_inv_op_0_ :
          (x : A) -> *_ (inv_ x) x == 0_
        commutative_*_ :
          (x : A) (y : A) ->
          *_ x y == *_ y x
    record PrimAdditiveGroupHom
      (P1 : PrimAdditiveGroup)
      (P2 : PrimAdditiveGroup) :
      Set where
      constructor PrimAdditiveGroupHomC
      field
        hom : A P1 -> A P2
        pres-0_ : hom (0_ P1) == 0_ P2
        pres-*_ :
          (x1 : A P1) (x2 : A P1) ->
          hom (*_ P1 x1 x2) ==
            *_ P2 (hom x1) (hom x2)
        pres-inv_ :
          (x1 : A P1) ->
          hom (inv_ P1 x1) ==
            inv_ P2 (hom x1)
    data PrimAdditiveGroupLang
      : Set where
      0_L : PrimAdditiveGroupLang
      *_L :
        PrimAdditiveGroupLang ->
        PrimAdditiveGroupLang ->
        PrimAdditiveGroupLang
      inv_L :
        PrimAdditiveGroupLang ->
        PrimAdditiveGroupLang
    record PrimAdditiveGroupProd
      : Set where
      constructor PrimAdditiveGroupProdC
      field
        AP : Set
        0_P : Prod AP AP
        *_P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        inv_P : Prod AP AP -> Prod AP AP
        lunit_0_P :
          (xP : Prod AP AP) ->
          *_P 0_P xP == xP
        runit_0_P :
          (xP : Prod AP AP) ->
          *_P xP 0_P == xP
        associative_*_P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *_P (*_P xP yP) zP ==
            *_P xP (*_P yP zP)
        leftInverse_inv_op_0_P :
          (xP : Prod AP AP) ->
          *_P xP (inv_P xP) == 0_P
        rightInverse_inv_op_0_P :
          (xP : Prod AP AP) ->
          *_P (inv_P xP) xP == 0_P
        commutative_*_P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *_P xP yP == *_P yP xP
    record PrimAdditiveGroupSig
      : Set where
      constructor PrimAdditiveGroupSigSigC
      field
        AS : Set
        0_S : AS
        *_S : AS -> AS -> AS
        inv_S : AS -> AS
  
  module PrimRingoidSig where
    record PrimRingoidSig
      : Set where
      constructor PrimRingoidSigC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        prim : A -> A
    record PrimRingoidSigHom
      (P1 : PrimRingoidSig)
      (P2 : PrimRingoidSig) :
      Set where
      constructor PrimRingoidSigHomC
      field
        hom : A P1 -> A P2
        pres-* :
          (x1 : A P1) (x2 : A P1) ->
          hom (* P1 x1 x2) ==
            * P2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A P1) (x2 : A P1) ->
          hom (+ P1 x1 x2) ==
            + P2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A P1) ->
          hom (prim P1 x1) ==
            prim P2 (hom x1)
    data PrimRingoidSigLang
      : Set where
      *L :
        PrimRingoidSigLang ->
        PrimRingoidSigLang ->
        PrimRingoidSigLang
      +L :
        PrimRingoidSigLang ->
        PrimRingoidSigLang ->
        PrimRingoidSigLang
      primL :
        PrimRingoidSigLang ->
        PrimRingoidSigLang
    record PrimRingoidSigProd
      : Set where
      constructor PrimRingoidSigProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
    record PrimRingoidSigSig
      : Set where
      constructor PrimRingoidSigSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        primS : AS -> AS
  
  module PseudoInverse where
    record PseudoInverse : Set where
      constructor PseudoInverseC
      field
        A : Set
        inv : A -> A
        op : A -> A -> A
        quasiInverse_inv_op_e :
          (x : A) ->
          op (op x (inv x)) x == x
    record PseudoInverseHom
      (P1 : PseudoInverse)
      (P2 : PseudoInverse) : Set where
      constructor PseudoInverseHomC
      field
        hom : A P1 -> A P2
        pres-inv :
          (x1 : A P1) ->
          hom (inv P1 x1) ==
            inv P2 (hom x1)
        pres-op :
          (x1 : A P1) (x2 : A P1) ->
          hom (op P1 x1 x2) ==
            op P2 (hom x1) (hom x2)
    data PseudoInverseLang
      : Set where
      invL :
        PseudoInverseLang ->
        PseudoInverseLang
      opL :
        PseudoInverseLang ->
        PseudoInverseLang ->
        PseudoInverseLang
    record PseudoInverseProd
      : Set where
      constructor PseudoInverseProdC
      field
        AP : Set
        invP : Prod AP AP -> Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        quasiInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP (opP xP (invP xP)) xP == xP
    record PseudoInverseSig
      : Set where
      constructor PseudoInverseSigSigC
      field
        AS : Set
        invS : AS -> AS
        opS : AS -> AS -> AS
  
  module PseudoInverseSig where
    record PseudoInverseSig
      : Set where
      constructor PseudoInverseSigC
      field
        A : Set
        inv : A -> A
        op : A -> A -> A
    record PseudoInverseSigHom
      (P1 : PseudoInverseSig)
      (P2 : PseudoInverseSig) :
      Set where
      constructor PseudoInverseSigHomC
      field
        hom : A P1 -> A P2
        pres-inv :
          (x1 : A P1) ->
          hom (inv P1 x1) ==
            inv P2 (hom x1)
        pres-op :
          (x1 : A P1) (x2 : A P1) ->
          hom (op P1 x1 x2) ==
            op P2 (hom x1) (hom x2)
    data PseudoInverseSigLang
      : Set where
      invL :
        PseudoInverseSigLang ->
        PseudoInverseSigLang
      opL :
        PseudoInverseSigLang ->
        PseudoInverseSigLang ->
        PseudoInverseSigLang
    record PseudoInverseSigProd
      : Set where
      constructor PseudoInverseSigProdC
      field
        AP : Set
        invP : Prod AP AP -> Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record PseudoInverseSigSig
      : Set where
      constructor PseudoInverseSigSigSigC
      field
        AS : Set
        invS : AS -> AS
        opS : AS -> AS -> AS
  
  module PseudoInvolution where
    record PseudoInvolution
      : Set where
      constructor PseudoInvolutionC
      field
        A : Set
        inv : A -> A
        op : A -> A -> A
        quasiRightInverse_inv_op_e :
          (x : A) ->
          op (op (inv x) x) (inv x) ==
            inv x
    record PseudoInvolutionHom
      (P1 : PseudoInvolution)
      (P2 : PseudoInvolution) :
      Set where
      constructor PseudoInvolutionHomC
      field
        hom : A P1 -> A P2
        pres-inv :
          (x1 : A P1) ->
          hom (inv P1 x1) ==
            inv P2 (hom x1)
        pres-op :
          (x1 : A P1) (x2 : A P1) ->
          hom (op P1 x1 x2) ==
            op P2 (hom x1) (hom x2)
    data PseudoInvolutionLang
      : Set where
      invL :
        PseudoInvolutionLang ->
        PseudoInvolutionLang
      opL :
        PseudoInvolutionLang ->
        PseudoInvolutionLang ->
        PseudoInvolutionLang
    record PseudoInvolutionProd
      : Set where
      constructor PseudoInvolutionProdC
      field
        AP : Set
        invP : Prod AP AP -> Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        quasiRightInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP (opP (invP xP) xP)
            (invP xP) == invP xP
    record PseudoInvolutionSig
      : Set where
      constructor PseudoInvolutionSigSigC
      field
        AS : Set
        invS : AS -> AS
        opS : AS -> AS -> AS
  
  module Quandle where
    record Quandle : Set where
      constructor QuandleC
      field
        A : Set
        |> : A -> A -> A
        <| : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
        leftInverse :
          (x : A) (y : A) ->
          <| (|> x y) x == y
        rightInverse :
          (x : A) (y : A) ->
          |> x (<| y x) == y
        idempotent_|> :
          (x : A) -> |> x x == x
        idempotent_<| :
          (x : A) -> <| x x == x
    record QuandleHom
      (Q1 : Quandle) (Q2 : Quandle) :
      Set where
      constructor QuandleHomC
      field
        hom : A Q1 -> A Q2
        pres-|> :
          (x1 : A Q1) (x2 : A Q1) ->
          hom (|> Q1 x1 x2) ==
            |> Q2 (hom x1) (hom x2)
        pres-<| :
          (x1 : A Q1) (x2 : A Q1) ->
          hom (<| Q1 x1 x2) ==
            <| Q2 (hom x1) (hom x2)
    data QuandleLang : Set where
      |>L :
        QuandleLang ->
        QuandleLang -> QuandleLang
      <|L :
        QuandleLang ->
        QuandleLang -> QuandleLang
    record QuandleProd : Set where
      constructor QuandleProdC
      field
        AP : Set
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          |>P xP (|>P yP zP) ==
            |>P (|>P xP yP) (|>P xP zP)
        rightDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          <|P (<|P yP zP) xP ==
            <|P (<|P yP xP) (<|P zP xP)
        leftInverseP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          <|P (|>P xP yP) xP == yP
        rightInverseP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          |>P xP (<|P yP xP) == yP
        idempotent_|>P :
          (xP : Prod AP AP) ->
          |>P xP xP == xP
        idempotent_<|P :
          (xP : Prod AP AP) ->
          <|P xP xP == xP
    record QuandleSig : Set where
      constructor QuandleSigSigC
      field
        AS : Set
        |>S : AS -> AS -> AS
        <|S : AS -> AS -> AS
  
  module QuasiGroup where
    record QuasiGroup : Set where
      constructor QuasiGroupC
      field
        A : Set
        op : A -> A -> A
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
        rinv : A -> A -> A
        rightCancel :
          (x : A) (y : A) ->
          op (rinv y x) x == y
        rightCancelOp :
          (x : A) (y : A) ->
          rinv (op y x) x == y
    record QuasiGroupHom
      (Q1 : QuasiGroup)
      (Q2 : QuasiGroup) : Set where
      constructor QuasiGroupHomC
      field
        hom : A Q1 -> A Q2
        pres-op :
          (x1 : A Q1) (x2 : A Q1) ->
          hom (op Q1 x1 x2) ==
            op Q2 (hom x1) (hom x2)
        pres-linv :
          (x1 : A Q1) (x2 : A Q1) ->
          hom (linv Q1 x1 x2) ==
            linv Q2 (hom x1) (hom x2)
        pres-rinv :
          (x1 : A Q1) (x2 : A Q1) ->
          hom (rinv Q1 x1 x2) ==
            rinv Q2 (hom x1) (hom x2)
    data QuasiGroupLang : Set where
      opL :
        QuasiGroupLang ->
        QuasiGroupLang -> QuasiGroupLang
      linvL :
        QuasiGroupLang ->
        QuasiGroupLang -> QuasiGroupLang
      rinvL :
        QuasiGroupLang ->
        QuasiGroupLang -> QuasiGroupLang
    record QuasiGroupProd
      : Set where
      constructor QuasiGroupProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        linvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rinvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (linvP xP yP) == yP
        lefCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          linvP xP (opP xP yP) == yP
        rightCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP (rinvP yP xP) xP == yP
        rightCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          rinvP (opP yP xP) xP == yP
    record QuasiGroupSig : Set where
      constructor QuasiGroupSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        linvS : AS -> AS -> AS
        rinvS : AS -> AS -> AS
  
  module QuasiInverse where
    record QuasiInverse : Set where
      constructor QuasiInverseC
      field
        A : Set
        inv : A -> A
        op : A -> A -> A
        quasiInverse_inv_op_e :
          (x : A) ->
          op (op x (inv x)) x == x
        quasiRightInverse_inv_op_e :
          (x : A) ->
          op (op (inv x) x) (inv x) ==
            inv x
    record QuasiInverseHom
      (Q1 : QuasiInverse)
      (Q2 : QuasiInverse) : Set where
      constructor QuasiInverseHomC
      field
        hom : A Q1 -> A Q2
        pres-inv :
          (x1 : A Q1) ->
          hom (inv Q1 x1) ==
            inv Q2 (hom x1)
        pres-op :
          (x1 : A Q1) (x2 : A Q1) ->
          hom (op Q1 x1 x2) ==
            op Q2 (hom x1) (hom x2)
    data QuasiInverseLang
      : Set where
      invL :
        QuasiInverseLang ->
        QuasiInverseLang
      opL :
        QuasiInverseLang ->
        QuasiInverseLang ->
        QuasiInverseLang
    record QuasiInverseProd
      : Set where
      constructor QuasiInverseProdC
      field
        AP : Set
        invP : Prod AP AP -> Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        quasiInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP (opP xP (invP xP)) xP == xP
        quasiRightInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP (opP (invP xP) xP)
            (invP xP) == invP xP
    record QuasiInverseSig
      : Set where
      constructor QuasiInverseSigSigC
      field
        AS : Set
        invS : AS -> AS
        opS : AS -> AS -> AS
  
  module Rack where
    record Rack : Set where
      constructor RackC
      field
        A : Set
        |> : A -> A -> A
        <| : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
        leftInverse :
          (x : A) (y : A) ->
          <| (|> x y) x == y
        rightInverse :
          (x : A) (y : A) ->
          |> x (<| y x) == y
    record RackHom
      (R1 : Rack) (R2 : Rack) :
      Set where
      constructor RackHomC
      field
        hom : A R1 -> A R2
        pres-|> :
          (x1 : A R1) (x2 : A R1) ->
          hom (|> R1 x1 x2) ==
            |> R2 (hom x1) (hom x2)
        pres-<| :
          (x1 : A R1) (x2 : A R1) ->
          hom (<| R1 x1 x2) ==
            <| R2 (hom x1) (hom x2)
    data RackLang : Set where
      |>L :
        RackLang -> RackLang -> RackLang
      <|L :
        RackLang -> RackLang -> RackLang
    record RackProd : Set where
      constructor RackProdC
      field
        AP : Set
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          |>P xP (|>P yP zP) ==
            |>P (|>P xP yP) (|>P xP zP)
        rightDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          <|P (<|P yP zP) xP ==
            <|P (<|P yP xP) (<|P zP xP)
        leftInverseP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          <|P (|>P xP yP) xP == yP
        rightInverseP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          |>P xP (<|P yP xP) == yP
    record RackSig : Set where
      constructor RackSigSigC
      field
        AS : Set
        |>S : AS -> AS -> AS
        <|S : AS -> AS -> AS
  
  module RectangularBand where
    record RectangularBand
      : Set where
      constructor RectangularBandC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        idempotent_op :
          (x : A) -> op x x == x
        middleCommute_* :
          (x : A) (y : A) (z : A) ->
          op (op (op x y) z) x ==
            op (op (op x z) y) x
    record RectangularBandHom
      (R1 : RectangularBand)
      (R2 : RectangularBand) :
      Set where
      constructor RectangularBandHomC
      field
        hom : A R1 -> A R2
        pres-op :
          (x1 : A R1) (x2 : A R1) ->
          hom (op R1 x1 x2) ==
            op R2 (hom x1) (hom x2)
    data RectangularBandLang
      : Set where
      opL :
        RectangularBandLang ->
        RectangularBandLang ->
        RectangularBandLang
    record RectangularBandProd
      : Set where
      constructor RectangularBandProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        idempotent_opP :
          (xP : Prod AP AP) ->
          opP xP xP == xP
        middleCommute_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP (opP xP yP) zP) xP ==
            opP (opP (opP xP zP) yP) xP
    record RectangularBandSig
      : Set where
      constructor RectangularBandSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module RegularSemigroup where
    record RegularSemigroup
      : Set where
      constructor RegularSemigroupC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        inv : A -> A
        quasiInverse_inv_op_e :
          (x : A) ->
          op (op x (inv x)) x == x
    record RegularSemigroupHom
      (R1 : RegularSemigroup)
      (R2 : RegularSemigroup) :
      Set where
      constructor RegularSemigroupHomC
      field
        hom : A R1 -> A R2
        pres-op :
          (x1 : A R1) (x2 : A R1) ->
          hom (op R1 x1 x2) ==
            op R2 (hom x1) (hom x2)
        pres-inv :
          (x1 : A R1) ->
          hom (inv R1 x1) ==
            inv R2 (hom x1)
    data RegularSemigroupLang
      : Set where
      opL :
        RegularSemigroupLang ->
        RegularSemigroupLang ->
        RegularSemigroupLang
      invL :
        RegularSemigroupLang ->
        RegularSemigroupLang
    record RegularSemigroupProd
      : Set where
      constructor RegularSemigroupProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        invP : Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        quasiInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP (opP xP (invP xP)) xP == xP
    record RegularSemigroupSig
      : Set where
      constructor RegularSemigroupSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        invS : AS -> AS
  
  module Right0 where
    record Right0 : Set where
      constructor Right0C
      field
        A : Set
        0 : A
        op : A -> A -> A
        rightZero_op_0 :
          (x : A) -> op x 0 == 0
    record Right0Hom
      (R1 : Right0) (R2 : Right0) :
      Set where
      constructor Right0HomC
      field
        hom : A R1 -> A R2
        pres-0 : hom (0 R1) == 0 R2
        pres-op :
          (x1 : A R1) (x2 : A R1) ->
          hom (op R1 x1 x2) ==
            op R2 (hom x1) (hom x2)
    data Right0Lang : Set where
      0L : Right0Lang
      opL :
        Right0Lang ->
        Right0Lang -> Right0Lang
    record Right0Prod : Set where
      constructor Right0ProdC
      field
        AP : Set
        0P : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightZero_op_0P :
          (xP : Prod AP AP) ->
          opP xP 0P == 0P
    record Right0Sig : Set where
      constructor Right0SigSigC
      field
        AS : Set
        0S : AS
        opS : AS -> AS -> AS
  
  module RightBiMagma where
    record RightBiMagma : Set where
      constructor RightBiMagmaC
      field
        A : Set
        op : A -> A -> A
        rinv : A -> A -> A
    record RightBiMagmaHom
      (R1 : RightBiMagma)
      (R2 : RightBiMagma) : Set where
      constructor RightBiMagmaHomC
      field
        hom : A R1 -> A R2
        pres-op :
          (x1 : A R1) (x2 : A R1) ->
          hom (op R1 x1 x2) ==
            op R2 (hom x1) (hom x2)
        pres-rinv :
          (x1 : A R1) (x2 : A R1) ->
          hom (rinv R1 x1 x2) ==
            rinv R2 (hom x1) (hom x2)
    data RightBiMagmaLang
      : Set where
      opL :
        RightBiMagmaLang ->
        RightBiMagmaLang ->
        RightBiMagmaLang
      rinvL :
        RightBiMagmaLang ->
        RightBiMagmaLang ->
        RightBiMagmaLang
    record RightBiMagmaProd
      : Set where
      constructor RightBiMagmaProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rinvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record RightBiMagmaSig
      : Set where
      constructor RightBiMagmaSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        rinvS : AS -> AS -> AS
  
  module RightBinaryInverse where
    record RightBinaryInverse
      : Set where
      constructor RightBinaryInverseC
      field
        A : Set
        |> : A -> A -> A
        <| : A -> A -> A
        rightInverse :
          (x : A) (y : A) ->
          |> x (<| y x) == y
    record RightBinaryInverseHom
      (R1 : RightBinaryInverse)
      (R2 : RightBinaryInverse) :
      Set where
      constructor RightBinaryInverseHomC
      field
        hom : A R1 -> A R2
        pres-|> :
          (x1 : A R1) (x2 : A R1) ->
          hom (|> R1 x1 x2) ==
            |> R2 (hom x1) (hom x2)
        pres-<| :
          (x1 : A R1) (x2 : A R1) ->
          hom (<| R1 x1 x2) ==
            <| R2 (hom x1) (hom x2)
    data RightBinaryInverseLang
      : Set where
      |>L :
        RightBinaryInverseLang ->
        RightBinaryInverseLang ->
        RightBinaryInverseLang
      <|L :
        RightBinaryInverseLang ->
        RightBinaryInverseLang ->
        RightBinaryInverseLang
    record RightBinaryInverseProd
      : Set where
      constructor RightBinaryInverseProdC
      field
        AP : Set
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightInverseP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          |>P xP (<|P yP xP) == yP
    record RightBinaryInverseSig
      : Set where
      constructor RightBinaryInverseSigSigC
      field
        AS : Set
        |>S : AS -> AS -> AS
        <|S : AS -> AS -> AS
  
  module RightCancellative where
    record RightCancellative
      : Set where
      constructor RightCancellativeC
      field
        A : Set
        op : A -> A -> A
        rinv : A -> A -> A
        rightCancel :
          (x : A) (y : A) ->
          op (rinv y x) x == y
    record RightCancellativeHom
      (R1 : RightCancellative)
      (R2 : RightCancellative) :
      Set where
      constructor RightCancellativeHomC
      field
        hom : A R1 -> A R2
        pres-op :
          (x1 : A R1) (x2 : A R1) ->
          hom (op R1 x1 x2) ==
            op R2 (hom x1) (hom x2)
        pres-rinv :
          (x1 : A R1) (x2 : A R1) ->
          hom (rinv R1 x1 x2) ==
            rinv R2 (hom x1) (hom x2)
    data RightCancellativeLang
      : Set where
      opL :
        RightCancellativeLang ->
        RightCancellativeLang ->
        RightCancellativeLang
      rinvL :
        RightCancellativeLang ->
        RightCancellativeLang ->
        RightCancellativeLang
    record RightCancellativeProd
      : Set where
      constructor RightCancellativeProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rinvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP (rinvP yP xP) xP == yP
    record RightCancellativeSig
      : Set where
      constructor RightCancellativeSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        rinvS : AS -> AS -> AS
  
  module RightCancellativeMagma where
    record RightCancellativeMagma
      : Set where
      constructor RightCancellativeMagmaC
      field
        A : Set
        op : A -> A -> A
        rightCancellative :
          (x : A) (y : A) (z : A) ->
          op x z == op y z -> x == y
    record RightCancellativeMagmaHom
      (R1 : RightCancellativeMagma)
      (R2 : RightCancellativeMagma) :
      Set where
      constructor RightCancellativeMagmaHomC
      field
        hom : A R1 -> A R2
        pres-op :
          (x1 : A R1) (x2 : A R1) ->
          hom (op R1 x1 x2) ==
            op R2 (hom x1) (hom x2)
    data RightCancellativeMagmaLang
      : Set where
      opL :
        RightCancellativeMagmaLang ->
        RightCancellativeMagmaLang ->
        RightCancellativeMagmaLang
    record RightCancellativeMagmaProd
      : Set where
      constructor RightCancellativeMagmaProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP xP zP == opP yP zP ->
          xP == yP
    record RightCancellativeMagmaSig
      : Set where
      constructor RightCancellativeMagmaSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module RightCancellativeOp where
    record RightCancellativeOp
      : Set where
      constructor RightCancellativeOpC
      field
        A : Set
        op : A -> A -> A
        rinv : A -> A -> A
        rightCancelOp :
          (x : A) (y : A) ->
          rinv (op y x) x == y
    record RightCancellativeOpHom
      (R1 : RightCancellativeOp)
      (R2 : RightCancellativeOp) :
      Set where
      constructor RightCancellativeOpHomC
      field
        hom : A R1 -> A R2
        pres-op :
          (x1 : A R1) (x2 : A R1) ->
          hom (op R1 x1 x2) ==
            op R2 (hom x1) (hom x2)
        pres-rinv :
          (x1 : A R1) (x2 : A R1) ->
          hom (rinv R1 x1 x2) ==
            rinv R2 (hom x1) (hom x2)
    data RightCancellativeOpLang
      : Set where
      opL :
        RightCancellativeOpLang ->
        RightCancellativeOpLang ->
        RightCancellativeOpLang
      rinvL :
        RightCancellativeOpLang ->
        RightCancellativeOpLang ->
        RightCancellativeOpLang
    record RightCancellativeOpProd
      : Set where
      constructor RightCancellativeOpProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rinvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          rinvP (opP yP xP) xP == yP
    record RightCancellativeOpSig
      : Set where
      constructor RightCancellativeOpSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        rinvS : AS -> AS -> AS
  
  module RightCancellativeSemigroup where
    record RightCancellativeSemigroup
      : Set where
      constructor RightCancellativeSemigroupC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        rightCancellative :
          (x : A) (y : A) (z : A) ->
          op x z == op y z -> x == y
    record RightCancellativeSemigroupHom
      (R1 : RightCancellativeSemigroup)
      (R2 : RightCancellativeSemigroup) :
      Set where
      constructor RightCancellativeSemigroupHomC
      field
        hom : A R1 -> A R2
        pres-op :
          (x1 : A R1) (x2 : A R1) ->
          hom (op R1 x1 x2) ==
            op R2 (hom x1) (hom x2)
    data RightCancellativeSemigroupLang
      : Set where
      opL :
        RightCancellativeSemigroupLang ->
        RightCancellativeSemigroupLang ->
        RightCancellativeSemigroupLang
    record RightCancellativeSemigroupProd
      : Set where
      constructor RightCancellativeSemigroupProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        rightCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP xP zP == opP yP zP ->
          xP == yP
    record RightCancellativeSemigroupSig
      : Set where
      constructor RightCancellativeSemigroupSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module RightDistributiveMagma where
    record RightDistributiveMagma
      : Set where
      constructor RightDistributiveMagmaC
      field
        A : Set
        op : A -> A -> A
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          op (op y z) x ==
            op (op y x) (op z x)
    record RightDistributiveMagmaHom
      (R1 : RightDistributiveMagma)
      (R2 : RightDistributiveMagma) :
      Set where
      constructor RightDistributiveMagmaHomC
      field
        hom : A R1 -> A R2
        pres-op :
          (x1 : A R1) (x2 : A R1) ->
          hom (op R1 x1 x2) ==
            op R2 (hom x1) (hom x2)
    data RightDistributiveMagmaLang
      : Set where
      opL :
        RightDistributiveMagmaLang ->
        RightDistributiveMagmaLang ->
        RightDistributiveMagmaLang
    record RightDistributiveMagmaProd
      : Set where
      constructor RightDistributiveMagmaProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP yP zP) xP ==
            opP (opP yP xP) (opP zP xP)
    record RightDistributiveMagmaSig
      : Set where
      constructor RightDistributiveMagmaSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module RightIdempotence where
    record RightIdempotence
      : Set where
      constructor RightIdempotenceC
      field
        A : Set
        <| : A -> A -> A
        idempotent_<| :
          (x : A) -> <| x x == x
    record RightIdempotenceHom
      (R1 : RightIdempotence)
      (R2 : RightIdempotence) :
      Set where
      constructor RightIdempotenceHomC
      field
        hom : A R1 -> A R2
        pres-<| :
          (x1 : A R1) (x2 : A R1) ->
          hom (<| R1 x1 x2) ==
            <| R2 (hom x1) (hom x2)
    data RightIdempotenceLang
      : Set where
      <|L :
        RightIdempotenceLang ->
        RightIdempotenceLang ->
        RightIdempotenceLang
    record RightIdempotenceProd
      : Set where
      constructor RightIdempotenceProdC
      field
        AP : Set
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        idempotent_<|P :
          (xP : Prod AP AP) ->
          <|P xP xP == xP
    record RightIdempotenceSig
      : Set where
      constructor RightIdempotenceSigSigC
      field
        AS : Set
        <|S : AS -> AS -> AS
  
  module RightInverse where
    record RightInverse : Set where
      constructor RightInverseC
      field
        A : Set
        inv : A -> A
        e : A
        op : A -> A -> A
        rightInverse_inv_op_e :
          (x : A) -> op (inv x) x == e
    record RightInverseHom
      (R1 : RightInverse)
      (R2 : RightInverse) : Set where
      constructor RightInverseHomC
      field
        hom : A R1 -> A R2
        pres-inv :
          (x1 : A R1) ->
          hom (inv R1 x1) ==
            inv R2 (hom x1)
        pres-e : hom (e R1) == e R2
        pres-op :
          (x1 : A R1) (x2 : A R1) ->
          hom (op R1 x1 x2) ==
            op R2 (hom x1) (hom x2)
    data RightInverseLang
      : Set where
      invL :
        RightInverseLang ->
        RightInverseLang
      eL : RightInverseLang
      opL :
        RightInverseLang ->
        RightInverseLang ->
        RightInverseLang
    record RightInverseProd
      : Set where
      constructor RightInverseProdC
      field
        AP : Set
        invP : Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP (invP xP) xP == eP
    record RightInverseSig
      : Set where
      constructor RightInverseSigSigC
      field
        AS : Set
        invS : AS -> AS
        eS : AS
        opS : AS -> AS -> AS
  
  module RightInverseMagma where
    record RightInverseMagma
      : Set where
      constructor RightInverseMagmaC
      field
        A : Set
        rinv : A -> A -> A
    record RightInverseMagmaHom
      (R1 : RightInverseMagma)
      (R2 : RightInverseMagma) :
      Set where
      constructor RightInverseMagmaHomC
      field
        hom : A R1 -> A R2
        pres-rinv :
          (x1 : A R1) (x2 : A R1) ->
          hom (rinv R1 x1 x2) ==
            rinv R2 (hom x1) (hom x2)
    data RightInverseMagmaLang
      : Set where
      rinvL :
        RightInverseMagmaLang ->
        RightInverseMagmaLang ->
        RightInverseMagmaLang
    record RightInverseMagmaProd
      : Set where
      constructor RightInverseMagmaProdC
      field
        AP : Set
        rinvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record RightInverseMagmaSig
      : Set where
      constructor RightInverseMagmaSigSigC
      field
        AS : Set
        rinvS : AS -> AS -> AS
  
  module RightMonoid where
    record RightMonoid : Set where
      constructor RightMonoidC
      field
        A : Set
        op : A -> A -> A
        e : A
        runit_e : (x : A) -> op x e == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
    record RightMonoidHom
      (R1 : RightMonoid)
      (R2 : RightMonoid) : Set where
      constructor RightMonoidHomC
      field
        hom : A R1 -> A R2
        pres-op :
          (x1 : A R1) (x2 : A R1) ->
          hom (op R1 x1 x2) ==
            op R2 (hom x1) (hom x2)
        pres-e : hom (e R1) == e R2
    data RightMonoidLang : Set where
      opL :
        RightMonoidLang ->
        RightMonoidLang ->
        RightMonoidLang
      eL : RightMonoidLang
    record RightMonoidProd
      : Set where
      constructor RightMonoidProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
    record RightMonoidSig
      : Set where
      constructor RightMonoidSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        eS : AS
  
  module RightPreSemiring where
    record RightPreSemiring
      : Set where
      constructor RightPreSemiringC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
    record RightPreSemiringHom
      (R1 : RightPreSemiring)
      (R2 : RightPreSemiring) :
      Set where
      constructor RightPreSemiringHomC
      field
        hom : A R1 -> A R2
        pres-* :
          (x1 : A R1) (x2 : A R1) ->
          hom (* R1 x1 x2) ==
            * R2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A R1) (x2 : A R1) ->
          hom (+ R1 x1 x2) ==
            + R2 (hom x1) (hom x2)
    data RightPreSemiringLang
      : Set where
      *L :
        RightPreSemiringLang ->
        RightPreSemiringLang ->
        RightPreSemiringLang
      +L :
        RightPreSemiringLang ->
        RightPreSemiringLang ->
        RightPreSemiringLang
    record RightPreSemiringProd
      : Set where
      constructor RightPreSemiringProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
    record RightPreSemiringSig
      : Set where
      constructor RightPreSemiringSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  
  module RightQuasiGroup where
    record RightQuasiGroup
      : Set where
      constructor RightQuasiGroupC
      field
        A : Set
        op : A -> A -> A
        rinv : A -> A -> A
        rightCancel :
          (x : A) (y : A) ->
          op (rinv y x) x == y
        rightCancelOp :
          (x : A) (y : A) ->
          rinv (op y x) x == y
    record RightQuasiGroupHom
      (R1 : RightQuasiGroup)
      (R2 : RightQuasiGroup) :
      Set where
      constructor RightQuasiGroupHomC
      field
        hom : A R1 -> A R2
        pres-op :
          (x1 : A R1) (x2 : A R1) ->
          hom (op R1 x1 x2) ==
            op R2 (hom x1) (hom x2)
        pres-rinv :
          (x1 : A R1) (x2 : A R1) ->
          hom (rinv R1 x1 x2) ==
            rinv R2 (hom x1) (hom x2)
    data RightQuasiGroupLang
      : Set where
      opL :
        RightQuasiGroupLang ->
        RightQuasiGroupLang ->
        RightQuasiGroupLang
      rinvL :
        RightQuasiGroupLang ->
        RightQuasiGroupLang ->
        RightQuasiGroupLang
    record RightQuasiGroupProd
      : Set where
      constructor RightQuasiGroupProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rinvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP (rinvP yP xP) xP == yP
        rightCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          rinvP (opP yP xP) xP == yP
    record RightQuasiGroupSig
      : Set where
      constructor RightQuasiGroupSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        rinvS : AS -> AS -> AS
  
  module RightRack where
    record RightRack : Set where
      constructor RightRackC
      field
        A : Set
        <| : A -> A -> A
        |> : A -> A -> A
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
    record RightRackHom
      (R1 : RightRack)
      (R2 : RightRack) : Set where
      constructor RightRackHomC
      field
        hom : A R1 -> A R2
        pres-<| :
          (x1 : A R1) (x2 : A R1) ->
          hom (<| R1 x1 x2) ==
            <| R2 (hom x1) (hom x2)
        pres-|> :
          (x1 : A R1) (x2 : A R1) ->
          hom (|> R1 x1 x2) ==
            |> R2 (hom x1) (hom x2)
    data RightRackLang : Set where
      <|L :
        RightRackLang ->
        RightRackLang -> RightRackLang
      |>L :
        RightRackLang ->
        RightRackLang -> RightRackLang
    record RightRackProd : Set where
      constructor RightRackProdC
      field
        AP : Set
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          <|P (<|P yP zP) xP ==
            <|P (<|P yP xP) (<|P zP xP)
    record RightRackSig : Set where
      constructor RightRackSigSigC
      field
        AS : Set
        <|S : AS -> AS -> AS
        |>S : AS -> AS -> AS
  
  module RightRingoid where
    record RightRingoid : Set where
      constructor RightRingoidC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record RightRingoidHom
      (R1 : RightRingoid)
      (R2 : RightRingoid) : Set where
      constructor RightRingoidHomC
      field
        hom : A R1 -> A R2
        pres-* :
          (x1 : A R1) (x2 : A R1) ->
          hom (* R1 x1 x2) ==
            * R2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A R1) (x2 : A R1) ->
          hom (+ R1 x1 x2) ==
            + R2 (hom x1) (hom x2)
    data RightRingoidLang
      : Set where
      *L :
        RightRingoidLang ->
        RightRingoidLang ->
        RightRingoidLang
      +L :
        RightRingoidLang ->
        RightRingoidLang ->
        RightRingoidLang
    record RightRingoidProd
      : Set where
      constructor RightRingoidProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record RightRingoidSig
      : Set where
      constructor RightRingoidSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  
  module RightSelfInverse where
    record RightSelfInverse
      : Set where
      constructor RightSelfInverseC
      field
        A : Set
        |> : A -> A -> A
        rightSelfInverse_|> :
          (x : A) (y : A) ->
          |> (|> x y) y == x
    record RightSelfInverseHom
      (R1 : RightSelfInverse)
      (R2 : RightSelfInverse) :
      Set where
      constructor RightSelfInverseHomC
      field
        hom : A R1 -> A R2
        pres-|> :
          (x1 : A R1) (x2 : A R1) ->
          hom (|> R1 x1 x2) ==
            |> R2 (hom x1) (hom x2)
    data RightSelfInverseLang
      : Set where
      |>L :
        RightSelfInverseLang ->
        RightSelfInverseLang ->
        RightSelfInverseLang
    record RightSelfInverseProd
      : Set where
      constructor RightSelfInverseProdC
      field
        AP : Set
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightSelfInverse_|>P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          |>P (|>P xP yP) yP == xP
    record RightSelfInverseSig
      : Set where
      constructor RightSelfInverseSigSigC
      field
        AS : Set
        |>S : AS -> AS -> AS
  
  module RightShelf where
    record RightShelf : Set where
      constructor RightShelfC
      field
        A : Set
        <| : A -> A -> A
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
    record RightShelfHom
      (R1 : RightShelf)
      (R2 : RightShelf) : Set where
      constructor RightShelfHomC
      field
        hom : A R1 -> A R2
        pres-<| :
          (x1 : A R1) (x2 : A R1) ->
          hom (<| R1 x1 x2) ==
            <| R2 (hom x1) (hom x2)
    data RightShelfLang : Set where
      <|L :
        RightShelfLang ->
        RightShelfLang -> RightShelfLang
    record RightShelfProd
      : Set where
      constructor RightShelfProdC
      field
        AP : Set
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          <|P (<|P yP zP) xP ==
            <|P (<|P yP xP) (<|P zP xP)
    record RightShelfSig : Set where
      constructor RightShelfSigSigC
      field
        AS : Set
        <|S : AS -> AS -> AS
  
  module RightShelfSig where
    record RightShelfSig : Set where
      constructor RightShelfSigC
      field
        A : Set
        <| : A -> A -> A
    record RightShelfSigHom
      (R1 : RightShelfSig)
      (R2 : RightShelfSig) : Set where
      constructor RightShelfSigHomC
      field
        hom : A R1 -> A R2
        pres-<| :
          (x1 : A R1) (x2 : A R1) ->
          hom (<| R1 x1 x2) ==
            <| R2 (hom x1) (hom x2)
    data RightShelfSigLang
      : Set where
      <|L :
        RightShelfSigLang ->
        RightShelfSigLang ->
        RightShelfSigLang
    record RightShelfSigProd
      : Set where
      constructor RightShelfSigProdC
      field
        AP : Set
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record RightShelfSigSig
      : Set where
      constructor RightShelfSigSigSigC
      field
        AS : Set
        <|S : AS -> AS -> AS
  
  module RightSpindle where
    record RightSpindle : Set where
      constructor RightSpindleC
      field
        A : Set
        <| : A -> A -> A
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
        idempotent_<| :
          (x : A) -> <| x x == x
    record RightSpindleHom
      (R1 : RightSpindle)
      (R2 : RightSpindle) : Set where
      constructor RightSpindleHomC
      field
        hom : A R1 -> A R2
        pres-<| :
          (x1 : A R1) (x2 : A R1) ->
          hom (<| R1 x1 x2) ==
            <| R2 (hom x1) (hom x2)
    data RightSpindleLang
      : Set where
      <|L :
        RightSpindleLang ->
        RightSpindleLang ->
        RightSpindleLang
    record RightSpindleProd
      : Set where
      constructor RightSpindleProdC
      field
        AP : Set
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          <|P (<|P yP zP) xP ==
            <|P (<|P yP xP) (<|P zP xP)
        idempotent_<|P :
          (xP : Prod AP AP) ->
          <|P xP xP == xP
    record RightSpindleSig
      : Set where
      constructor RightSpindleSigSigC
      field
        AS : Set
        <|S : AS -> AS -> AS
  
  module RightSpindle_Shelf where
    record RightSpindle_Shelf
      : Set where
      constructor RightSpindle_ShelfC
      field
        A : Set
        <| : A -> A -> A
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
        idempotent_<| :
          (x : A) -> <| x x == x
        |> : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
    record RightSpindle_ShelfHom
      (R1 : RightSpindle_Shelf)
      (R2 : RightSpindle_Shelf) :
      Set where
      constructor RightSpindle_ShelfHomC
      field
        hom : A R1 -> A R2
        pres-<| :
          (x1 : A R1) (x2 : A R1) ->
          hom (<| R1 x1 x2) ==
            <| R2 (hom x1) (hom x2)
        pres-|> :
          (x1 : A R1) (x2 : A R1) ->
          hom (|> R1 x1 x2) ==
            |> R2 (hom x1) (hom x2)
    data RightSpindle_ShelfLang
      : Set where
      <|L :
        RightSpindle_ShelfLang ->
        RightSpindle_ShelfLang ->
        RightSpindle_ShelfLang
      |>L :
        RightSpindle_ShelfLang ->
        RightSpindle_ShelfLang ->
        RightSpindle_ShelfLang
    record RightSpindle_ShelfProd
      : Set where
      constructor RightSpindle_ShelfProdC
      field
        AP : Set
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          <|P (<|P yP zP) xP ==
            <|P (<|P yP xP) (<|P zP xP)
        idempotent_<|P :
          (xP : Prod AP AP) ->
          <|P xP xP == xP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          |>P xP (|>P yP zP) ==
            |>P (|>P xP yP) (|>P xP zP)
    record RightSpindle_ShelfSig
      : Set where
      constructor RightSpindle_ShelfSigSigC
      field
        AS : Set
        <|S : AS -> AS -> AS
        |>S : AS -> AS -> AS
  
  module RightSpindle_ShelfSig where
    record RightSpindle_ShelfSig
      : Set where
      constructor RightSpindle_ShelfSigC
      field
        A : Set
        <| : A -> A -> A
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
        idempotent_<| :
          (x : A) -> <| x x == x
        |> : A -> A -> A
    record RightSpindle_ShelfSigHom
      (R1 : RightSpindle_ShelfSig)
      (R2 : RightSpindle_ShelfSig) :
      Set where
      constructor RightSpindle_ShelfSigHomC
      field
        hom : A R1 -> A R2
        pres-<| :
          (x1 : A R1) (x2 : A R1) ->
          hom (<| R1 x1 x2) ==
            <| R2 (hom x1) (hom x2)
        pres-|> :
          (x1 : A R1) (x2 : A R1) ->
          hom (|> R1 x1 x2) ==
            |> R2 (hom x1) (hom x2)
    data RightSpindle_ShelfSigLang
      : Set where
      <|L :
        RightSpindle_ShelfSigLang ->
        RightSpindle_ShelfSigLang ->
        RightSpindle_ShelfSigLang
      |>L :
        RightSpindle_ShelfSigLang ->
        RightSpindle_ShelfSigLang ->
        RightSpindle_ShelfSigLang
    record RightSpindle_ShelfSigProd
      : Set where
      constructor RightSpindle_ShelfSigProdC
      field
        AP : Set
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          <|P (<|P yP zP) xP ==
            <|P (<|P yP xP) (<|P zP xP)
        idempotent_<|P :
          (xP : Prod AP AP) ->
          <|P xP xP == xP
    record RightSpindle_ShelfSigSig
      : Set where
      constructor RightSpindle_ShelfSigSigSigC
      field
        AS : Set
        <|S : AS -> AS -> AS
        |>S : AS -> AS -> AS
  
  module RightUnital where
    record RightUnital : Set where
      constructor RightUnitalC
      field
        A : Set
        e : A
        op : A -> A -> A
        runit_e : (x : A) -> op x e == x
    record RightUnitalHom
      (R1 : RightUnital)
      (R2 : RightUnital) : Set where
      constructor RightUnitalHomC
      field
        hom : A R1 -> A R2
        pres-e : hom (e R1) == e R2
        pres-op :
          (x1 : A R1) (x2 : A R1) ->
          hom (op R1 x1 x2) ==
            op R2 (hom x1) (hom x2)
    data RightUnitalLang : Set where
      eL : RightUnitalLang
      opL :
        RightUnitalLang ->
        RightUnitalLang ->
        RightUnitalLang
    record RightUnitalProd
      : Set where
      constructor RightUnitalProdC
      field
        AP : Set
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
    record RightUnitalSig
      : Set where
      constructor RightUnitalSigSigC
      field
        AS : Set
        eS : AS
        opS : AS -> AS -> AS
  
  module RightZero where
    record RightZero : Set where
      constructor RightZeroC
      field
        A : Set
        e : A
        op : A -> A -> A
        rightZero_op_e :
          (x : A) -> op x e == e
    record RightZeroHom
      (R1 : RightZero)
      (R2 : RightZero) : Set where
      constructor RightZeroHomC
      field
        hom : A R1 -> A R2
        pres-e : hom (e R1) == e R2
        pres-op :
          (x1 : A R1) (x2 : A R1) ->
          hom (op R1 x1 x2) ==
            op R2 (hom x1) (hom x2)
    data RightZeroLang : Set where
      eL : RightZeroLang
      opL :
        RightZeroLang ->
        RightZeroLang -> RightZeroLang
    record RightZeroProd : Set where
      constructor RightZeroProdC
      field
        AP : Set
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightZero_op_eP :
          (xP : Prod AP AP) ->
          opP xP eP == eP
    record RightZeroSig : Set where
      constructor RightZeroSigSigC
      field
        AS : Set
        eS : AS
        opS : AS -> AS -> AS
  
  module Ring where
    record Ring : Set where
      constructor RingC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
    record RingHom
      (R1 : Ring) (R2 : Ring) :
      Set where
      constructor RingHomC
      field
        hom : A R1 -> A R2
        pres-* :
          (x1 : A R1) (x2 : A R1) ->
          hom (* R1 x1 x2) ==
            * R2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A R1) (x2 : A R1) ->
          hom (+ R1 x1 x2) ==
            + R2 (hom x1) (hom x2)
        pres-0 : hom (0 R1) == 0 R2
        pres-neg :
          (x1 : A R1) ->
          hom (neg R1 x1) ==
            neg R2 (hom x1)
        pres-1 : hom (1 R1) == 1 R2
    data RingLang : Set where
      *L :
        RingLang -> RingLang -> RingLang
      +L :
        RingLang -> RingLang -> RingLang
      0L : RingLang
      negL : RingLang -> RingLang
      1L : RingLang
    record RingProd : Set where
      constructor RingProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        negP : Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        leftInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P xP (negP xP) == 0P
        rightInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P (negP xP) xP == 0P
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        leftZero_op_0P :
          (xP : Prod AP AP) ->
          *P 0P xP == 0P
        rightZero_op_0P :
          (xP : Prod AP AP) ->
          *P xP 0P == 0P
    record RingSig : Set where
      constructor RingSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        0S : AS
        negS : AS -> AS
        1S : AS
  
  module Ringoid where
    record Ringoid : Set where
      constructor RingoidC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record RingoidHom
      (R1 : Ringoid) (R2 : Ringoid) :
      Set where
      constructor RingoidHomC
      field
        hom : A R1 -> A R2
        pres-* :
          (x1 : A R1) (x2 : A R1) ->
          hom (* R1 x1 x2) ==
            * R2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A R1) (x2 : A R1) ->
          hom (+ R1 x1 x2) ==
            + R2 (hom x1) (hom x2)
    data RingoidLang : Set where
      *L :
        RingoidLang ->
        RingoidLang -> RingoidLang
      +L :
        RingoidLang ->
        RingoidLang -> RingoidLang
    record RingoidProd : Set where
      constructor RingoidProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record RingoidSig : Set where
      constructor RingoidSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  
  module Ringoid01Sig where
    record Ringoid01Sig : Set where
      constructor Ringoid01SigC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        0 : A
        1 : A
    record Ringoid01SigHom
      (R1 : Ringoid01Sig)
      (R2 : Ringoid01Sig) : Set where
      constructor Ringoid01SigHomC
      field
        hom : A R1 -> A R2
        pres-* :
          (x1 : A R1) (x2 : A R1) ->
          hom (* R1 x1 x2) ==
            * R2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A R1) (x2 : A R1) ->
          hom (+ R1 x1 x2) ==
            + R2 (hom x1) (hom x2)
        pres-0 : hom (0 R1) == 0 R2
        pres-1 : hom (1 R1) == 1 R2
    data Ringoid01SigLang
      : Set where
      *L :
        Ringoid01SigLang ->
        Ringoid01SigLang ->
        Ringoid01SigLang
      +L :
        Ringoid01SigLang ->
        Ringoid01SigLang ->
        Ringoid01SigLang
      0L : Ringoid01SigLang
      1L : Ringoid01SigLang
    record Ringoid01SigProd
      : Set where
      constructor Ringoid01SigProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        1P : Prod AP AP
    record Ringoid01SigSig
      : Set where
      constructor Ringoid01SigSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        0S : AS
        1S : AS
  
  module Ringoid0Sig where
    record Ringoid0Sig : Set where
      constructor Ringoid0SigC
      field
        A : Set
        0 : A
        + : A -> A -> A
        * : A -> A -> A
    record Ringoid0SigHom
      (R1 : Ringoid0Sig)
      (R2 : Ringoid0Sig) : Set where
      constructor Ringoid0SigHomC
      field
        hom : A R1 -> A R2
        pres-0 : hom (0 R1) == 0 R2
        pres-+ :
          (x1 : A R1) (x2 : A R1) ->
          hom (+ R1 x1 x2) ==
            + R2 (hom x1) (hom x2)
        pres-* :
          (x1 : A R1) (x2 : A R1) ->
          hom (* R1 x1 x2) ==
            * R2 (hom x1) (hom x2)
    data Ringoid0SigLang : Set where
      0L : Ringoid0SigLang
      +L :
        Ringoid0SigLang ->
        Ringoid0SigLang ->
        Ringoid0SigLang
      *L :
        Ringoid0SigLang ->
        Ringoid0SigLang ->
        Ringoid0SigLang
    record Ringoid0SigProd
      : Set where
      constructor Ringoid0SigProdC
      field
        AP : Set
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record Ringoid0SigSig
      : Set where
      constructor Ringoid0SigSigSigC
      field
        AS : Set
        0S : AS
        +S : AS -> AS -> AS
        *S : AS -> AS -> AS
  
  module Ringoid1 where
    record Ringoid1 : Set where
      constructor Ringoid1C
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        1 : A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record Ringoid1Hom
      (R1 : Ringoid1)
      (R2 : Ringoid1) : Set where
      constructor Ringoid1HomC
      field
        hom : A R1 -> A R2
        pres-* :
          (x1 : A R1) (x2 : A R1) ->
          hom (* R1 x1 x2) ==
            * R2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A R1) (x2 : A R1) ->
          hom (+ R1 x1 x2) ==
            + R2 (hom x1) (hom x2)
        pres-1 : hom (1 R1) == 1 R2
    data Ringoid1Lang : Set where
      *L :
        Ringoid1Lang ->
        Ringoid1Lang -> Ringoid1Lang
      +L :
        Ringoid1Lang ->
        Ringoid1Lang -> Ringoid1Lang
      1L : Ringoid1Lang
    record Ringoid1Prod : Set where
      constructor Ringoid1ProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record Ringoid1Sig : Set where
      constructor Ringoid1SigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        1S : AS
  
  module Ringoid1Sig where
    record Ringoid1Sig : Set where
      constructor Ringoid1SigC
      field
        A : Set
        * : A -> A -> A
        1 : A
        + : A -> A -> A
    record Ringoid1SigHom
      (R1 : Ringoid1Sig)
      (R2 : Ringoid1Sig) : Set where
      constructor Ringoid1SigHomC
      field
        hom : A R1 -> A R2
        pres-* :
          (x1 : A R1) (x2 : A R1) ->
          hom (* R1 x1 x2) ==
            * R2 (hom x1) (hom x2)
        pres-1 : hom (1 R1) == 1 R2
        pres-+ :
          (x1 : A R1) (x2 : A R1) ->
          hom (+ R1 x1 x2) ==
            + R2 (hom x1) (hom x2)
    data Ringoid1SigLang : Set where
      *L :
        Ringoid1SigLang ->
        Ringoid1SigLang ->
        Ringoid1SigLang
      1L : Ringoid1SigLang
      +L :
        Ringoid1SigLang ->
        Ringoid1SigLang ->
        Ringoid1SigLang
    record Ringoid1SigProd
      : Set where
      constructor Ringoid1SigProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record Ringoid1SigSig
      : Set where
      constructor Ringoid1SigSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        1S : AS
        +S : AS -> AS -> AS
  
  module RingoidSig where
    record RingoidSig : Set where
      constructor RingoidSigC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
    record RingoidSigHom
      (R1 : RingoidSig)
      (R2 : RingoidSig) : Set where
      constructor RingoidSigHomC
      field
        hom : A R1 -> A R2
        pres-* :
          (x1 : A R1) (x2 : A R1) ->
          hom (* R1 x1 x2) ==
            * R2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A R1) (x2 : A R1) ->
          hom (+ R1 x1 x2) ==
            + R2 (hom x1) (hom x2)
    data RingoidSigLang : Set where
      *L :
        RingoidSigLang ->
        RingoidSigLang -> RingoidSigLang
      +L :
        RingoidSigLang ->
        RingoidSigLang -> RingoidSigLang
    record RingoidSigProd
      : Set where
      constructor RingoidSigProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record RingoidSigSig : Set where
      constructor RingoidSigSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  
  module RingoidWithAddAntiDistrib where
    record RingoidWithAddAntiDistrib
      : Set where
      constructor RingoidWithAddAntiDistribC
      field
        A : Set
        + : A -> A -> A
        prim : A -> A
        antidis_prim_+ :
          (x : A) (y : A) ->
          prim (+ x y) ==
            + (prim y) (prim x)
        * : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record RingoidWithAddAntiDistribHom
      (R1 : RingoidWithAddAntiDistrib)
      (R2 : RingoidWithAddAntiDistrib) :
      Set where
      constructor RingoidWithAddAntiDistribHomC
      field
        hom : A R1 -> A R2
        pres-+ :
          (x1 : A R1) (x2 : A R1) ->
          hom (+ R1 x1 x2) ==
            + R2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A R1) ->
          hom (prim R1 x1) ==
            prim R2 (hom x1)
        pres-* :
          (x1 : A R1) (x2 : A R1) ->
          hom (* R1 x1 x2) ==
            * R2 (hom x1) (hom x2)
    data RingoidWithAddAntiDistribLang
      : Set where
      +L :
        RingoidWithAddAntiDistribLang ->
        RingoidWithAddAntiDistribLang ->
        RingoidWithAddAntiDistribLang
      primL :
        RingoidWithAddAntiDistribLang ->
        RingoidWithAddAntiDistribLang
      *L :
        RingoidWithAddAntiDistribLang ->
        RingoidWithAddAntiDistribLang ->
        RingoidWithAddAntiDistribLang
    record RingoidWithAddAntiDistribProd
      : Set where
      constructor RingoidWithAddAntiDistribProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        antidis_prim_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (+P xP yP) ==
            +P (primP yP) (primP xP)
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record RingoidWithAddAntiDistribSig
      : Set where
      constructor RingoidWithAddAntiDistribSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
        primS : AS -> AS
        *S : AS -> AS -> AS
  
  module RingoidWithInvolution where
    record RingoidWithInvolution
      : Set where
      constructor RingoidWithInvolutionC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        prim : A -> A
    record RingoidWithInvolutionHom
      (R1 : RingoidWithInvolution)
      (R2 : RingoidWithInvolution) :
      Set where
      constructor RingoidWithInvolutionHomC
      field
        hom : A R1 -> A R2
        pres-* :
          (x1 : A R1) (x2 : A R1) ->
          hom (* R1 x1 x2) ==
            * R2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A R1) (x2 : A R1) ->
          hom (+ R1 x1 x2) ==
            + R2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A R1) ->
          hom (prim R1 x1) ==
            prim R2 (hom x1)
    data RingoidWithInvolutionLang
      : Set where
      *L :
        RingoidWithInvolutionLang ->
        RingoidWithInvolutionLang ->
        RingoidWithInvolutionLang
      +L :
        RingoidWithInvolutionLang ->
        RingoidWithInvolutionLang ->
        RingoidWithInvolutionLang
      primL :
        RingoidWithInvolutionLang ->
        RingoidWithInvolutionLang
    record RingoidWithInvolutionProd
      : Set where
      constructor RingoidWithInvolutionProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record RingoidWithInvolutionSig
      : Set where
      constructor RingoidWithInvolutionSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        primS : AS -> AS
  
  module RingoidWithMultAntiDistrib where
    record RingoidWithMultAntiDistrib
      : Set where
      constructor RingoidWithMultAntiDistribC
      field
        A : Set
        * : A -> A -> A
        prim : A -> A
        antidis_prim_* :
          (x : A) (y : A) ->
          prim (* x y) ==
            * (prim y) (prim x)
        + : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record RingoidWithMultAntiDistribHom
      (R1 : RingoidWithMultAntiDistrib)
      (R2 : RingoidWithMultAntiDistrib) :
      Set where
      constructor RingoidWithMultAntiDistribHomC
      field
        hom : A R1 -> A R2
        pres-* :
          (x1 : A R1) (x2 : A R1) ->
          hom (* R1 x1 x2) ==
            * R2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A R1) ->
          hom (prim R1 x1) ==
            prim R2 (hom x1)
        pres-+ :
          (x1 : A R1) (x2 : A R1) ->
          hom (+ R1 x1 x2) ==
            + R2 (hom x1) (hom x2)
    data RingoidWithMultAntiDistribLang
      : Set where
      *L :
        RingoidWithMultAntiDistribLang ->
        RingoidWithMultAntiDistribLang ->
        RingoidWithMultAntiDistribLang
      primL :
        RingoidWithMultAntiDistribLang ->
        RingoidWithMultAntiDistribLang
      +L :
        RingoidWithMultAntiDistribLang ->
        RingoidWithMultAntiDistribLang ->
        RingoidWithMultAntiDistribLang
    record RingoidWithMultAntiDistribProd
      : Set where
      constructor RingoidWithMultAntiDistribProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        antidis_prim_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (*P xP yP) ==
            *P (primP yP) (primP xP)
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record RingoidWithMultAntiDistribSig
      : Set where
      constructor RingoidWithMultAntiDistribSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        primS : AS -> AS
        +S : AS -> AS -> AS
  
  module Rng where
    record Rng : Set where
      constructor RngC
      field
        A : Set
        0 : A
        + : A -> A -> A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record RngHom
      (R1 : Rng) (R2 : Rng) :
      Set where
      constructor RngHomC
      field
        hom : A R1 -> A R2
        pres-0 : hom (0 R1) == 0 R2
        pres-+ :
          (x1 : A R1) (x2 : A R1) ->
          hom (+ R1 x1 x2) ==
            + R2 (hom x1) (hom x2)
        pres-neg :
          (x1 : A R1) ->
          hom (neg R1 x1) ==
            neg R2 (hom x1)
        pres-* :
          (x1 : A R1) (x2 : A R1) ->
          hom (* R1 x1 x2) ==
            * R2 (hom x1) (hom x2)
    data RngLang : Set where
      0L : RngLang
      +L :
        RngLang -> RngLang -> RngLang
      negL : RngLang -> RngLang
      *L :
        RngLang -> RngLang -> RngLang
    record RngProd : Set where
      constructor RngProdC
      field
        AP : Set
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        negP : Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        leftInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P xP (negP xP) == 0P
        rightInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P (negP xP) xP == 0P
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record RngSig : Set where
      constructor RngSigSigC
      field
        AS : Set
        0S : AS
        +S : AS -> AS -> AS
        negS : AS -> AS
        *S : AS -> AS -> AS
  
  module SemiRng where
    record SemiRng : Set where
      constructor SemiRngC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record SemiRngHom
      (S1 : SemiRng) (S2 : SemiRng) :
      Set where
      constructor SemiRngHomC
      field
        hom : A S1 -> A S2
        pres-* :
          (x1 : A S1) (x2 : A S1) ->
          hom (* S1 x1 x2) ==
            * S2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A S1) (x2 : A S1) ->
          hom (+ S1 x1 x2) ==
            + S2 (hom x1) (hom x2)
        pres-0 : hom (0 S1) == 0 S2
    data SemiRngLang : Set where
      *L :
        SemiRngLang ->
        SemiRngLang -> SemiRngLang
      +L :
        SemiRngLang ->
        SemiRngLang -> SemiRngLang
      0L : SemiRngLang
    record SemiRngProd : Set where
      constructor SemiRngProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record SemiRngSig : Set where
      constructor SemiRngSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        0S : AS
  
  module SemiRngWithUnit where
    record SemiRngWithUnit
      : Set where
      constructor SemiRngWithUnitC
      field
        A : Set
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        + : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record SemiRngWithUnitHom
      (S1 : SemiRngWithUnit)
      (S2 : SemiRngWithUnit) :
      Set where
      constructor SemiRngWithUnitHomC
      field
        hom : A S1 -> A S2
        pres-* :
          (x1 : A S1) (x2 : A S1) ->
          hom (* S1 x1 x2) ==
            * S2 (hom x1) (hom x2)
        pres-1 : hom (1 S1) == 1 S2
        pres-+ :
          (x1 : A S1) (x2 : A S1) ->
          hom (+ S1 x1 x2) ==
            + S2 (hom x1) (hom x2)
        pres-0 : hom (0 S1) == 0 S2
    data SemiRngWithUnitLang
      : Set where
      *L :
        SemiRngWithUnitLang ->
        SemiRngWithUnitLang ->
        SemiRngWithUnitLang
      1L : SemiRngWithUnitLang
      +L :
        SemiRngWithUnitLang ->
        SemiRngWithUnitLang ->
        SemiRngWithUnitLang
      0L : SemiRngWithUnitLang
    record SemiRngWithUnitProd
      : Set where
      constructor SemiRngWithUnitProdC
      field
        AP : Set
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record SemiRngWithUnitSig
      : Set where
      constructor SemiRngWithUnitSigSigC
      field
        AS : Set
        *S : AS -> AS -> AS
        1S : AS
        +S : AS -> AS -> AS
        0S : AS
  
  module Semigroup where
    record Semigroup : Set where
      constructor SemigroupC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
    record SemigroupHom
      (S1 : Semigroup)
      (S2 : Semigroup) : Set where
      constructor SemigroupHomC
      field
        hom : A S1 -> A S2
        pres-op :
          (x1 : A S1) (x2 : A S1) ->
          hom (op S1 x1 x2) ==
            op S2 (hom x1) (hom x2)
    data SemigroupLang : Set where
      opL :
        SemigroupLang ->
        SemigroupLang -> SemigroupLang
    record SemigroupProd : Set where
      constructor SemigroupProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
    record SemigroupSig : Set where
      constructor SemigroupSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module Semiring where
    record Semiring : Set where
      constructor SemiringC
      field
        A : Set
        0 : A
        + : A -> A -> A
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
    record SemiringHom
      (S1 : Semiring)
      (S2 : Semiring) : Set where
      constructor SemiringHomC
      field
        hom : A S1 -> A S2
        pres-0 : hom (0 S1) == 0 S2
        pres-+ :
          (x1 : A S1) (x2 : A S1) ->
          hom (+ S1 x1 x2) ==
            + S2 (hom x1) (hom x2)
        pres-* :
          (x1 : A S1) (x2 : A S1) ->
          hom (* S1 x1 x2) ==
            * S2 (hom x1) (hom x2)
        pres-1 : hom (1 S1) == 1 S2
    data SemiringLang : Set where
      0L : SemiringLang
      +L :
        SemiringLang ->
        SemiringLang -> SemiringLang
      *L :
        SemiringLang ->
        SemiringLang -> SemiringLang
      1L : SemiringLang
    record SemiringProd : Set where
      constructor SemiringProdC
      field
        AP : Set
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        leftZero_op_0P :
          (xP : Prod AP AP) ->
          *P 0P xP == 0P
        rightZero_op_0P :
          (xP : Prod AP AP) ->
          *P xP 0P == 0P
    record SemiringSig : Set where
      constructor SemiringSigSigC
      field
        AS : Set
        0S : AS
        +S : AS -> AS -> AS
        *S : AS -> AS -> AS
        1S : AS
  
  module Shelf where
    record Shelf : Set where
      constructor ShelfC
      field
        A : Set
        |> : A -> A -> A
        <| : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
    record ShelfHom
      (S1 : Shelf) (S2 : Shelf) :
      Set where
      constructor ShelfHomC
      field
        hom : A S1 -> A S2
        pres-|> :
          (x1 : A S1) (x2 : A S1) ->
          hom (|> S1 x1 x2) ==
            |> S2 (hom x1) (hom x2)
        pres-<| :
          (x1 : A S1) (x2 : A S1) ->
          hom (<| S1 x1 x2) ==
            <| S2 (hom x1) (hom x2)
    data ShelfLang : Set where
      |>L :
        ShelfLang ->
        ShelfLang -> ShelfLang
      <|L :
        ShelfLang ->
        ShelfLang -> ShelfLang
    record ShelfProd : Set where
      constructor ShelfProdC
      field
        AP : Set
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          |>P xP (|>P yP zP) ==
            |>P (|>P xP yP) (|>P xP zP)
        rightDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          <|P (<|P yP zP) xP ==
            <|P (<|P yP xP) (<|P zP xP)
    record ShelfSig : Set where
      constructor ShelfSigSigC
      field
        AS : Set
        |>S : AS -> AS -> AS
        <|S : AS -> AS -> AS
  
  module ShelfSig where
    record ShelfSig : Set where
      constructor ShelfSigC
      field
        A : Set
        |> : A -> A -> A
        <| : A -> A -> A
    record ShelfSigHom
      (S1 : ShelfSig)
      (S2 : ShelfSig) : Set where
      constructor ShelfSigHomC
      field
        hom : A S1 -> A S2
        pres-|> :
          (x1 : A S1) (x2 : A S1) ->
          hom (|> S1 x1 x2) ==
            |> S2 (hom x1) (hom x2)
        pres-<| :
          (x1 : A S1) (x2 : A S1) ->
          hom (<| S1 x1 x2) ==
            <| S2 (hom x1) (hom x2)
    data ShelfSigLang : Set where
      |>L :
        ShelfSigLang ->
        ShelfSigLang -> ShelfSigLang
      <|L :
        ShelfSigLang ->
        ShelfSigLang -> ShelfSigLang
    record ShelfSigProd : Set where
      constructor ShelfSigProdC
      field
        AP : Set
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record ShelfSigSig : Set where
      constructor ShelfSigSigSigC
      field
        AS : Set
        |>S : AS -> AS -> AS
        <|S : AS -> AS -> AS
  
  module Sloop where
    record Sloop : Set where
      constructor SloopC
      field
        A : Set
        e : A
        op : A -> A -> A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
        antiAbsorbent :
          (x : A) (y : A) ->
          op x (op x y) == y
        unipotence :
          (x : A) -> op x x == e
    record SloopHom
      (S1 : Sloop) (S2 : Sloop) :
      Set where
      constructor SloopHomC
      field
        hom : A S1 -> A S2
        pres-e : hom (e S1) == e S2
        pres-op :
          (x1 : A S1) (x2 : A S1) ->
          hom (op S1 x1 x2) ==
            op S2 (hom x1) (hom x2)
    data SloopLang : Set where
      eL : SloopLang
      opL :
        SloopLang ->
        SloopLang -> SloopLang
    record SloopProd : Set where
      constructor SloopProdC
      field
        AP : Set
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
        antiAbsorbentP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (opP xP yP) == yP
        unipotenceP :
          (xP : Prod AP AP) ->
          opP xP xP == eP
    record SloopSig : Set where
      constructor SloopSigSigC
      field
        AS : Set
        eS : AS
        opS : AS -> AS -> AS
  
  module Spindle where
    record Spindle : Set where
      constructor SpindleC
      field
        A : Set
        |> : A -> A -> A
        <| : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
        idempotent_|> :
          (x : A) -> |> x x == x
        idempotent_<| :
          (x : A) -> <| x x == x
    record SpindleHom
      (S1 : Spindle) (S2 : Spindle) :
      Set where
      constructor SpindleHomC
      field
        hom : A S1 -> A S2
        pres-|> :
          (x1 : A S1) (x2 : A S1) ->
          hom (|> S1 x1 x2) ==
            |> S2 (hom x1) (hom x2)
        pres-<| :
          (x1 : A S1) (x2 : A S1) ->
          hom (<| S1 x1 x2) ==
            <| S2 (hom x1) (hom x2)
    data SpindleLang : Set where
      |>L :
        SpindleLang ->
        SpindleLang -> SpindleLang
      <|L :
        SpindleLang ->
        SpindleLang -> SpindleLang
    record SpindleProd : Set where
      constructor SpindleProdC
      field
        AP : Set
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          |>P xP (|>P yP zP) ==
            |>P (|>P xP yP) (|>P xP zP)
        rightDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          <|P (<|P yP zP) xP ==
            <|P (<|P yP xP) (<|P zP xP)
        idempotent_|>P :
          (xP : Prod AP AP) ->
          |>P xP xP == xP
        idempotent_<|P :
          (xP : Prod AP AP) ->
          <|P xP xP == xP
    record SpindleSig : Set where
      constructor SpindleSigSigC
      field
        AS : Set
        |>S : AS -> AS -> AS
        <|S : AS -> AS -> AS
  
  module Squag where
    record Squag : Set where
      constructor SquagC
      field
        A : Set
        op : A -> A -> A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
        antiAbsorbent :
          (x : A) (y : A) ->
          op x (op x y) == y
        idempotent_op :
          (x : A) -> op x x == x
    record SquagHom
      (S1 : Squag) (S2 : Squag) :
      Set where
      constructor SquagHomC
      field
        hom : A S1 -> A S2
        pres-op :
          (x1 : A S1) (x2 : A S1) ->
          hom (op S1 x1 x2) ==
            op S2 (hom x1) (hom x2)
    data SquagLang : Set where
      opL :
        SquagLang ->
        SquagLang -> SquagLang
    record SquagProd : Set where
      constructor SquagProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
        antiAbsorbentP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (opP xP yP) == yP
        idempotent_opP :
          (xP : Prod AP AP) ->
          opP xP xP == xP
    record SquagSig : Set where
      constructor SquagSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module SteinerMagma where
    record SteinerMagma : Set where
      constructor SteinerMagmaC
      field
        A : Set
        op : A -> A -> A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
        antiAbsorbent :
          (x : A) (y : A) ->
          op x (op x y) == y
    record SteinerMagmaHom
      (S1 : SteinerMagma)
      (S2 : SteinerMagma) : Set where
      constructor SteinerMagmaHomC
      field
        hom : A S1 -> A S2
        pres-op :
          (x1 : A S1) (x2 : A S1) ->
          hom (op S1 x1 x2) ==
            op S2 (hom x1) (hom x2)
    data SteinerMagmaLang
      : Set where
      opL :
        SteinerMagmaLang ->
        SteinerMagmaLang ->
        SteinerMagmaLang
    record SteinerMagmaProd
      : Set where
      constructor SteinerMagmaProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
        antiAbsorbentP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (opP xP yP) == yP
    record SteinerMagmaSig
      : Set where
      constructor SteinerMagmaSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module TwoPointed where
    record TwoPointed : Set where
      constructor TwoPointedC
      field
        A : Set
        e1 : A
        e2 : A
    record TwoPointedHom
      (T1 : TwoPointed)
      (T2 : TwoPointed) : Set where
      constructor TwoPointedHomC
      field
        hom : A T1 -> A T2
        pres-e1 : hom (e1 T1) == e1 T2
        pres-e2 : hom (e2 T1) == e2 T2
    data TwoPointedLang : Set where
      e1L : TwoPointedLang
      e2L : TwoPointedLang
    record TwoPointedProd
      : Set where
      constructor TwoPointedProdC
      field
        AP : Set
        e1P : Prod AP AP
        e2P : Prod AP AP
    record TwoPointedSig : Set where
      constructor TwoPointedSigSigC
      field
        AS : Set
        e1S : AS
        e2S : AS
  
  module TwoPointed01 where
    record TwoPointed01 : Set where
      constructor TwoPointed01C
      field
        A : Set
        e1 : A
        e2 : A
    record TwoPointed01Hom
      (T1 : TwoPointed01)
      (T2 : TwoPointed01) : Set where
      constructor TwoPointed01HomC
      field
        hom : A T1 -> A T2
        pres-e1 : hom (e1 T1) == e1 T2
        pres-e2 : hom (e2 T1) == e2 T2
    data TwoPointed01Lang
      : Set where
      e1L : TwoPointed01Lang
      e2L : TwoPointed01Lang
    record TwoPointed01Prod
      : Set where
      constructor TwoPointed01ProdC
      field
        AP : Set
        e1P : Prod AP AP
        e2P : Prod AP AP
    record TwoPointed01Sig
      : Set where
      constructor TwoPointed01SigSigC
      field
        AS : Set
        e1S : AS
        e2S : AS
  
  module UnaryAntiDistribution where
    record UnaryAntiDistribution
      : Set where
      constructor UnaryAntiDistributionC
      field
        A : Set
        prim : A -> A
        op : A -> A -> A
        antidis_prim_op :
          (x : A) (y : A) ->
          prim (op x y) ==
            op (prim y) (prim x)
    record UnaryAntiDistributionHom
      (U1 : UnaryAntiDistribution)
      (U2 : UnaryAntiDistribution) :
      Set where
      constructor UnaryAntiDistributionHomC
      field
        hom : A U1 -> A U2
        pres-prim :
          (x1 : A U1) ->
          hom (prim U1 x1) ==
            prim U2 (hom x1)
        pres-op :
          (x1 : A U1) (x2 : A U1) ->
          hom (op U1 x1 x2) ==
            op U2 (hom x1) (hom x2)
    data UnaryAntiDistributionLang
      : Set where
      primL :
        UnaryAntiDistributionLang ->
        UnaryAntiDistributionLang
      opL :
        UnaryAntiDistributionLang ->
        UnaryAntiDistributionLang ->
        UnaryAntiDistributionLang
    record UnaryAntiDistributionProd
      : Set where
      constructor UnaryAntiDistributionProdC
      field
        AP : Set
        primP : Prod AP AP -> Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        antidis_prim_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (opP xP yP) ==
            opP (primP yP) (primP xP)
    record UnaryAntiDistributionSig
      : Set where
      constructor UnaryAntiDistributionSigSigC
      field
        AS : Set
        primS : AS -> AS
        opS : AS -> AS -> AS
  
  module UnaryDistributes where
    record UnaryDistributes
      : Set where
      constructor UnaryDistributesC
      field
        A : Set
        prim : A -> A
        op : A -> A -> A
        distribute_prim_op :
          (x : A) (y : A) ->
          prim (op x y) ==
            op (prim x) (prim y)
    record UnaryDistributesHom
      (U1 : UnaryDistributes)
      (U2 : UnaryDistributes) :
      Set where
      constructor UnaryDistributesHomC
      field
        hom : A U1 -> A U2
        pres-prim :
          (x1 : A U1) ->
          hom (prim U1 x1) ==
            prim U2 (hom x1)
        pres-op :
          (x1 : A U1) (x2 : A U1) ->
          hom (op U1 x1 x2) ==
            op U2 (hom x1) (hom x2)
    data UnaryDistributesLang
      : Set where
      primL :
        UnaryDistributesLang ->
        UnaryDistributesLang
      opL :
        UnaryDistributesLang ->
        UnaryDistributesLang ->
        UnaryDistributesLang
    record UnaryDistributesProd
      : Set where
      constructor UnaryDistributesProdC
      field
        AP : Set
        primP : Prod AP AP -> Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        distribute_prim_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (opP xP yP) ==
            opP (primP xP) (primP yP)
    record UnaryDistributesSig
      : Set where
      constructor UnaryDistributesSigSigC
      field
        AS : Set
        primS : AS -> AS
        opS : AS -> AS -> AS
  
  module UnaryOperation where
    record UnaryOperation
      : Set where
      constructor UnaryOperationC
      field
        A : Set
        prim : A -> A
    record UnaryOperationHom
      (U1 : UnaryOperation)
      (U2 : UnaryOperation) :
      Set where
      constructor UnaryOperationHomC
      field
        hom : A U1 -> A U2
        pres-prim :
          (x1 : A U1) ->
          hom (prim U1 x1) ==
            prim U2 (hom x1)
    data UnaryOperationLang
      : Set where
      primL :
        UnaryOperationLang ->
        UnaryOperationLang
    record UnaryOperationProd
      : Set where
      constructor UnaryOperationProdC
      field
        AP : Set
        primP : Prod AP AP -> Prod AP AP
    record UnaryOperationSig
      : Set where
      constructor UnaryOperationSigSigC
      field
        AS : Set
        primS : AS -> AS
  
  module UnipotentPointedMagma where
    record UnipotentPointedMagma
      : Set where
      constructor UnipotentPointedMagmaC
      field
        A : Set
        e : A
        op : A -> A -> A
        unipotence :
          (x : A) -> op x x == e
    record UnipotentPointedMagmaHom
      (U1 : UnipotentPointedMagma)
      (U2 : UnipotentPointedMagma) :
      Set where
      constructor UnipotentPointedMagmaHomC
      field
        hom : A U1 -> A U2
        pres-e : hom (e U1) == e U2
        pres-op :
          (x1 : A U1) (x2 : A U1) ->
          hom (op U1 x1 x2) ==
            op U2 (hom x1) (hom x2)
    data UnipotentPointedMagmaLang
      : Set where
      eL : UnipotentPointedMagmaLang
      opL :
        UnipotentPointedMagmaLang ->
        UnipotentPointedMagmaLang ->
        UnipotentPointedMagmaLang
    record UnipotentPointedMagmaProd
      : Set where
      constructor UnipotentPointedMagmaProdC
      field
        AP : Set
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        unipotenceP :
          (xP : Prod AP AP) ->
          opP xP xP == eP
    record UnipotentPointedMagmaSig
      : Set where
      constructor UnipotentPointedMagmaSigSigC
      field
        AS : Set
        eS : AS
        opS : AS -> AS -> AS
  
  module Unital where
    record Unital : Set where
      constructor UnitalC
      field
        A : Set
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
    record UnitalHom
      (U1 : Unital) (U2 : Unital) :
      Set where
      constructor UnitalHomC
      field
        hom : A U1 -> A U2
        pres-e : hom (e U1) == e U2
        pres-op :
          (x1 : A U1) (x2 : A U1) ->
          hom (op U1 x1 x2) ==
            op U2 (hom x1) (hom x2)
    data UnitalLang : Set where
      eL : UnitalLang
      opL :
        UnitalLang ->
        UnitalLang -> UnitalLang
    record UnitalProd : Set where
      constructor UnitalProdC
      field
        AP : Set
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
    record UnitalSig : Set where
      constructor UnitalSigSigC
      field
        AS : Set
        eS : AS
        opS : AS -> AS -> AS
  
  module Zero where
    record Zero : Set where
      constructor ZeroC
      field
        A : Set
        e : A
        op : A -> A -> A
        leftZero_op_e :
          (x : A) -> op e x == e
        rightZero_op_e :
          (x : A) -> op x e == e
    record ZeroHom
      (Z1 : Zero) (Z2 : Zero) :
      Set where
      constructor ZeroHomC
      field
        hom : A Z1 -> A Z2
        pres-e : hom (e Z1) == e Z2
        pres-op :
          (x1 : A Z1) (x2 : A Z1) ->
          hom (op Z1 x1 x2) ==
            op Z2 (hom x1) (hom x2)
    data ZeroLang : Set where
      eL : ZeroLang
      opL :
        ZeroLang -> ZeroLang -> ZeroLang
    record ZeroProd : Set where
      constructor ZeroProdC
      field
        AP : Set
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftZero_op_eP :
          (xP : Prod AP AP) ->
          opP eP xP == eP
        rightZero_op_eP :
          (xP : Prod AP AP) ->
          opP xP eP == eP
    record ZeroSig : Set where
      constructor ZeroSigSigC
      field
        AS : Set
        eS : AS
        opS : AS -> AS -> AS
  
  module Zero0 where
    record Zero0 : Set where
      constructor Zero0C
      field
        A : Set
        0 : A
        * : A -> A -> A
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
    record Zero0Hom
      (Z1 : Zero0) (Z2 : Zero0) :
      Set where
      constructor Zero0HomC
      field
        hom : A Z1 -> A Z2
        pres-0 : hom (0 Z1) == 0 Z2
        pres-* :
          (x1 : A Z1) (x2 : A Z1) ->
          hom (* Z1 x1 x2) ==
            * Z2 (hom x1) (hom x2)
    data Zero0Lang : Set where
      0L : Zero0Lang
      *L :
        Zero0Lang ->
        Zero0Lang -> Zero0Lang
    record Zero0Prod : Set where
      constructor Zero0ProdC
      field
        AP : Set
        0P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftZero_op_0P :
          (xP : Prod AP AP) ->
          *P 0P xP == 0P
        rightZero_op_0P :
          (xP : Prod AP AP) ->
          *P xP 0P == 0P
    record Zero0Sig : Set where
      constructor Zero0SigSigC
      field
        AS : Set
        0S : AS
        *S : AS -> AS -> AS
  
  module Zero_Ringoid0Sig where
    record Zero_Ringoid0Sig
      : Set where
      constructor Zero_Ringoid0SigC
      field
        A : Set
        0 : A
        * : A -> A -> A
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
        + : A -> A -> A
    record Zero_Ringoid0SigHom
      (Z1 : Zero_Ringoid0Sig)
      (Z2 : Zero_Ringoid0Sig) :
      Set where
      constructor Zero_Ringoid0SigHomC
      field
        hom : A Z1 -> A Z2
        pres-0 : hom (0 Z1) == 0 Z2
        pres-* :
          (x1 : A Z1) (x2 : A Z1) ->
          hom (* Z1 x1 x2) ==
            * Z2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A Z1) (x2 : A Z1) ->
          hom (+ Z1 x1 x2) ==
            + Z2 (hom x1) (hom x2)
    data Zero_Ringoid0SigLang
      : Set where
      0L : Zero_Ringoid0SigLang
      *L :
        Zero_Ringoid0SigLang ->
        Zero_Ringoid0SigLang ->
        Zero_Ringoid0SigLang
      +L :
        Zero_Ringoid0SigLang ->
        Zero_Ringoid0SigLang ->
        Zero_Ringoid0SigLang
    record Zero_Ringoid0SigProd
      : Set where
      constructor Zero_Ringoid0SigProdC
      field
        AP : Set
        0P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftZero_op_0P :
          (xP : Prod AP AP) ->
          *P 0P xP == 0P
        rightZero_op_0P :
          (xP : Prod AP AP) ->
          *P xP 0P == 0P
    record Zero_Ringoid0SigSig
      : Set where
      constructor Zero_Ringoid0SigSigSigC
      field
        AS : Set
        0S : AS
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
  

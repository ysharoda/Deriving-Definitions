------------------------------------------------------------------------
-- Checking declarations
------------------------------------------------------------------------
-- Solved Metas: 15911
-- Unsolved Metas: 0
------------------------------------------------------------------------
-- Unsolved problems: 0
------------------------------------------------------------------------
module MathScheme where
  module AbelianAdditiveGroup where
    record AbelianAdditiveGroup
      : Set where
      constructor AbelianAdditiveGroupC
      field
        A : Set
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
  
  module AbelianGroup where
    record AbelianGroup : Set where
      constructor AbelianGroupC
      field
        A : Set
        1 : A
        * : A -> A -> A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        inv : A -> A
        leftInverse_inv_op_1 :
          (x : A) -> * x (inv x) == 1
        rightInverse_inv_op_1 :
          (x : A) -> * (inv x) x == 1
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
  
  module AddCommMonWithMultMagma where
    record AddCommMonWithMultMagma
      : Set where
      constructor AddCommMonWithMultMagmaC
      field
        A : Set
        0 : A
        + : A -> A -> A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        * : A -> A -> A
  
  module AddCommMonWithMultSemigroup where
    record AddCommMonWithMultSemigroup
      : Set where
      constructor AddCommMonWithMultSemigroupC
      field
        A : Set
        * : A -> A -> A
        0 : A
        + : A -> A -> A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
  
  module AddGroup_RingoidSig where
    record AddGroup_RingoidSig
      : Set where
      constructor AddGroup_RingoidSigC
      field
        A : Set
        + : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        * : A -> A -> A
  
  module AdditiveCommutativeMonoid where
    record AdditiveCommutativeMonoid
      : Set where
      constructor AdditiveCommutativeMonoidC
      field
        A : Set
        0 : A
        + : A -> A -> A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
  
  module AdditiveCommutativeSemigroup where
    record AdditiveCommutativeSemigroup
      : Set where
      constructor AdditiveCommutativeSemigroupC
      field
        A : Set
        + : A -> A -> A
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
  
  module AdditiveGroup where
    record AdditiveGroup : Set where
      constructor AdditiveGroupC
      field
        A : Set
        0 : A
        + : A -> A -> A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
  
  module AdditiveMagma where
    record AdditiveMagma : Set where
      constructor AdditiveMagmaC
      field
        A : Set
        + : A -> A -> A
  
  module AdditiveMonoid where
    record AdditiveMonoid
      : Set where
      constructor AdditiveMonoidC
      field
        A : Set
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
  
  module AdditivePointedMagma where
    record AdditivePointedMagma
      : Set where
      constructor AdditivePointedMagmaC
      field
        A : Set
        0 : A
        + : A -> A -> A
  
  module AdditivePointedSemigroup where
    record AdditivePointedSemigroup
      : Set where
      constructor AdditivePointedSemigroupC
      field
        A : Set
        0 : A
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
  
  module AdditiveSemigroup where
    record AdditiveSemigroup
      : Set where
      constructor AdditiveSemigroupC
      field
        A : Set
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
  
  module AdditiveUnaryAntiDistribution where
    record AdditiveUnaryAntiDistribution
      : Set where
      constructor AdditiveUnaryAntiDistributionC
      field
        A : Set
        prim : A -> A
        + : A -> A -> A
        antidis_prim_+ :
          (x : A) (y : A) ->
          prim (+ x y) ==
            + (prim y) (prim x)
  
  module AdditiveUnital where
    record AdditiveUnital
      : Set where
      constructor AdditiveUnitalC
      field
        A : Set
        0 : A
        + : A -> A -> A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
  
  module AndDeMorgan where
    record AndDeMorgan : Set where
      constructor AndDeMorganC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        prim : A -> A
        andDeMorgan_*_+_prim :
          (x : A) (y : A) (z : A) ->
          prim (* x y) ==
            + (prim x) (prim y)
  
  module AntiAbsorbent where
    record AntiAbsorbent : Set where
      constructor AntiAbsorbentC
      field
        A : Set
        op : A -> A -> A
        antiAbsorbent :
          (x : A) (y : A) ->
          op x (op x y) == y
  
  module AssocPlusRingoid where
    record AssocPlusRingoid
      : Set where
      constructor AssocPlusRingoidC
      field
        A : Set
        + : A -> A -> A
        * : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
  
  module AssocTimesRingoid where
    record AssocTimesRingoid
      : Set where
      constructor AssocTimesRingoidC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
  
  module AssociativeLeftRingoid where
    record AssociativeLeftRingoid
      : Set where
      constructor AssociativeLeftRingoidC
      field
        A : Set
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        + : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
  
  module AssociativeNonDistributiveRingoid where
    record AssociativeNonDistributiveRingoid
      : Set where
      constructor AssociativeNonDistributiveRingoidC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
  
  module AssociativeRightRingoid where
    record AssociativeRightRingoid
      : Set where
      constructor AssociativeRightRingoidC
      field
        A : Set
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        + : A -> A -> A
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
  
  module Band where
    record Band : Set where
      constructor BandC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        idempotent_op :
          (x : A) -> op x x == x
  
  module BinaryInverse where
    record BinaryInverse : Set where
      constructor BinaryInverseC
      field
        A : Set
        |> : A -> A -> A
        <| : A -> A -> A
        leftInverse :
          (x : A) (y : A) ->
          <| (|> x y) x == y
        rightInverse :
          (x : A) (y : A) ->
          |> x (<| y x) == y
  
  module BooleanGroup where
    record BooleanGroup : Set where
      constructor BooleanGroupC
      field
        A : Set
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        unipotence :
          (x : A) -> op x x == e
  
  module BooleanRing where
    record BooleanRing : Set where
      constructor BooleanRingC
      field
        A : Set
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        + : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
        idempotent_* :
          (x : A) -> * x x == x
  
  module CancellativeCommutativeMonoid where
    record CancellativeCommutativeMonoid
      : Set where
      constructor CancellativeCommutativeMonoidC
      field
        A : Set
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        leftCancellative :
          (x : A) (y : A) (z : A) ->
          op z x == op z y -> x == y
        rightCancellative :
          (x : A) (y : A) (z : A) ->
          op x z == op y z -> x == y
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
  
  module CancellativeCommutativeSemigroup where
    record CancellativeCommutativeSemigroup
      : Set where
      constructor CancellativeCommutativeSemigroupC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
        leftCancellative :
          (x : A) (y : A) (z : A) ->
          op z x == op z y -> x == y
        rightCancellative :
          (x : A) (y : A) (z : A) ->
          op x z == op y z -> x == y
  
  module CancellativeMagma where
    record CancellativeMagma
      : Set where
      constructor CancellativeMagmaC
      field
        A : Set
        op : A -> A -> A
        leftCancellative :
          (x : A) (y : A) (z : A) ->
          op z x == op z y -> x == y
        rightCancellative :
          (x : A) (y : A) (z : A) ->
          op x z == op y z -> x == y
  
  module CancellativeMonoid where
    record CancellativeMonoid
      : Set where
      constructor CancellativeMonoidC
      field
        A : Set
        op : A -> A -> A
        e : A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        leftCancellative :
          (x : A) (y : A) (z : A) ->
          op z x == op z y -> x == y
        rightCancellative :
          (x : A) (y : A) (z : A) ->
          op x z == op y z -> x == y
  
  module CancellativeSemigroup where
    record CancellativeSemigroup
      : Set where
      constructor CancellativeSemigroupC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        leftCancellative :
          (x : A) (y : A) (z : A) ->
          op z x == op z y -> x == y
        rightCancellative :
          (x : A) (y : A) (z : A) ->
          op x z == op y z -> x == y
  
  module Carrier where
    record Carrier : Set where
      constructor CarrierC
      field
        A : Set
  
  module CommutativeAdditiveMagma where
    record CommutativeAdditiveMagma
      : Set where
      constructor CommutativeAdditiveMagmaC
      field
        A : Set
        + : A -> A -> A
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
  
  module CommutativeBand where
    record CommutativeBand
      : Set where
      constructor CommutativeBandC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        idempotent_op :
          (x : A) -> op x x == x
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
  
  module CommutativeGroup where
    record CommutativeGroup
      : Set where
      constructor CommutativeGroupC
      field
        A : Set
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        inv : A -> A
        leftInverse_inv_op_e :
          (x : A) -> op x (inv x) == e
        rightInverse_inv_op_e :
          (x : A) -> op (inv x) x == e
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
  
  module CommutativeMagma where
    record CommutativeMagma
      : Set where
      constructor CommutativeMagmaC
      field
        A : Set
        op : A -> A -> A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
  
  module CommutativeMonoid where
    record CommutativeMonoid
      : Set where
      constructor CommutativeMonoidC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        e : A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
  
  module CommutativeMonoid1 where
    record CommutativeMonoid1
      : Set where
      constructor CommutativeMonoid1C
      field
        A : Set
        1 : A
        op : A -> A -> A
        lunit_1 : (x : A) -> op 1 x == x
        runit_1 : (x : A) -> op x 1 == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
  
  module CommutativePointedMagma where
    record CommutativePointedMagma
      : Set where
      constructor CommutativePointedMagmaC
      field
        A : Set
        op : A -> A -> A
        e : A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
  
  module CommutativeRing where
    record CommutativeRing
      : Set where
      constructor CommutativeRingC
      field
        A : Set
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        + : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
  
  module CommutativeSemigroup where
    record CommutativeSemigroup
      : Set where
      constructor CommutativeSemigroupC
      field
        A : Set
        op : A -> A -> A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
  
  module ComplementSig where
    record ComplementSig : Set where
      constructor ComplementSigC
      field
        A : Set
        compl : A -> A
  
  module DoubleMonoid where
    record DoubleMonoid : Set where
      constructor DoubleMonoidC
      field
        A : Set
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
  
  module DualDeMorgan where
    record DualDeMorgan : Set where
      constructor DualDeMorganC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        prim : A -> A
        andDeMorgan_*_+_prim :
          (x : A) (y : A) (z : A) ->
          prim (* x y) ==
            + (prim x) (prim y)
        orDeMorgan_+_*_prim :
          (x : A) (y : A) (z : A) ->
          prim (+ x y) ==
            * (prim x) (prim y)
  
  module Empty where
    record Empty : Set where
      constructor EmptyC
      field
        
  
  module FixedPoint where
    record FixedPoint : Set where
      constructor FixedPointC
      field
        A : Set
        prim : A -> A
        e : A
        fixes_prim_e : prim e == e
  
  module Group where
    record Group : Set where
      constructor GroupC
      field
        A : Set
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        inv : A -> A
        leftInverse_inv_op_e :
          (x : A) -> op x (inv x) == e
        rightInverse_inv_op_e :
          (x : A) -> op (inv x) x == e
  
  module Group1 where
    record Group1 : Set where
      constructor Group1C
      field
        A : Set
        1 : A
        op : A -> A -> A
        lunit_1 : (x : A) -> op 1 x == x
        runit_1 : (x : A) -> op x 1 == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        inv : A -> A
        leftInverse_inv_op_1 :
          (x : A) -> op x (inv x) == 1
        rightInverse_inv_op_1 :
          (x : A) -> op (inv x) x == 1
  
  module IdempotentAdditiveMagma where
    record IdempotentAdditiveMagma
      : Set where
      constructor IdempotentAdditiveMagmaC
      field
        A : Set
        + : A -> A -> A
        idempotent_+ :
          (x : A) -> + x x == x
  
  module IdempotentMagma where
    record IdempotentMagma
      : Set where
      constructor IdempotentMagmaC
      field
        A : Set
        op : A -> A -> A
        idempotent_op :
          (x : A) -> op x x == x
  
  module IdempotentMultMagma where
    record IdempotentMultMagma
      : Set where
      constructor IdempotentMultMagmaC
      field
        A : Set
        * : A -> A -> A
        idempotent_* :
          (x : A) -> * x x == x
  
  module IdempotentSemiRng where
    record IdempotentSemiRng
      : Set where
      constructor IdempotentSemiRngC
      field
        A : Set
        + : A -> A -> A
        * : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        idempotent_+ :
          (x : A) -> + x x == x
  
  module IdempotentSemiring where
    record IdempotentSemiring
      : Set where
      constructor IdempotentSemiringC
      field
        A : Set
        + : A -> A -> A
        0 : A
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
        idempotent_+ :
          (x : A) -> + x x == x
  
  module IdempotentUnary where
    record IdempotentUnary
      : Set where
      constructor IdempotentUnaryC
      field
        A : Set
        prim : A -> A
        idempotent_prim :
          (x : A) ->
          prim (prim x) == prim x
  
  module Inverse where
    record Inverse : Set where
      constructor InverseC
      field
        A : Set
        inv : A -> A
        e : A
        op : A -> A -> A
        leftInverse_inv_op_e :
          (x : A) -> op x (inv x) == e
        rightInverse_inv_op_e :
          (x : A) -> op (inv x) x == e
  
  module InverseSig where
    record InverseSig : Set where
      constructor InverseSigC
      field
        A : Set
        inv : A -> A
        e : A
        op : A -> A -> A
  
  module InverseUnaryOperation where
    record InverseUnaryOperation
      : Set where
      constructor InverseUnaryOperationC
      field
        A : Set
        inv : A -> A
  
  module Involution where
    record Involution : Set where
      constructor InvolutionC
      field
        A : Set
        prim : A -> A
        involutive_prim :
          (x : A) -> prim (prim x) == x
  
  module InvolutiveAddMagmaSig where
    record InvolutiveAddMagmaSig
      : Set where
      constructor InvolutiveAddMagmaSigC
      field
        A : Set
        + : A -> A -> A
        prim : A -> A
  
  module InvolutiveFixedPoint where
    record InvolutiveFixedPoint
      : Set where
      constructor InvolutiveFixedPointC
      field
        A : Set
        prim : A -> A
        1 : A
        fixes_prim_1 : prim 1 == 1
        involutive_prim :
          (x : A) -> prim (prim x) == x
  
  module InvolutiveFixes where
    record InvolutiveFixes
      : Set where
      constructor InvolutiveFixesC
      field
        A : Set
        1 : A
        prim : A -> A
        fixes_prim_1 : prim 1 == 1
  
  module InvolutiveMagma where
    record InvolutiveMagma
      : Set where
      constructor InvolutiveMagmaC
      field
        A : Set
        prim : A -> A
        involutive_prim :
          (x : A) -> prim (prim x) == x
        op : A -> A -> A
        antidis_prim_op :
          (x : A) (y : A) ->
          prim (op x y) ==
            op (prim y) (prim x)
  
  module InvolutiveMagmaSig where
    record InvolutiveMagmaSig
      : Set where
      constructor InvolutiveMagmaSigC
      field
        A : Set
        prim : A -> A
        op : A -> A -> A
  
  module InvolutiveMultMagmaSig where
    record InvolutiveMultMagmaSig
      : Set where
      constructor InvolutiveMultMagmaSigC
      field
        A : Set
        * : A -> A -> A
        prim : A -> A
  
  module InvolutivePointedMagmaSig where
    record InvolutivePointedMagmaSig
      : Set where
      constructor InvolutivePointedMagmaSigC
      field
        A : Set
        prim : A -> A
        e : A
        op : A -> A -> A
  
  module InvolutivePointedSemigroup where
    record InvolutivePointedSemigroup
      : Set where
      constructor InvolutivePointedSemigroupC
      field
        A : Set
        op : A -> A -> A
        e : A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        prim : A -> A
        involutive_prim :
          (x : A) -> prim (prim x) == x
        antidis_prim_op :
          (x : A) (y : A) ->
          prim (op x y) ==
            op (prim y) (prim x)
  
  module InvolutiveRing where
    record InvolutiveRing
      : Set where
      constructor InvolutiveRingC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        1 : A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        prim : A -> A
        fixes_prim_1 : prim 1 == 1
        involutive_prim :
          (x : A) -> prim (prim x) == x
        antidis_prim_+ :
          (x : A) (y : A) ->
          prim (+ x y) ==
            + (prim y) (prim x)
        antidis_prim_* :
          (x : A) (y : A) ->
          prim (* x y) ==
            * (prim y) (prim x)
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
  
  module InvolutiveRingoid where
    record InvolutiveRingoid
      : Set where
      constructor InvolutiveRingoidC
      field
        A : Set
        prim : A -> A
        1 : A
        fixes_prim_1 : prim 1 == 1
        involutive_prim :
          (x : A) -> prim (prim x) == x
        * : A -> A -> A
        + : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        antidis_prim_+ :
          (x : A) (y : A) ->
          prim (+ x y) ==
            + (prim y) (prim x)
        antidis_prim_* :
          (x : A) (y : A) ->
          prim (* x y) ==
            * (prim y) (prim x)
  
  module InvolutiveRingoidSig where
    record InvolutiveRingoidSig
      : Set where
      constructor InvolutiveRingoidSigC
      field
        A : Set
        prim : A -> A
        * : A -> A -> A
        + : A -> A -> A
  
  module InvolutiveRingoidWithAntiDistrib where
    record InvolutiveRingoidWithAntiDistrib
      : Set where
      constructor InvolutiveRingoidWithAntiDistribC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        prim : A -> A
        antidis_prim_+ :
          (x : A) (y : A) ->
          prim (+ x y) ==
            + (prim y) (prim x)
        antidis_prim_* :
          (x : A) (y : A) ->
          prim (* x y) ==
            * (prim y) (prim x)
  
  module InvolutiveSemigroup where
    record InvolutiveSemigroup
      : Set where
      constructor InvolutiveSemigroupC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        prim : A -> A
        involutive_prim :
          (x : A) -> prim (prim x) == x
        antidis_prim_op :
          (x : A) (y : A) ->
          prim (op x y) ==
            op (prim y) (prim x)
  
  module Kei where
    record Kei : Set where
      constructor KeiC
      field
        A : Set
        |> : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        idempotent_|> :
          (x : A) -> |> x x == x
        rightSelfInverse_|> :
          (x : A) (y : A) ->
          |> (|> x y) y == x
  
  module Left0 where
    record Left0 : Set where
      constructor Left0C
      field
        A : Set
        0 : A
        op : A -> A -> A
        leftZero_op_0 :
          (x : A) -> op 0 x == 0
  
  module LeftBiMagma where
    record LeftBiMagma : Set where
      constructor LeftBiMagmaC
      field
        A : Set
        op : A -> A -> A
        linv : A -> A -> A
  
  module LeftBinaryInverse where
    record LeftBinaryInverse
      : Set where
      constructor LeftBinaryInverseC
      field
        A : Set
        |> : A -> A -> A
        <| : A -> A -> A
        leftInverse :
          (x : A) (y : A) ->
          <| (|> x y) x == y
  
  module LeftCancellative where
    record LeftCancellative
      : Set where
      constructor LeftCancellativeC
      field
        A : Set
        op : A -> A -> A
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
  
  module LeftCancellativeMagma where
    record LeftCancellativeMagma
      : Set where
      constructor LeftCancellativeMagmaC
      field
        A : Set
        op : A -> A -> A
        leftCancellative :
          (x : A) (y : A) (z : A) ->
          op z x == op z y -> x == y
  
  module LeftCancellativeOp where
    record LeftCancellativeOp
      : Set where
      constructor LeftCancellativeOpC
      field
        A : Set
        op : A -> A -> A
        linv : A -> A -> A
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
  
  module LeftCancellativeSemigroup where
    record LeftCancellativeSemigroup
      : Set where
      constructor LeftCancellativeSemigroupC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        leftCancellative :
          (x : A) (y : A) (z : A) ->
          op z x == op z y -> x == y
  
  module LeftDistributiveMagma where
    record LeftDistributiveMagma
      : Set where
      constructor LeftDistributiveMagmaC
      field
        A : Set
        op : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          op x (op y z) ==
            op (op x y) (op x z)
  
  module LeftIdempotence where
    record LeftIdempotence
      : Set where
      constructor LeftIdempotenceC
      field
        A : Set
        |> : A -> A -> A
        idempotent_|> :
          (x : A) -> |> x x == x
  
  module LeftInverse where
    record LeftInverse : Set where
      constructor LeftInverseC
      field
        A : Set
        inv : A -> A
        e : A
        op : A -> A -> A
        leftInverse_inv_op_e :
          (x : A) -> op x (inv x) == e
  
  module LeftInverseMagma where
    record LeftInverseMagma
      : Set where
      constructor LeftInverseMagmaC
      field
        A : Set
        linv : A -> A -> A
  
  module LeftLoop where
    record LeftLoop : Set where
      constructor LeftLoopC
      field
        A : Set
        op : A -> A -> A
        e : A
        runit_e : (x : A) -> op x e == x
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
  
  module LeftMonoid where
    record LeftMonoid : Set where
      constructor LeftMonoidC
      field
        A : Set
        op : A -> A -> A
        e : A
        lunit_e : (x : A) -> op e x == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
  
  module LeftPreSemiring where
    record LeftPreSemiring
      : Set where
      constructor LeftPreSemiringC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
  
  module LeftQuasiGroup where
    record LeftQuasiGroup
      : Set where
      constructor LeftQuasiGroupC
      field
        A : Set
        op : A -> A -> A
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
  
  module LeftRack where
    record LeftRack : Set where
      constructor LeftRackC
      field
        A : Set
        |> : A -> A -> A
        <| : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
  
  module LeftRingoid where
    record LeftRingoid : Set where
      constructor LeftRingoidC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
  
  module LeftShelf where
    record LeftShelf : Set where
      constructor LeftShelfC
      field
        A : Set
        |> : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
  
  module LeftShelfSig where
    record LeftShelfSig : Set where
      constructor LeftShelfSigC
      field
        A : Set
        |> : A -> A -> A
  
  module LeftSpindle where
    record LeftSpindle : Set where
      constructor LeftSpindleC
      field
        A : Set
        |> : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        idempotent_|> :
          (x : A) -> |> x x == x
  
  module LeftSpindle_Shelf where
    record LeftSpindle_Shelf
      : Set where
      constructor LeftSpindle_ShelfC
      field
        A : Set
        |> : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        idempotent_|> :
          (x : A) -> |> x x == x
        <| : A -> A -> A
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
  
  module LeftSpindle_ShelfSig where
    record LeftSpindle_ShelfSig
      : Set where
      constructor LeftSpindle_ShelfSigC
      field
        A : Set
        |> : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        idempotent_|> :
          (x : A) -> |> x x == x
        <| : A -> A -> A
  
  module LeftUnital where
    record LeftUnital : Set where
      constructor LeftUnitalC
      field
        A : Set
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
  
  module LeftZero where
    record LeftZero : Set where
      constructor LeftZeroC
      field
        A : Set
        e : A
        op : A -> A -> A
        leftZero_op_e :
          (x : A) -> op e x == e
  
  module Loop where
    record Loop : Set where
      constructor LoopC
      field
        A : Set
        op : A -> A -> A
        e : A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
        rinv : A -> A -> A
        rightCancel :
          (x : A) (y : A) ->
          op (rinv y x) x == y
        rightCancelOp :
          (x : A) (y : A) ->
          rinv (op y x) x == y
  
  module Magma where
    record Magma : Set where
      constructor MagmaC
      field
        A : Set
        op : A -> A -> A
  
  module MedialMagma where
    record MedialMagma : Set where
      constructor MedialMagmaC
      field
        A : Set
        op : A -> A -> A
        mediates :
          (w : A) (x : A) (y : A)
          (z : A) ->
          op (op x y) (op z w) ==
            op (op x z) (op y w)
  
  module MedialQuasiGroup where
    record MedialQuasiGroup
      : Set where
      constructor MedialQuasiGroupC
      field
        A : Set
        op : A -> A -> A
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
        rinv : A -> A -> A
        rightCancel :
          (x : A) (y : A) ->
          op (rinv y x) x == y
        rightCancelOp :
          (x : A) (y : A) ->
          rinv (op y x) x == y
        mediates :
          (w : A) (x : A) (y : A)
          (z : A) ->
          op (op x y) (op z w) ==
            op (op x z) (op y w)
  
  module MiddleAbsorption where
    record MiddleAbsorption
      : Set where
      constructor MiddleAbsorptionC
      field
        A : Set
        op : A -> A -> A
        middleAbsorb_* :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x z
  
  module MiddleCommute where
    record MiddleCommute : Set where
      constructor MiddleCommuteC
      field
        A : Set
        op : A -> A -> A
        middleCommute_* :
          (x : A) (y : A) (z : A) ->
          op (op (op x y) z) x ==
            op (op (op x z) y) x
  
  module Monoid where
    record Monoid : Set where
      constructor MonoidC
      field
        A : Set
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
  
  module Monoid1 where
    record Monoid1 : Set where
      constructor Monoid1C
      field
        A : Set
        1 : A
        op : A -> A -> A
        lunit_1 : (x : A) -> op 1 x == x
        runit_1 : (x : A) -> op x 1 == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
  
  module MoufangIdentity where
    record MoufangIdentity
      : Set where
      constructor MoufangIdentityC
      field
        A : Set
        op : A -> A -> A
        moufangId :
          (x : A) (y : A) (z : A) ->
          op (op z x) (op y z) ==
            op (op z (op x y)) z
  
  module MoufangLaw where
    record MoufangLaw : Set where
      constructor MoufangLawC
      field
        A : Set
        op : A -> A -> A
        moufangLaw :
          (e : A) (x : A) (y : A)
          (z : A) ->
          op y e == y ->
          op (op (op x y) z) x ==
            op x (op y (op (op e z) x))
  
  module MoufangLoop where
    record MoufangLoop : Set where
      constructor MoufangLoopC
      field
        A : Set
        op : A -> A -> A
        e : A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
        rinv : A -> A -> A
        rightCancel :
          (x : A) (y : A) ->
          op (rinv y x) x == y
        rightCancelOp :
          (x : A) (y : A) ->
          rinv (op y x) x == y
        moufangId :
          (x : A) (y : A) (z : A) ->
          op (op z x) (op y z) ==
            op (op z (op x y)) z
  
  module MoufangQuasiGroup where
    record MoufangQuasiGroup
      : Set where
      constructor MoufangQuasiGroupC
      field
        A : Set
        op : A -> A -> A
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
        rinv : A -> A -> A
        rightCancel :
          (x : A) (y : A) ->
          op (rinv y x) x == y
        rightCancelOp :
          (x : A) (y : A) ->
          rinv (op y x) x == y
        moufangLaw :
          (e : A) (x : A) (y : A)
          (z : A) ->
          op y e == y ->
          op (op (op x y) z) x ==
            op x (op y (op (op e z) x))
  
  module MultCommutativeMonoid where
    record MultCommutativeMonoid
      : Set where
      constructor MultCommutativeMonoidC
      field
        A : Set
        1 : A
        * : A -> A -> A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
  
  module MultGroup where
    record MultGroup : Set where
      constructor MultGroupC
      field
        A : Set
        1 : A
        * : A -> A -> A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        inv : A -> A
        leftInverse_inv_op_1 :
          (x : A) -> * x (inv x) == 1
        rightInverse_inv_op_1 :
          (x : A) -> * (inv x) x == 1
  
  module MultMagma where
    record MultMagma : Set where
      constructor MultMagmaC
      field
        A : Set
        * : A -> A -> A
  
  module MultMonoid where
    record MultMonoid : Set where
      constructor MultMonoidC
      field
        A : Set
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
  
  module MultPointedMagma where
    record MultPointedMagma
      : Set where
      constructor MultPointedMagmaC
      field
        A : Set
        1 : A
        * : A -> A -> A
  
  module MultPointedSemigroup where
    record MultPointedSemigroup
      : Set where
      constructor MultPointedSemigroupC
      field
        A : Set
        1 : A
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
  
  module MultSemigroup where
    record MultSemigroup : Set where
      constructor MultSemigroupC
      field
        A : Set
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
  
  module MultUnaryAntiDistribution where
    record MultUnaryAntiDistribution
      : Set where
      constructor MultUnaryAntiDistributionC
      field
        A : Set
        prim : A -> A
        * : A -> A -> A
        antidis_prim_* :
          (x : A) (y : A) ->
          prim (* x y) ==
            * (prim y) (prim x)
  
  module MultUnital where
    record MultUnital : Set where
      constructor MultUnitalC
      field
        A : Set
        1 : A
        * : A -> A -> A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
  
  module NearRing where
    record NearRing : Set where
      constructor NearRingC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
  
  module NearSemiring where
    record NearSemiring : Set where
      constructor NearSemiringC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
  
  module NonDistributiveAddPreSemiring where
    record NonDistributiveAddPreSemiring
      : Set where
      constructor NonDistributiveAddPreSemiringC
      field
        A : Set
        + : A -> A -> A
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        * : A -> A -> A
  
  module NonassociativeNondistributiveRing where
    record NonassociativeNondistributiveRing
      : Set where
      constructor NonassociativeNondistributiveRingC
      field
        A : Set
        * : A -> A -> A
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        inv : A -> A
        leftInverse_inv_op_1 :
          (x : A) -> * x (inv x) == 1
        rightInverse_inv_op_1 :
          (x : A) -> * (inv x) x == 1
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        + : A -> A -> A
  
  module NonassociativeRing where
    record NonassociativeRing
      : Set where
      constructor NonassociativeRingC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        inv : A -> A
        leftInverse_inv_op_1 :
          (x : A) -> * x (inv x) == 1
        rightInverse_inv_op_1 :
          (x : A) -> * (inv x) x == 1
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
  
  module NormalBand where
    record NormalBand : Set where
      constructor NormalBandC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        idempotent_op :
          (x : A) -> op x x == x
        middleCommute_* :
          (x : A) (y : A) (z : A) ->
          op (op (op x y) z) x ==
            op (op (op x z) y) x
  
  module OrDeMorgran where
    record OrDeMorgran : Set where
      constructor OrDeMorgranC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        prim : A -> A
        orDeMorgan_+_*_prim :
          (x : A) (y : A) (z : A) ->
          prim (+ x y) ==
            * (prim x) (prim y)
  
  module Pointed where
    record Pointed : Set where
      constructor PointedC
      field
        A : Set
        e : A
  
  module Pointed0Magma where
    record Pointed0Magma : Set where
      constructor Pointed0MagmaC
      field
        A : Set
        0 : A
        op : A -> A -> A
  
  module Pointed1Magma where
    record Pointed1Magma : Set where
      constructor Pointed1MagmaC
      field
        A : Set
        1 : A
        op : A -> A -> A
  
  module PointedMagma where
    record PointedMagma : Set where
      constructor PointedMagmaC
      field
        A : Set
        e : A
        op : A -> A -> A
  
  module PointedOne where
    record PointedOne : Set where
      constructor PointedOneC
      field
        A : Set
        1 : A
  
  module PointedPlusMagma where
    record PointedPlusMagma
      : Set where
      constructor PointedPlusMagmaC
      field
        A : Set
        + : A -> A -> A
        e : A
  
  module PointedSemigroup where
    record PointedSemigroup
      : Set where
      constructor PointedSemigroupC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        e : A
  
  module PointedSteinerMagma where
    record PointedSteinerMagma
      : Set where
      constructor PointedSteinerMagmaC
      field
        A : Set
        op : A -> A -> A
        e : A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
        antiAbsorbent :
          (x : A) (y : A) ->
          op x (op x y) == y
  
  module PointedTimesMagma where
    record PointedTimesMagma
      : Set where
      constructor PointedTimesMagmaC
      field
        A : Set
        * : A -> A -> A
        e : A
  
  module PointedTimesZeroMagma where
    record PointedTimesZeroMagma
      : Set where
      constructor PointedTimesZeroMagmaC
      field
        A : Set
        0 : A
        * : A -> A -> A
  
  module PointedUnarySystem where
    record PointedUnarySystem
      : Set where
      constructor PointedUnarySystemC
      field
        A : Set
        prim : A -> A
        e : A
  
  module PointedZero where
    record PointedZero : Set where
      constructor PointedZeroC
      field
        A : Set
        0 : A
  
  module PreSemiring where
    record PreSemiring : Set where
      constructor PreSemiringC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
  
  module PrimAdditiveGroup where
    record PrimAdditiveGroup
      : Set where
      constructor PrimAdditiveGroupC
      field
        A : Set
        0_ : A
        *_ : A -> A -> A
        lunit_0_ :
          (x : A) -> *_ 0_ x == x
        runit_0_ :
          (x : A) -> *_ x 0_ == x
        associative_*_ :
          (x : A) (y : A) (z : A) ->
          *_ (*_ x y) z == *_ x (*_ y z)
        inv_ : A -> A
        leftInverse_inv_op_0_ :
          (x : A) -> *_ x (inv_ x) == 0_
        rightInverse_inv_op_0_ :
          (x : A) -> *_ (inv_ x) x == 0_
        commutative_*_ :
          (x : A) (y : A) ->
          *_ x y == *_ y x
  
  module PrimRingoidSig where
    record PrimRingoidSig
      : Set where
      constructor PrimRingoidSigC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        prim : A -> A
  
  module PseudoInverse where
    record PseudoInverse : Set where
      constructor PseudoInverseC
      field
        A : Set
        inv : A -> A
        op : A -> A -> A
        quasiInverse_inv_op_e :
          (x : A) ->
          op (op x (inv x)) x == x
  
  module PseudoInverseSig where
    record PseudoInverseSig
      : Set where
      constructor PseudoInverseSigC
      field
        A : Set
        inv : A -> A
        op : A -> A -> A
  
  module PseudoInvolution where
    record PseudoInvolution
      : Set where
      constructor PseudoInvolutionC
      field
        A : Set
        inv : A -> A
        op : A -> A -> A
        quasiRightInverse_inv_op_e :
          (x : A) ->
          op (op (inv x) x) (inv x) ==
            inv x
  
  module Quandle where
    record Quandle : Set where
      constructor QuandleC
      field
        A : Set
        |> : A -> A -> A
        <| : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
        leftInverse :
          (x : A) (y : A) ->
          <| (|> x y) x == y
        rightInverse :
          (x : A) (y : A) ->
          |> x (<| y x) == y
        idempotent_|> :
          (x : A) -> |> x x == x
        idempotent_<| :
          (x : A) -> <| x x == x
  
  module QuasiGroup where
    record QuasiGroup : Set where
      constructor QuasiGroupC
      field
        A : Set
        op : A -> A -> A
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
        rinv : A -> A -> A
        rightCancel :
          (x : A) (y : A) ->
          op (rinv y x) x == y
        rightCancelOp :
          (x : A) (y : A) ->
          rinv (op y x) x == y
  
  module QuasiInverse where
    record QuasiInverse : Set where
      constructor QuasiInverseC
      field
        A : Set
        inv : A -> A
        op : A -> A -> A
        quasiInverse_inv_op_e :
          (x : A) ->
          op (op x (inv x)) x == x
        quasiRightInverse_inv_op_e :
          (x : A) ->
          op (op (inv x) x) (inv x) ==
            inv x
  
  module Rack where
    record Rack : Set where
      constructor RackC
      field
        A : Set
        |> : A -> A -> A
        <| : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
        leftInverse :
          (x : A) (y : A) ->
          <| (|> x y) x == y
        rightInverse :
          (x : A) (y : A) ->
          |> x (<| y x) == y
  
  module RectangularBand where
    record RectangularBand
      : Set where
      constructor RectangularBandC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        idempotent_op :
          (x : A) -> op x x == x
        middleCommute_* :
          (x : A) (y : A) (z : A) ->
          op (op (op x y) z) x ==
            op (op (op x z) y) x
  
  module RegularSemigroup where
    record RegularSemigroup
      : Set where
      constructor RegularSemigroupC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        inv : A -> A
        quasiInverse_inv_op_e :
          (x : A) ->
          op (op x (inv x)) x == x
  
  module Right0 where
    record Right0 : Set where
      constructor Right0C
      field
        A : Set
        0 : A
        op : A -> A -> A
        rightZero_op_0 :
          (x : A) -> op x 0 == 0
  
  module RightBiMagma where
    record RightBiMagma : Set where
      constructor RightBiMagmaC
      field
        A : Set
        op : A -> A -> A
        rinv : A -> A -> A
  
  module RightBinaryInverse where
    record RightBinaryInverse
      : Set where
      constructor RightBinaryInverseC
      field
        A : Set
        |> : A -> A -> A
        <| : A -> A -> A
        rightInverse :
          (x : A) (y : A) ->
          |> x (<| y x) == y
  
  module RightCancellative where
    record RightCancellative
      : Set where
      constructor RightCancellativeC
      field
        A : Set
        op : A -> A -> A
        rinv : A -> A -> A
        rightCancel :
          (x : A) (y : A) ->
          op (rinv y x) x == y
  
  module RightCancellativeMagma where
    record RightCancellativeMagma
      : Set where
      constructor RightCancellativeMagmaC
      field
        A : Set
        op : A -> A -> A
        rightCancellative :
          (x : A) (y : A) (z : A) ->
          op x z == op y z -> x == y
  
  module RightCancellativeOp where
    record RightCancellativeOp
      : Set where
      constructor RightCancellativeOpC
      field
        A : Set
        op : A -> A -> A
        rinv : A -> A -> A
        rightCancelOp :
          (x : A) (y : A) ->
          rinv (op y x) x == y
  
  module RightCancellativeSemigroup where
    record RightCancellativeSemigroup
      : Set where
      constructor RightCancellativeSemigroupC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        rightCancellative :
          (x : A) (y : A) (z : A) ->
          op x z == op y z -> x == y
  
  module RightDistributiveMagma where
    record RightDistributiveMagma
      : Set where
      constructor RightDistributiveMagmaC
      field
        A : Set
        op : A -> A -> A
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          op (op y z) x ==
            op (op y x) (op z x)
  
  module RightIdempotence where
    record RightIdempotence
      : Set where
      constructor RightIdempotenceC
      field
        A : Set
        <| : A -> A -> A
        idempotent_<| :
          (x : A) -> <| x x == x
  
  module RightInverse where
    record RightInverse : Set where
      constructor RightInverseC
      field
        A : Set
        inv : A -> A
        e : A
        op : A -> A -> A
        rightInverse_inv_op_e :
          (x : A) -> op (inv x) x == e
  
  module RightInverseMagma where
    record RightInverseMagma
      : Set where
      constructor RightInverseMagmaC
      field
        A : Set
        rinv : A -> A -> A
  
  module RightMonoid where
    record RightMonoid : Set where
      constructor RightMonoidC
      field
        A : Set
        op : A -> A -> A
        e : A
        runit_e : (x : A) -> op x e == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
  
  module RightPreSemiring where
    record RightPreSemiring
      : Set where
      constructor RightPreSemiringC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
  
  module RightQuasiGroup where
    record RightQuasiGroup
      : Set where
      constructor RightQuasiGroupC
      field
        A : Set
        op : A -> A -> A
        rinv : A -> A -> A
        rightCancel :
          (x : A) (y : A) ->
          op (rinv y x) x == y
        rightCancelOp :
          (x : A) (y : A) ->
          rinv (op y x) x == y
  
  module RightRack where
    record RightRack : Set where
      constructor RightRackC
      field
        A : Set
        <| : A -> A -> A
        |> : A -> A -> A
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
  
  module RightRingoid where
    record RightRingoid : Set where
      constructor RightRingoidC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
  
  module RightSelfInverse where
    record RightSelfInverse
      : Set where
      constructor RightSelfInverseC
      field
        A : Set
        |> : A -> A -> A
        rightSelfInverse_|> :
          (x : A) (y : A) ->
          |> (|> x y) y == x
  
  module RightShelf where
    record RightShelf : Set where
      constructor RightShelfC
      field
        A : Set
        <| : A -> A -> A
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
  
  module RightShelfSig where
    record RightShelfSig : Set where
      constructor RightShelfSigC
      field
        A : Set
        <| : A -> A -> A
  
  module RightSpindle where
    record RightSpindle : Set where
      constructor RightSpindleC
      field
        A : Set
        <| : A -> A -> A
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
        idempotent_<| :
          (x : A) -> <| x x == x
  
  module RightSpindle_Shelf where
    record RightSpindle_Shelf
      : Set where
      constructor RightSpindle_ShelfC
      field
        A : Set
        <| : A -> A -> A
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
        idempotent_<| :
          (x : A) -> <| x x == x
        |> : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
  
  module RightSpindle_ShelfSig where
    record RightSpindle_ShelfSig
      : Set where
      constructor RightSpindle_ShelfSigC
      field
        A : Set
        <| : A -> A -> A
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
        idempotent_<| :
          (x : A) -> <| x x == x
        |> : A -> A -> A
  
  module RightUnital where
    record RightUnital : Set where
      constructor RightUnitalC
      field
        A : Set
        e : A
        op : A -> A -> A
        runit_e : (x : A) -> op x e == x
  
  module RightZero where
    record RightZero : Set where
      constructor RightZeroC
      field
        A : Set
        e : A
        op : A -> A -> A
        rightZero_op_e :
          (x : A) -> op x e == e
  
  module Ring where
    record Ring : Set where
      constructor RingC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
  
  module Ringoid where
    record Ringoid : Set where
      constructor RingoidC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
  
  module Ringoid01Sig where
    record Ringoid01Sig : Set where
      constructor Ringoid01SigC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        0 : A
        1 : A
  
  module Ringoid0Sig where
    record Ringoid0Sig : Set where
      constructor Ringoid0SigC
      field
        A : Set
        0 : A
        + : A -> A -> A
        * : A -> A -> A
  
  module Ringoid1 where
    record Ringoid1 : Set where
      constructor Ringoid1C
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        1 : A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
  
  module Ringoid1Sig where
    record Ringoid1Sig : Set where
      constructor Ringoid1SigC
      field
        A : Set
        * : A -> A -> A
        1 : A
        + : A -> A -> A
  
  module RingoidSig where
    record RingoidSig : Set where
      constructor RingoidSigC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
  
  module RingoidWithAddAntiDistrib where
    record RingoidWithAddAntiDistrib
      : Set where
      constructor RingoidWithAddAntiDistribC
      field
        A : Set
        + : A -> A -> A
        prim : A -> A
        antidis_prim_+ :
          (x : A) (y : A) ->
          prim (+ x y) ==
            + (prim y) (prim x)
        * : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
  
  module RingoidWithInvolution where
    record RingoidWithInvolution
      : Set where
      constructor RingoidWithInvolutionC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        prim : A -> A
  
  module RingoidWithMultAntiDistrib where
    record RingoidWithMultAntiDistrib
      : Set where
      constructor RingoidWithMultAntiDistribC
      field
        A : Set
        * : A -> A -> A
        prim : A -> A
        antidis_prim_* :
          (x : A) (y : A) ->
          prim (* x y) ==
            * (prim y) (prim x)
        + : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
  
  module Rng where
    record Rng : Set where
      constructor RngC
      field
        A : Set
        0 : A
        + : A -> A -> A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
  
  module SemiRng where
    record SemiRng : Set where
      constructor SemiRngC
      field
        A : Set
        * : A -> A -> A
        + : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
  
  module SemiRngWithUnit where
    record SemiRngWithUnit
      : Set where
      constructor SemiRngWithUnitC
      field
        A : Set
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        + : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
  
  module Semigroup where
    record Semigroup : Set where
      constructor SemigroupC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
  
  module Semiring where
    record Semiring : Set where
      constructor SemiringC
      field
        A : Set
        0 : A
        + : A -> A -> A
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
  
  module Shelf where
    record Shelf : Set where
      constructor ShelfC
      field
        A : Set
        |> : A -> A -> A
        <| : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
  
  module ShelfSig where
    record ShelfSig : Set where
      constructor ShelfSigC
      field
        A : Set
        |> : A -> A -> A
        <| : A -> A -> A
  
  module Sloop where
    record Sloop : Set where
      constructor SloopC
      field
        A : Set
        e : A
        op : A -> A -> A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
        antiAbsorbent :
          (x : A) (y : A) ->
          op x (op x y) == y
        unipotence :
          (x : A) -> op x x == e
  
  module Spindle where
    record Spindle : Set where
      constructor SpindleC
      field
        A : Set
        |> : A -> A -> A
        <| : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
        idempotent_|> :
          (x : A) -> |> x x == x
        idempotent_<| :
          (x : A) -> <| x x == x
  
  module Squag where
    record Squag : Set where
      constructor SquagC
      field
        A : Set
        op : A -> A -> A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
        antiAbsorbent :
          (x : A) (y : A) ->
          op x (op x y) == y
        idempotent_op :
          (x : A) -> op x x == x
  
  module SteinerMagma where
    record SteinerMagma : Set where
      constructor SteinerMagmaC
      field
        A : Set
        op : A -> A -> A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
        antiAbsorbent :
          (x : A) (y : A) ->
          op x (op x y) == y
  
  module TwoPointed where
    record TwoPointed : Set where
      constructor TwoPointedC
      field
        A : Set
        e1 : A
        e2 : A
  
  module TwoPointed01 where
    record TwoPointed01 : Set where
      constructor TwoPointed01C
      field
        A : Set
        e1 : A
        e2 : A
  
  module UnaryAntiDistribution where
    record UnaryAntiDistribution
      : Set where
      constructor UnaryAntiDistributionC
      field
        A : Set
        prim : A -> A
        op : A -> A -> A
        antidis_prim_op :
          (x : A) (y : A) ->
          prim (op x y) ==
            op (prim y) (prim x)
  
  module UnaryDistributes where
    record UnaryDistributes
      : Set where
      constructor UnaryDistributesC
      field
        A : Set
        prim : A -> A
        op : A -> A -> A
        distribute_prim_op :
          (x : A) (y : A) ->
          prim (op x y) ==
            op (prim x) (prim y)
  
  module UnaryOperation where
    record UnaryOperation
      : Set where
      constructor UnaryOperationC
      field
        A : Set
        prim : A -> A
  
  module UnipotentPointedMagma where
    record UnipotentPointedMagma
      : Set where
      constructor UnipotentPointedMagmaC
      field
        A : Set
        e : A
        op : A -> A -> A
        unipotence :
          (x : A) -> op x x == e
  
  module Unital where
    record Unital : Set where
      constructor UnitalC
      field
        A : Set
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
  
  module Zero where
    record Zero : Set where
      constructor ZeroC
      field
        A : Set
        e : A
        op : A -> A -> A
        leftZero_op_e :
          (x : A) -> op e x == e
        rightZero_op_e :
          (x : A) -> op x e == e
  
  module Zero0 where
    record Zero0 : Set where
      constructor Zero0C
      field
        A : Set
        0 : A
        * : A -> A -> A
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
  
  module Zero_Ringoid0Sig where
    record Zero_Ringoid0Sig
      : Set where
      constructor Zero_Ringoid0SigC
      field
        A : Set
        0 : A
        * : A -> A -> A
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
        + : A -> A -> A
  

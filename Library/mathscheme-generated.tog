------------------------------------------------------------------------
-- Checking declarations
------------------------------------------------------------------------
-- Solved Metas: 180010
-- Unsolved Metas: 0
------------------------------------------------------------------------
-- Unsolved problems: 0
------------------------------------------------------------------------
module MathScheme where
  data Prod
    (A : Set) (B : Set) : Set where
    
  module NatNums where
    
  
  data Nat : Set where
    zero : Nat
    suc : Nat -> Nat
  module Prelude where
    
  
  data Fin (n : Nat) : Set where
    fzero :
      (m : Nat) (p : n == suc m) ->
      Fin n
    fsuc :
      (m : Nat) (p : n == suc m)
      (i : Fin m) -> Fin n
  pred : Nat -> Nat
  pred (zero) = zero
  pred (suc n) = n
  data Vec
    (A : Set) (n : Nat) : Set where
    nil : n == zero -> Vec A n
    cons :
      (m : Nat) (p : n == suc m)
      (x : A)
      (xs : Vec A m) -> Vec A n
  data Unit : Set where
    unit : Unit
  EmptyT : Set
  EmptyT = (A : Set) -> A
  subst :
    (A : Set) (x : A) (y : A)
    (P : A -> Set) ->
    x == y -> P x -> P y
  subst _ _ _ P =
    J _ _ _ (\ x y _ -> P x -> P y)
      (\ x p -> p)
  sym :
    (A : Set) (x : A) (y : A) ->
    x == y -> y == x
  sym A x y p =
    subst _ _ _ (\ y -> y == x) p
      refl
  cong :
    (A : Set) (B : Set) (x : A)
    (y : A)
    (f : A -> B) ->
    x == y -> f x == f y
  cong _ _ _ _ f p =
    subst _ _ _ (\ y -> f _ == f y)
      p
      refl
  IsZero : Nat -> Set
  IsZero (zero) = Unit
  IsZero (suc n) = EmptyT
  zeroNOTsuc :
    (n : Nat) ->
    zero == suc n -> EmptyT
  zeroNOTsuc _ p =
    subst _ _ _ IsZero p unit
  trans :
    (A : Set) (x : A) (y : A)
    (z : A) ->
    x == y -> y == z -> x == z
  trans A x _ _ p q =
    subst _ _ _ (\ y -> x == y) q p
  lemma :
    (n : Nat) (m : Nat) ->
    n == suc m ->
    n == zero -> EmptyT
  lemma _ _ p q =
    zeroNOTsuc _
      (trans _ _ _ _ (sym _ _ _ q) p)
  sucInj :
    (n : Nat) (m : Nat) ->
    suc n == suc m -> n == m
  sucInj _ _ p =
    cong _ _ _ _ pred p
  lookup :
    (A : Set) (n : Nat) (i : Fin n)
    (v : Vec A n) -> A
  lookup A n (fzero m p) (nil q) =
    lemma _ _ p q A
  lookup A n (fzero m p) (cons
                          l
                          q
                          x
                          xs) = x
  lookup A n (fsuc m p i) (nil
                           q) = lemma _ _ p q A
  lookup A n (fsuc m p i) (cons
                           l
                           q
                           x
                           xs) =
    lookup _ m i
      (subst _ _ _ (Vec A)
         (sucInj _ _
            (trans _ _ _ _ (sym _ _ _ q) p))
         xs)
  module Code where
    
  
  open NatNums
  data Wrap (A : Set) : Set where
    Q : A -> Wrap A
  data Stage : Set where
    s0 : Stage
    s1 : Stage
  CodeRep :
    (A : Set) (s : Stage) -> Set
  CodeRep A (s0) = A
  CodeRep A (s1) =
    Wrap (CodeRep A s0)
  uncode :
    (A : Set) ->
    CodeRep A s1 -> CodeRep A s0
  uncode _ (Q x) = x
  code :
    (A : Set) ->
    CodeRep A s0 -> CodeRep A s1
  code _ x = Q x
  run :
    (A : Set) -> CodeRep A s1 -> A
  run _ (Q x) = x
  module Staging where
    
  
  open Code
  data Choice : Set where
    Expr : Choice
    Const : Choice
  data Comp
    (A : Set) (s : Stage) :
    Set where
    Computation :
      Choice ->
      CodeRep A s -> Comp A s
  data Staged
    (A : Set) : Set where
    Now : A -> Staged A
    Later : Comp A s1 -> Staged A
  expr :
    (A : Set) ->
    CodeRep A s1 -> Staged A
  expr _ x =
    Later (Computation Expr x)
  const :
    (A : Set) ->
    CodeRep A s1 -> Staged A
  const _ x =
    Later (Computation Const x)
  stage0 :
    (A : Set) -> A -> Staged A
  stage0 _ x = Now x
  stage1 :
    (A : Set) (B : Set) ->
    (A -> B) ->
    (CodeRep A s1 ->
     CodeRep B s1) ->
    Staged A -> Staged B
  stage1 _ _ f g (Now x) =
    Now (f x)
  stage1 _ _ f g (Later
                  (Computation _ x)) =
    expr _ (g x)
  stage2 :
    (A : Set) (B : Set) (C : Set) ->
    (A -> B -> C) ->
    (CodeRep A s1 ->
     CodeRep B s1 -> CodeRep C s1) ->
    Staged A -> Staged B -> Staged C
  stage2 _ _ _ f _ (Now x) (Now
                            y) = stage0 _ (f x y)
  stage2 _ _ _ _ g (Now x) (Later
                            (Computation _ y)) =
    expr _ (g (code _ x) y)
  stage2 _ _ _ _ g (Later
                    (Computation _ x)) (Now y) =
    expr _ (g x (code _ y))
  stage2 _ _ _ _ g (Later
                    (Computation _ x)) (Later
                                        (Computation _ y)) =
    expr _ (g x y)
  codeLift1 :
    (A : Set) (B : Set) ->
    (A -> B) ->
    CodeRep A s1 -> CodeRep B s1
  codeLift1 _ _ f (Q x) = Q (f x)
  codeLift2 :
    (A : Set) (B : Set) (C : Set) ->
    (A -> B -> C) ->
    CodeRep A s1 ->
    CodeRep B s1 -> CodeRep C s1
  codeLift2 _ _ _ f (Q x) (Q y) =
    Q (f x y)
  module AbelianAdditiveGroup where
    record AbelianAdditiveGroup
      (A : Set) : Set where
      constructor AbelianAdditiveGroupC
      field
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
    record AbelianAdditiveGroupSig
      (AS : Set) : Set where
      constructor AbelianAdditiveGroupSigSigC
      field
        +S : AS -> AS -> AS
        0S : AS
        negS : AS -> AS
    record AbelianAdditiveGroupProd
      (AP : Set) : Set where
      constructor AbelianAdditiveGroupProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        negP : Prod AP AP -> Prod AP AP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        leftInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P xP (negP xP) == 0P
        rightInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P (negP xP) xP == 0P
    record AbelianAdditiveGroupHom
      (A1 : Set) (A2 : Set)
      (Ab1 : AbelianAdditiveGroup A1)
      (Ab2 : AbelianAdditiveGroup
         A2) : Set where
      constructor AbelianAdditiveGroupHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ab1 x1 x2) ==
            + Ab2 (hom x1) (hom x2)
        pres-0 : hom (0 Ab1) == 0 Ab2
        pres-neg :
          (x1 : A1) ->
          hom (neg Ab1 x1) ==
            neg Ab2 (hom x1)
    record AbelianAdditiveGroupRelInterp
      (A1 : Set) (A2 : Set)
      (Ab1 : AbelianAdditiveGroup A1)
      (Ab2 : AbelianAdditiveGroup
         A2) : Set where
      constructor AbelianAdditiveGroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ab1 x1 x2)
            (+ Ab2 y1 y2)
        interp-0 :
          interp (0 Ab1) (0 Ab2)
        interp-neg :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (neg Ab1 x1) (neg Ab2 y1)
    data AbelianAdditiveGroupTerm
      : Set where
      +L :
        AbelianAdditiveGroupTerm ->
        AbelianAdditiveGroupTerm ->
        AbelianAdditiveGroupTerm
      0L : AbelianAdditiveGroupTerm
      negL :
        AbelianAdditiveGroupTerm ->
        AbelianAdditiveGroupTerm
    data ClAbelianAdditiveGroupTerm
      (A : Set) : Set where
      sing :
        A ->
        ClAbelianAdditiveGroupTerm A
      +Cl :
        ClAbelianAdditiveGroupTerm A ->
        ClAbelianAdditiveGroupTerm A ->
        ClAbelianAdditiveGroupTerm A
      0Cl :
        ClAbelianAdditiveGroupTerm A
      negCl :
        ClAbelianAdditiveGroupTerm A ->
        ClAbelianAdditiveGroupTerm A
    data OpAbelianAdditiveGroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpAbelianAdditiveGroupTerm n
      +OL :
        OpAbelianAdditiveGroupTerm n ->
        OpAbelianAdditiveGroupTerm n ->
        OpAbelianAdditiveGroupTerm n
      0OL :
        OpAbelianAdditiveGroupTerm n
      negOL :
        OpAbelianAdditiveGroupTerm n ->
        OpAbelianAdditiveGroupTerm n
    data OpAbelianAdditiveGroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAbelianAdditiveGroupTerm2 n A
      sing2 :
        A ->
        OpAbelianAdditiveGroupTerm2 n A
      +OL2 :
        OpAbelianAdditiveGroupTerm2 n
          A ->
        OpAbelianAdditiveGroupTerm2 n
          A ->
        OpAbelianAdditiveGroupTerm2 n A
      0OL2 :
        OpAbelianAdditiveGroupTerm2 n A
      negOL2 :
        OpAbelianAdditiveGroupTerm2 n
          A ->
        OpAbelianAdditiveGroupTerm2 n A
  
  module AbelianGroup where
    record AbelianGroup
      (A : Set) : Set where
      constructor AbelianGroupC
      field
        1 : A
        * : A -> A -> A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        inv : A -> A
        leftInverse_inv_op_1 :
          (x : A) -> * x (inv x) == 1
        rightInverse_inv_op_1 :
          (x : A) -> * (inv x) x == 1
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
    record AbelianGroupSig
      (AS : Set) : Set where
      constructor AbelianGroupSigSigC
      field
        1S : AS
        *S : AS -> AS -> AS
        invS : AS -> AS
    record AbelianGroupProd
      (AP : Set) : Set where
      constructor AbelianGroupProdC
      field
        1P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        invP : Prod AP AP -> Prod AP AP
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftInverse_inv_op_1P :
          (xP : Prod AP AP) ->
          *P xP (invP xP) == 1P
        rightInverse_inv_op_1P :
          (xP : Prod AP AP) ->
          *P (invP xP) xP == 1P
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
    record AbelianGroupHom
      (A1 : Set) (A2 : Set)
      (Ab1 : AbelianGroup A1)
      (Ab2 : AbelianGroup A2) :
      Set where
      constructor AbelianGroupHomC
      field
        hom : A1 -> A2
        pres-1 : hom (1 Ab1) == 1 Ab2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Ab1 x1 x2) ==
            * Ab2 (hom x1) (hom x2)
        pres-inv :
          (x1 : A1) ->
          hom (inv Ab1 x1) ==
            inv Ab2 (hom x1)
    record AbelianGroupRelInterp
      (A1 : Set) (A2 : Set)
      (Ab1 : AbelianGroup A1)
      (Ab2 : AbelianGroup A2) :
      Set where
      constructor AbelianGroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-1 :
          interp (1 Ab1) (1 Ab2)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Ab1 x1 x2)
            (* Ab2 y1 y2)
        interp-inv :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (inv Ab1 x1) (inv Ab2 y1)
    data AbelianGroupTerm
      : Set where
      1L : AbelianGroupTerm
      *L :
        AbelianGroupTerm ->
        AbelianGroupTerm ->
        AbelianGroupTerm
      invL :
        AbelianGroupTerm ->
        AbelianGroupTerm
    data ClAbelianGroupTerm
      (A : Set) : Set where
      sing :
        A -> ClAbelianGroupTerm A
      1Cl : ClAbelianGroupTerm A
      *Cl :
        ClAbelianGroupTerm A ->
        ClAbelianGroupTerm A ->
        ClAbelianGroupTerm A
      invCl :
        ClAbelianGroupTerm A ->
        ClAbelianGroupTerm A
    data OpAbelianGroupTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpAbelianGroupTerm n
      1OL : OpAbelianGroupTerm n
      *OL :
        OpAbelianGroupTerm n ->
        OpAbelianGroupTerm n ->
        OpAbelianGroupTerm n
      invOL :
        OpAbelianGroupTerm n ->
        OpAbelianGroupTerm n
    data OpAbelianGroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpAbelianGroupTerm2 n A
      sing2 :
        A -> OpAbelianGroupTerm2 n A
      1OL2 : OpAbelianGroupTerm2 n A
      *OL2 :
        OpAbelianGroupTerm2 n A ->
        OpAbelianGroupTerm2 n A ->
        OpAbelianGroupTerm2 n A
      invOL2 :
        OpAbelianGroupTerm2 n A ->
        OpAbelianGroupTerm2 n A
  
  module Absorption where
    record Absorption
      (A : Set) : Set where
      constructor AbsorptionC
      field
        * : A -> A -> A
        + : A -> A -> A
        leftAbsorp_*_+ :
          (x : A) (y : A) ->
          * x (+ x y) == x
        leftAbsorp_+_* :
          (x : A) (y : A) ->
          + x (* x y) == x
    record AbsorptionSig
      (AS : Set) : Set where
      constructor AbsorptionSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record AbsorptionProd
      (AP : Set) : Set where
      constructor AbsorptionProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftAbsorp_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP (+P xP yP) == xP
        leftAbsorp_+_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP (*P xP yP) == xP
    record AbsorptionHom
      (A1 : Set) (A2 : Set)
      (Ab1 : Absorption A1)
      (Ab2 : Absorption A2) :
      Set where
      constructor AbsorptionHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Ab1 x1 x2) ==
            * Ab2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ab1 x1 x2) ==
            + Ab2 (hom x1) (hom x2)
    record AbsorptionRelInterp
      (A1 : Set) (A2 : Set)
      (Ab1 : Absorption A1)
      (Ab2 : Absorption A2) :
      Set where
      constructor AbsorptionRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Ab1 x1 x2)
            (* Ab2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ab1 x1 x2)
            (+ Ab2 y1 y2)
    data AbsorptionTerm : Set where
      *L :
        AbsorptionTerm ->
        AbsorptionTerm -> AbsorptionTerm
      +L :
        AbsorptionTerm ->
        AbsorptionTerm -> AbsorptionTerm
    data ClAbsorptionTerm
      (A : Set) : Set where
      sing : A -> ClAbsorptionTerm A
      *Cl :
        ClAbsorptionTerm A ->
        ClAbsorptionTerm A ->
        ClAbsorptionTerm A
      +Cl :
        ClAbsorptionTerm A ->
        ClAbsorptionTerm A ->
        ClAbsorptionTerm A
    data OpAbsorptionTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpAbsorptionTerm n
      *OL :
        OpAbsorptionTerm n ->
        OpAbsorptionTerm n ->
        OpAbsorptionTerm n
      +OL :
        OpAbsorptionTerm n ->
        OpAbsorptionTerm n ->
        OpAbsorptionTerm n
    data OpAbsorptionTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpAbsorptionTerm2 n A
      sing2 :
        A -> OpAbsorptionTerm2 n A
      *OL2 :
        OpAbsorptionTerm2 n A ->
        OpAbsorptionTerm2 n A ->
        OpAbsorptionTerm2 n A
      +OL2 :
        OpAbsorptionTerm2 n A ->
        OpAbsorptionTerm2 n A ->
        OpAbsorptionTerm2 n A
  
  module AddCommMonWithMultMagma where
    record AddCommMonWithMultMagma
      (A : Set) : Set where
      constructor AddCommMonWithMultMagmaC
      field
        0 : A
        + : A -> A -> A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        * : A -> A -> A
    record AddCommMonWithMultMagmaSig
      (AS : Set) : Set where
      constructor AddCommMonWithMultMagmaSigSigC
      field
        0S : AS
        +S : AS -> AS -> AS
        *S : AS -> AS -> AS
    record AddCommMonWithMultMagmaProd
      (AP : Set) : Set where
      constructor AddCommMonWithMultMagmaProdC
      field
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
    record AddCommMonWithMultMagmaHom
      (A1 : Set) (A2 : Set)
      (Ad1 : AddCommMonWithMultMagma
         A1)
      (Ad2 : AddCommMonWithMultMagma
         A2) : Set where
      constructor AddCommMonWithMultMagmaHomC
      field
        hom : A1 -> A2
        pres-0 : hom (0 Ad1) == 0 Ad2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ad1 x1 x2) ==
            + Ad2 (hom x1) (hom x2)
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Ad1 x1 x2) ==
            * Ad2 (hom x1) (hom x2)
    record AddCommMonWithMultMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Ad1 : AddCommMonWithMultMagma
         A1)
      (Ad2 : AddCommMonWithMultMagma
         A2) : Set where
      constructor AddCommMonWithMultMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0 :
          interp (0 Ad1) (0 Ad2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ad1 x1 x2)
            (+ Ad2 y1 y2)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Ad1 x1 x2)
            (* Ad2 y1 y2)
    data AddCommMonWithMultMagmaTerm
      : Set where
      0L :
        AddCommMonWithMultMagmaTerm
      +L :
        AddCommMonWithMultMagmaTerm ->
        AddCommMonWithMultMagmaTerm ->
        AddCommMonWithMultMagmaTerm
      *L :
        AddCommMonWithMultMagmaTerm ->
        AddCommMonWithMultMagmaTerm ->
        AddCommMonWithMultMagmaTerm
    data ClAddCommMonWithMultMagmaTerm
      (A : Set) : Set where
      sing :
        A ->
        ClAddCommMonWithMultMagmaTerm A
      0Cl :
        ClAddCommMonWithMultMagmaTerm A
      +Cl :
        ClAddCommMonWithMultMagmaTerm
          A ->
        ClAddCommMonWithMultMagmaTerm
          A ->
        ClAddCommMonWithMultMagmaTerm A
      *Cl :
        ClAddCommMonWithMultMagmaTerm
          A ->
        ClAddCommMonWithMultMagmaTerm
          A ->
        ClAddCommMonWithMultMagmaTerm A
    data OpAddCommMonWithMultMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpAddCommMonWithMultMagmaTerm n
      0OL :
        OpAddCommMonWithMultMagmaTerm n
      +OL :
        OpAddCommMonWithMultMagmaTerm
          n ->
        OpAddCommMonWithMultMagmaTerm
          n ->
        OpAddCommMonWithMultMagmaTerm n
      *OL :
        OpAddCommMonWithMultMagmaTerm
          n ->
        OpAddCommMonWithMultMagmaTerm
          n ->
        OpAddCommMonWithMultMagmaTerm n
    data OpAddCommMonWithMultMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAddCommMonWithMultMagmaTerm2 n
          A
      sing2 :
        A ->
        OpAddCommMonWithMultMagmaTerm2 n
          A
      0OL2 :
        OpAddCommMonWithMultMagmaTerm2 n
          A
      +OL2 :
        OpAddCommMonWithMultMagmaTerm2 n
          A ->
        OpAddCommMonWithMultMagmaTerm2 n
          A ->
        OpAddCommMonWithMultMagmaTerm2 n
          A
      *OL2 :
        OpAddCommMonWithMultMagmaTerm2 n
          A ->
        OpAddCommMonWithMultMagmaTerm2 n
          A ->
        OpAddCommMonWithMultMagmaTerm2 n
          A
  
  module AddCommMonWithMultSemigroup where
    record AddCommMonWithMultSemigroup
      (A : Set) : Set where
      constructor AddCommMonWithMultSemigroupC
      field
        * : A -> A -> A
        0 : A
        + : A -> A -> A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
    record AddCommMonWithMultSemigroupSig
      (AS : Set) : Set where
      constructor AddCommMonWithMultSemigroupSigSigC
      field
        *S : AS -> AS -> AS
        0S : AS
        +S : AS -> AS -> AS
    record AddCommMonWithMultSemigroupProd
      (AP : Set) : Set where
      constructor AddCommMonWithMultSemigroupProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
    record AddCommMonWithMultSemigroupHom
      (A1 : Set) (A2 : Set)
      (Ad1 : AddCommMonWithMultSemigroup
         A1)
      (Ad2 : AddCommMonWithMultSemigroup
         A2) : Set where
      constructor AddCommMonWithMultSemigroupHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Ad1 x1 x2) ==
            * Ad2 (hom x1) (hom x2)
        pres-0 : hom (0 Ad1) == 0 Ad2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ad1 x1 x2) ==
            + Ad2 (hom x1) (hom x2)
    record AddCommMonWithMultSemigroupRelInterp
      (A1 : Set) (A2 : Set)
      (Ad1 : AddCommMonWithMultSemigroup
         A1)
      (Ad2 : AddCommMonWithMultSemigroup
         A2) : Set where
      constructor AddCommMonWithMultSemigroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Ad1 x1 x2)
            (* Ad2 y1 y2)
        interp-0 :
          interp (0 Ad1) (0 Ad2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ad1 x1 x2)
            (+ Ad2 y1 y2)
    data AddCommMonWithMultSemigroupTerm
      : Set where
      *L :
        AddCommMonWithMultSemigroupTerm ->
        AddCommMonWithMultSemigroupTerm ->
        AddCommMonWithMultSemigroupTerm
      0L :
        AddCommMonWithMultSemigroupTerm
      +L :
        AddCommMonWithMultSemigroupTerm ->
        AddCommMonWithMultSemigroupTerm ->
        AddCommMonWithMultSemigroupTerm
    data ClAddCommMonWithMultSemigroupTerm
      (A : Set) : Set where
      sing :
        A ->
        ClAddCommMonWithMultSemigroupTerm
          A
      *Cl :
        ClAddCommMonWithMultSemigroupTerm
          A ->
        ClAddCommMonWithMultSemigroupTerm
          A ->
        ClAddCommMonWithMultSemigroupTerm
          A
      0Cl :
        ClAddCommMonWithMultSemigroupTerm
          A
      +Cl :
        ClAddCommMonWithMultSemigroupTerm
          A ->
        ClAddCommMonWithMultSemigroupTerm
          A ->
        ClAddCommMonWithMultSemigroupTerm
          A
    data OpAddCommMonWithMultSemigroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpAddCommMonWithMultSemigroupTerm
          n
      *OL :
        OpAddCommMonWithMultSemigroupTerm
          n ->
        OpAddCommMonWithMultSemigroupTerm
          n ->
        OpAddCommMonWithMultSemigroupTerm
          n
      0OL :
        OpAddCommMonWithMultSemigroupTerm
          n
      +OL :
        OpAddCommMonWithMultSemigroupTerm
          n ->
        OpAddCommMonWithMultSemigroupTerm
          n ->
        OpAddCommMonWithMultSemigroupTerm
          n
    data OpAddCommMonWithMultSemigroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAddCommMonWithMultSemigroupTerm2
          n
          A
      sing2 :
        A ->
        OpAddCommMonWithMultSemigroupTerm2
          n
          A
      *OL2 :
        OpAddCommMonWithMultSemigroupTerm2
          n
          A ->
        OpAddCommMonWithMultSemigroupTerm2
          n
          A ->
        OpAddCommMonWithMultSemigroupTerm2
          n
          A
      0OL2 :
        OpAddCommMonWithMultSemigroupTerm2
          n
          A
      +OL2 :
        OpAddCommMonWithMultSemigroupTerm2
          n
          A ->
        OpAddCommMonWithMultSemigroupTerm2
          n
          A ->
        OpAddCommMonWithMultSemigroupTerm2
          n
          A
  
  module AddGroup_RingoidSig where
    record AddGroup_RingoidSig
      (A : Set) : Set where
      constructor AddGroup_RingoidSigC
      field
        + : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        * : A -> A -> A
    record AddGroup_RingoidSigSig
      (AS : Set) : Set where
      constructor AddGroup_RingoidSigSigSigC
      field
        +S : AS -> AS -> AS
        0S : AS
        negS : AS -> AS
        *S : AS -> AS -> AS
    record AddGroup_RingoidSigProd
      (AP : Set) : Set where
      constructor AddGroup_RingoidSigProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        negP : Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        leftInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P xP (negP xP) == 0P
        rightInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P (negP xP) xP == 0P
    record AddGroup_RingoidSigHom
      (A1 : Set) (A2 : Set)
      (Ad1 : AddGroup_RingoidSig A1)
      (Ad2 : AddGroup_RingoidSig A2) :
      Set where
      constructor AddGroup_RingoidSigHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ad1 x1 x2) ==
            + Ad2 (hom x1) (hom x2)
        pres-0 : hom (0 Ad1) == 0 Ad2
        pres-neg :
          (x1 : A1) ->
          hom (neg Ad1 x1) ==
            neg Ad2 (hom x1)
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Ad1 x1 x2) ==
            * Ad2 (hom x1) (hom x2)
    record AddGroup_RingoidSigRelInterp
      (A1 : Set) (A2 : Set)
      (Ad1 : AddGroup_RingoidSig A1)
      (Ad2 : AddGroup_RingoidSig A2) :
      Set where
      constructor AddGroup_RingoidSigRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ad1 x1 x2)
            (+ Ad2 y1 y2)
        interp-0 :
          interp (0 Ad1) (0 Ad2)
        interp-neg :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (neg Ad1 x1) (neg Ad2 y1)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Ad1 x1 x2)
            (* Ad2 y1 y2)
    data AddGroup_RingoidSigTerm
      : Set where
      +L :
        AddGroup_RingoidSigTerm ->
        AddGroup_RingoidSigTerm ->
        AddGroup_RingoidSigTerm
      0L : AddGroup_RingoidSigTerm
      negL :
        AddGroup_RingoidSigTerm ->
        AddGroup_RingoidSigTerm
      *L :
        AddGroup_RingoidSigTerm ->
        AddGroup_RingoidSigTerm ->
        AddGroup_RingoidSigTerm
    data ClAddGroup_RingoidSigTerm
      (A : Set) : Set where
      sing :
        A -> ClAddGroup_RingoidSigTerm A
      +Cl :
        ClAddGroup_RingoidSigTerm A ->
        ClAddGroup_RingoidSigTerm A ->
        ClAddGroup_RingoidSigTerm A
      0Cl :
        ClAddGroup_RingoidSigTerm A
      negCl :
        ClAddGroup_RingoidSigTerm A ->
        ClAddGroup_RingoidSigTerm A
      *Cl :
        ClAddGroup_RingoidSigTerm A ->
        ClAddGroup_RingoidSigTerm A ->
        ClAddGroup_RingoidSigTerm A
    data OpAddGroup_RingoidSigTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpAddGroup_RingoidSigTerm n
      +OL :
        OpAddGroup_RingoidSigTerm n ->
        OpAddGroup_RingoidSigTerm n ->
        OpAddGroup_RingoidSigTerm n
      0OL :
        OpAddGroup_RingoidSigTerm n
      negOL :
        OpAddGroup_RingoidSigTerm n ->
        OpAddGroup_RingoidSigTerm n
      *OL :
        OpAddGroup_RingoidSigTerm n ->
        OpAddGroup_RingoidSigTerm n ->
        OpAddGroup_RingoidSigTerm n
    data OpAddGroup_RingoidSigTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAddGroup_RingoidSigTerm2 n A
      sing2 :
        A ->
        OpAddGroup_RingoidSigTerm2 n A
      +OL2 :
        OpAddGroup_RingoidSigTerm2 n
          A ->
        OpAddGroup_RingoidSigTerm2 n
          A ->
        OpAddGroup_RingoidSigTerm2 n A
      0OL2 :
        OpAddGroup_RingoidSigTerm2 n A
      negOL2 :
        OpAddGroup_RingoidSigTerm2 n
          A ->
        OpAddGroup_RingoidSigTerm2 n A
      *OL2 :
        OpAddGroup_RingoidSigTerm2 n
          A ->
        OpAddGroup_RingoidSigTerm2 n
          A ->
        OpAddGroup_RingoidSigTerm2 n A
  
  module AdditiveCommutativeMonoid where
    record AdditiveCommutativeMonoid
      (A : Set) : Set where
      constructor AdditiveCommutativeMonoidC
      field
        0 : A
        + : A -> A -> A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
    record AdditiveCommutativeMonoidSig
      (AS : Set) : Set where
      constructor AdditiveCommutativeMonoidSigSigC
      field
        0S : AS
        +S : AS -> AS -> AS
    record AdditiveCommutativeMonoidProd
      (AP : Set) : Set where
      constructor AdditiveCommutativeMonoidProdC
      field
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
    record AdditiveCommutativeMonoidHom
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveCommutativeMonoid
         A1)
      (Ad2 : AdditiveCommutativeMonoid
         A2) : Set where
      constructor AdditiveCommutativeMonoidHomC
      field
        hom : A1 -> A2
        pres-0 : hom (0 Ad1) == 0 Ad2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ad1 x1 x2) ==
            + Ad2 (hom x1) (hom x2)
    record AdditiveCommutativeMonoidRelInterp
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveCommutativeMonoid
         A1)
      (Ad2 : AdditiveCommutativeMonoid
         A2) : Set where
      constructor AdditiveCommutativeMonoidRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0 :
          interp (0 Ad1) (0 Ad2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ad1 x1 x2)
            (+ Ad2 y1 y2)
    data AdditiveCommutativeMonoidTerm
      : Set where
      0L :
        AdditiveCommutativeMonoidTerm
      +L :
        AdditiveCommutativeMonoidTerm ->
        AdditiveCommutativeMonoidTerm ->
        AdditiveCommutativeMonoidTerm
    data ClAdditiveCommutativeMonoidTerm
      (A : Set) : Set where
      sing :
        A ->
        ClAdditiveCommutativeMonoidTerm
          A
      0Cl :
        ClAdditiveCommutativeMonoidTerm
          A
      +Cl :
        ClAdditiveCommutativeMonoidTerm
          A ->
        ClAdditiveCommutativeMonoidTerm
          A ->
        ClAdditiveCommutativeMonoidTerm
          A
    data OpAdditiveCommutativeMonoidTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpAdditiveCommutativeMonoidTerm
          n
      0OL :
        OpAdditiveCommutativeMonoidTerm
          n
      +OL :
        OpAdditiveCommutativeMonoidTerm
          n ->
        OpAdditiveCommutativeMonoidTerm
          n ->
        OpAdditiveCommutativeMonoidTerm
          n
    data OpAdditiveCommutativeMonoidTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAdditiveCommutativeMonoidTerm2
          n
          A
      sing2 :
        A ->
        OpAdditiveCommutativeMonoidTerm2
          n
          A
      0OL2 :
        OpAdditiveCommutativeMonoidTerm2
          n
          A
      +OL2 :
        OpAdditiveCommutativeMonoidTerm2
          n
          A ->
        OpAdditiveCommutativeMonoidTerm2
          n
          A ->
        OpAdditiveCommutativeMonoidTerm2
          n
          A
  
  module AdditiveCommutativeSemigroup where
    record AdditiveCommutativeSemigroup
      (A : Set) : Set where
      constructor AdditiveCommutativeSemigroupC
      field
        + : A -> A -> A
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
    record AdditiveCommutativeSemigroupSig
      (AS : Set) : Set where
      constructor AdditiveCommutativeSemigroupSigSigC
      field
        +S : AS -> AS -> AS
    record AdditiveCommutativeSemigroupProd
      (AP : Set) : Set where
      constructor AdditiveCommutativeSemigroupProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
    record AdditiveCommutativeSemigroupHom
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveCommutativeSemigroup
         A1)
      (Ad2 : AdditiveCommutativeSemigroup
         A2) : Set where
      constructor AdditiveCommutativeSemigroupHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ad1 x1 x2) ==
            + Ad2 (hom x1) (hom x2)
    record AdditiveCommutativeSemigroupRelInterp
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveCommutativeSemigroup
         A1)
      (Ad2 : AdditiveCommutativeSemigroup
         A2) : Set where
      constructor AdditiveCommutativeSemigroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ad1 x1 x2)
            (+ Ad2 y1 y2)
    data AdditiveCommutativeSemigroupTerm
      : Set where
      +L :
        AdditiveCommutativeSemigroupTerm ->
        AdditiveCommutativeSemigroupTerm ->
        AdditiveCommutativeSemigroupTerm
    data ClAdditiveCommutativeSemigroupTerm
      (A : Set) : Set where
      sing :
        A ->
        ClAdditiveCommutativeSemigroupTerm
          A
      +Cl :
        ClAdditiveCommutativeSemigroupTerm
          A ->
        ClAdditiveCommutativeSemigroupTerm
          A ->
        ClAdditiveCommutativeSemigroupTerm
          A
    data OpAdditiveCommutativeSemigroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpAdditiveCommutativeSemigroupTerm
          n
      +OL :
        OpAdditiveCommutativeSemigroupTerm
          n ->
        OpAdditiveCommutativeSemigroupTerm
          n ->
        OpAdditiveCommutativeSemigroupTerm
          n
    data OpAdditiveCommutativeSemigroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAdditiveCommutativeSemigroupTerm2
          n
          A
      sing2 :
        A ->
        OpAdditiveCommutativeSemigroupTerm2
          n
          A
      +OL2 :
        OpAdditiveCommutativeSemigroupTerm2
          n
          A ->
        OpAdditiveCommutativeSemigroupTerm2
          n
          A ->
        OpAdditiveCommutativeSemigroupTerm2
          n
          A
  
  module AdditiveGroup where
    record AdditiveGroup
      (A : Set) : Set where
      constructor AdditiveGroupC
      field
        0 : A
        + : A -> A -> A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
    record AdditiveGroupSig
      (AS : Set) : Set where
      constructor AdditiveGroupSigSigC
      field
        0S : AS
        +S : AS -> AS -> AS
        negS : AS -> AS
    record AdditiveGroupProd
      (AP : Set) : Set where
      constructor AdditiveGroupProdC
      field
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        negP : Prod AP AP -> Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        leftInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P xP (negP xP) == 0P
        rightInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P (negP xP) xP == 0P
    record AdditiveGroupHom
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveGroup A1)
      (Ad2 : AdditiveGroup A2) :
      Set where
      constructor AdditiveGroupHomC
      field
        hom : A1 -> A2
        pres-0 : hom (0 Ad1) == 0 Ad2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ad1 x1 x2) ==
            + Ad2 (hom x1) (hom x2)
        pres-neg :
          (x1 : A1) ->
          hom (neg Ad1 x1) ==
            neg Ad2 (hom x1)
    record AdditiveGroupRelInterp
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveGroup A1)
      (Ad2 : AdditiveGroup A2) :
      Set where
      constructor AdditiveGroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0 :
          interp (0 Ad1) (0 Ad2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ad1 x1 x2)
            (+ Ad2 y1 y2)
        interp-neg :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (neg Ad1 x1) (neg Ad2 y1)
    data AdditiveGroupTerm
      : Set where
      0L : AdditiveGroupTerm
      +L :
        AdditiveGroupTerm ->
        AdditiveGroupTerm ->
        AdditiveGroupTerm
      negL :
        AdditiveGroupTerm ->
        AdditiveGroupTerm
    data ClAdditiveGroupTerm
      (A : Set) : Set where
      sing :
        A -> ClAdditiveGroupTerm A
      0Cl : ClAdditiveGroupTerm A
      +Cl :
        ClAdditiveGroupTerm A ->
        ClAdditiveGroupTerm A ->
        ClAdditiveGroupTerm A
      negCl :
        ClAdditiveGroupTerm A ->
        ClAdditiveGroupTerm A
    data OpAdditiveGroupTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpAdditiveGroupTerm n
      0OL : OpAdditiveGroupTerm n
      +OL :
        OpAdditiveGroupTerm n ->
        OpAdditiveGroupTerm n ->
        OpAdditiveGroupTerm n
      negOL :
        OpAdditiveGroupTerm n ->
        OpAdditiveGroupTerm n
    data OpAdditiveGroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAdditiveGroupTerm2 n A
      sing2 :
        A -> OpAdditiveGroupTerm2 n A
      0OL2 : OpAdditiveGroupTerm2 n A
      +OL2 :
        OpAdditiveGroupTerm2 n A ->
        OpAdditiveGroupTerm2 n A ->
        OpAdditiveGroupTerm2 n A
      negOL2 :
        OpAdditiveGroupTerm2 n A ->
        OpAdditiveGroupTerm2 n A
  
  module AdditiveMagma where
    record AdditiveMagma
      (A : Set) : Set where
      constructor AdditiveMagmaC
      field
        + : A -> A -> A
    record AdditiveMagmaSig
      (AS : Set) : Set where
      constructor AdditiveMagmaSigSigC
      field
        +S : AS -> AS -> AS
    record AdditiveMagmaProd
      (AP : Set) : Set where
      constructor AdditiveMagmaProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record AdditiveMagmaHom
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveMagma A1)
      (Ad2 : AdditiveMagma A2) :
      Set where
      constructor AdditiveMagmaHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ad1 x1 x2) ==
            + Ad2 (hom x1) (hom x2)
    record AdditiveMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveMagma A1)
      (Ad2 : AdditiveMagma A2) :
      Set where
      constructor AdditiveMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ad1 x1 x2)
            (+ Ad2 y1 y2)
    data AdditiveMagmaTerm
      : Set where
      +L :
        AdditiveMagmaTerm ->
        AdditiveMagmaTerm ->
        AdditiveMagmaTerm
    data ClAdditiveMagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClAdditiveMagmaTerm A
      +Cl :
        ClAdditiveMagmaTerm A ->
        ClAdditiveMagmaTerm A ->
        ClAdditiveMagmaTerm A
    data OpAdditiveMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpAdditiveMagmaTerm n
      +OL :
        OpAdditiveMagmaTerm n ->
        OpAdditiveMagmaTerm n ->
        OpAdditiveMagmaTerm n
    data OpAdditiveMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAdditiveMagmaTerm2 n A
      sing2 :
        A -> OpAdditiveMagmaTerm2 n A
      +OL2 :
        OpAdditiveMagmaTerm2 n A ->
        OpAdditiveMagmaTerm2 n A ->
        OpAdditiveMagmaTerm2 n A
  
  module AdditiveMonoid where
    record AdditiveMonoid
      (A : Set) : Set where
      constructor AdditiveMonoidC
      field
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
    record AdditiveMonoidSig
      (AS : Set) : Set where
      constructor AdditiveMonoidSigSigC
      field
        +S : AS -> AS -> AS
        0S : AS
    record AdditiveMonoidProd
      (AP : Set) : Set where
      constructor AdditiveMonoidProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
    record AdditiveMonoidHom
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveMonoid A1)
      (Ad2 : AdditiveMonoid A2) :
      Set where
      constructor AdditiveMonoidHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ad1 x1 x2) ==
            + Ad2 (hom x1) (hom x2)
        pres-0 : hom (0 Ad1) == 0 Ad2
    record AdditiveMonoidRelInterp
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveMonoid A1)
      (Ad2 : AdditiveMonoid A2) :
      Set where
      constructor AdditiveMonoidRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ad1 x1 x2)
            (+ Ad2 y1 y2)
        interp-0 :
          interp (0 Ad1) (0 Ad2)
    data AdditiveMonoidTerm
      : Set where
      +L :
        AdditiveMonoidTerm ->
        AdditiveMonoidTerm ->
        AdditiveMonoidTerm
      0L : AdditiveMonoidTerm
    data ClAdditiveMonoidTerm
      (A : Set) : Set where
      sing :
        A -> ClAdditiveMonoidTerm A
      +Cl :
        ClAdditiveMonoidTerm A ->
        ClAdditiveMonoidTerm A ->
        ClAdditiveMonoidTerm A
      0Cl : ClAdditiveMonoidTerm A
    data OpAdditiveMonoidTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpAdditiveMonoidTerm n
      +OL :
        OpAdditiveMonoidTerm n ->
        OpAdditiveMonoidTerm n ->
        OpAdditiveMonoidTerm n
      0OL : OpAdditiveMonoidTerm n
    data OpAdditiveMonoidTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAdditiveMonoidTerm2 n A
      sing2 :
        A -> OpAdditiveMonoidTerm2 n A
      +OL2 :
        OpAdditiveMonoidTerm2 n A ->
        OpAdditiveMonoidTerm2 n A ->
        OpAdditiveMonoidTerm2 n A
      0OL2 : OpAdditiveMonoidTerm2 n A
  
  module AdditivePointedMagma where
    record AdditivePointedMagma
      (A : Set) : Set where
      constructor AdditivePointedMagmaC
      field
        0 : A
        + : A -> A -> A
    record AdditivePointedMagmaSig
      (AS : Set) : Set where
      constructor AdditivePointedMagmaSigSigC
      field
        0S : AS
        +S : AS -> AS -> AS
    record AdditivePointedMagmaProd
      (AP : Set) : Set where
      constructor AdditivePointedMagmaProdC
      field
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record AdditivePointedMagmaHom
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditivePointedMagma A1)
      (Ad2 : AdditivePointedMagma
         A2) : Set where
      constructor AdditivePointedMagmaHomC
      field
        hom : A1 -> A2
        pres-0 : hom (0 Ad1) == 0 Ad2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ad1 x1 x2) ==
            + Ad2 (hom x1) (hom x2)
    record AdditivePointedMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditivePointedMagma A1)
      (Ad2 : AdditivePointedMagma
         A2) : Set where
      constructor AdditivePointedMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0 :
          interp (0 Ad1) (0 Ad2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ad1 x1 x2)
            (+ Ad2 y1 y2)
    data AdditivePointedMagmaTerm
      : Set where
      0L : AdditivePointedMagmaTerm
      +L :
        AdditivePointedMagmaTerm ->
        AdditivePointedMagmaTerm ->
        AdditivePointedMagmaTerm
    data ClAdditivePointedMagmaTerm
      (A : Set) : Set where
      sing :
        A ->
        ClAdditivePointedMagmaTerm A
      0Cl :
        ClAdditivePointedMagmaTerm A
      +Cl :
        ClAdditivePointedMagmaTerm A ->
        ClAdditivePointedMagmaTerm A ->
        ClAdditivePointedMagmaTerm A
    data OpAdditivePointedMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpAdditivePointedMagmaTerm n
      0OL :
        OpAdditivePointedMagmaTerm n
      +OL :
        OpAdditivePointedMagmaTerm n ->
        OpAdditivePointedMagmaTerm n ->
        OpAdditivePointedMagmaTerm n
    data OpAdditivePointedMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAdditivePointedMagmaTerm2 n A
      sing2 :
        A ->
        OpAdditivePointedMagmaTerm2 n A
      0OL2 :
        OpAdditivePointedMagmaTerm2 n A
      +OL2 :
        OpAdditivePointedMagmaTerm2 n
          A ->
        OpAdditivePointedMagmaTerm2 n
          A ->
        OpAdditivePointedMagmaTerm2 n A
  
  module AdditivePointedSemigroup where
    record AdditivePointedSemigroup
      (A : Set) : Set where
      constructor AdditivePointedSemigroupC
      field
        0 : A
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
    record AdditivePointedSemigroupSig
      (AS : Set) : Set where
      constructor AdditivePointedSemigroupSigSigC
      field
        0S : AS
        +S : AS -> AS -> AS
    record AdditivePointedSemigroupProd
      (AP : Set) : Set where
      constructor AdditivePointedSemigroupProdC
      field
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
    record AdditivePointedSemigroupHom
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditivePointedSemigroup
         A1)
      (Ad2 : AdditivePointedSemigroup
         A2) : Set where
      constructor AdditivePointedSemigroupHomC
      field
        hom : A1 -> A2
        pres-0 : hom (0 Ad1) == 0 Ad2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ad1 x1 x2) ==
            + Ad2 (hom x1) (hom x2)
    record AdditivePointedSemigroupRelInterp
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditivePointedSemigroup
         A1)
      (Ad2 : AdditivePointedSemigroup
         A2) : Set where
      constructor AdditivePointedSemigroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0 :
          interp (0 Ad1) (0 Ad2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ad1 x1 x2)
            (+ Ad2 y1 y2)
    data AdditivePointedSemigroupTerm
      : Set where
      0L :
        AdditivePointedSemigroupTerm
      +L :
        AdditivePointedSemigroupTerm ->
        AdditivePointedSemigroupTerm ->
        AdditivePointedSemigroupTerm
    data ClAdditivePointedSemigroupTerm
      (A : Set) : Set where
      sing :
        A ->
        ClAdditivePointedSemigroupTerm A
      0Cl :
        ClAdditivePointedSemigroupTerm A
      +Cl :
        ClAdditivePointedSemigroupTerm
          A ->
        ClAdditivePointedSemigroupTerm
          A ->
        ClAdditivePointedSemigroupTerm A
    data OpAdditivePointedSemigroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpAdditivePointedSemigroupTerm n
      0OL :
        OpAdditivePointedSemigroupTerm n
      +OL :
        OpAdditivePointedSemigroupTerm
          n ->
        OpAdditivePointedSemigroupTerm
          n ->
        OpAdditivePointedSemigroupTerm n
    data OpAdditivePointedSemigroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAdditivePointedSemigroupTerm2
          n
          A
      sing2 :
        A ->
        OpAdditivePointedSemigroupTerm2
          n
          A
      0OL2 :
        OpAdditivePointedSemigroupTerm2
          n
          A
      +OL2 :
        OpAdditivePointedSemigroupTerm2
          n
          A ->
        OpAdditivePointedSemigroupTerm2
          n
          A ->
        OpAdditivePointedSemigroupTerm2
          n
          A
  
  module AdditiveSemigroup where
    record AdditiveSemigroup
      (A : Set) : Set where
      constructor AdditiveSemigroupC
      field
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
    record AdditiveSemigroupSig
      (AS : Set) : Set where
      constructor AdditiveSemigroupSigSigC
      field
        +S : AS -> AS -> AS
    record AdditiveSemigroupProd
      (AP : Set) : Set where
      constructor AdditiveSemigroupProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
    record AdditiveSemigroupHom
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveSemigroup A1)
      (Ad2 : AdditiveSemigroup A2) :
      Set where
      constructor AdditiveSemigroupHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ad1 x1 x2) ==
            + Ad2 (hom x1) (hom x2)
    record AdditiveSemigroupRelInterp
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveSemigroup A1)
      (Ad2 : AdditiveSemigroup A2) :
      Set where
      constructor AdditiveSemigroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ad1 x1 x2)
            (+ Ad2 y1 y2)
    data AdditiveSemigroupTerm
      : Set where
      +L :
        AdditiveSemigroupTerm ->
        AdditiveSemigroupTerm ->
        AdditiveSemigroupTerm
    data ClAdditiveSemigroupTerm
      (A : Set) : Set where
      sing :
        A -> ClAdditiveSemigroupTerm A
      +Cl :
        ClAdditiveSemigroupTerm A ->
        ClAdditiveSemigroupTerm A ->
        ClAdditiveSemigroupTerm A
    data OpAdditiveSemigroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpAdditiveSemigroupTerm n
      +OL :
        OpAdditiveSemigroupTerm n ->
        OpAdditiveSemigroupTerm n ->
        OpAdditiveSemigroupTerm n
    data OpAdditiveSemigroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAdditiveSemigroupTerm2 n A
      sing2 :
        A ->
        OpAdditiveSemigroupTerm2 n A
      +OL2 :
        OpAdditiveSemigroupTerm2 n A ->
        OpAdditiveSemigroupTerm2 n A ->
        OpAdditiveSemigroupTerm2 n A
  
  module AdditiveUnaryAntiDistribution where
    record AdditiveUnaryAntiDistribution
      (A : Set) : Set where
      constructor AdditiveUnaryAntiDistributionC
      field
        prim : A -> A
        + : A -> A -> A
        antidis_prim_+ :
          (x : A) (y : A) ->
          prim (+ x y) ==
            + (prim y) (prim x)
    record AdditiveUnaryAntiDistributionSig
      (AS : Set) : Set where
      constructor AdditiveUnaryAntiDistributionSigSigC
      field
        primS : AS -> AS
        +S : AS -> AS -> AS
    record AdditiveUnaryAntiDistributionProd
      (AP : Set) : Set where
      constructor AdditiveUnaryAntiDistributionProdC
      field
        primP : Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        antidis_prim_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (+P xP yP) ==
            +P (primP yP) (primP xP)
    record AdditiveUnaryAntiDistributionHom
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveUnaryAntiDistribution
         A1)
      (Ad2 : AdditiveUnaryAntiDistribution
         A2) : Set where
      constructor AdditiveUnaryAntiDistributionHomC
      field
        hom : A1 -> A2
        pres-prim :
          (x1 : A1) ->
          hom (prim Ad1 x1) ==
            prim Ad2 (hom x1)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ad1 x1 x2) ==
            + Ad2 (hom x1) (hom x2)
    record AdditiveUnaryAntiDistributionRelInterp
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveUnaryAntiDistribution
         A1)
      (Ad2 : AdditiveUnaryAntiDistribution
         A2) : Set where
      constructor AdditiveUnaryAntiDistributionRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim Ad1 x1)
            (prim Ad2 y1)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ad1 x1 x2)
            (+ Ad2 y1 y2)
    data AdditiveUnaryAntiDistributionTerm
      : Set where
      primL :
        AdditiveUnaryAntiDistributionTerm ->
        AdditiveUnaryAntiDistributionTerm
      +L :
        AdditiveUnaryAntiDistributionTerm ->
        AdditiveUnaryAntiDistributionTerm ->
        AdditiveUnaryAntiDistributionTerm
    data ClAdditiveUnaryAntiDistributionTerm
      (A : Set) : Set where
      sing :
        A ->
        ClAdditiveUnaryAntiDistributionTerm
          A
      primCl :
        ClAdditiveUnaryAntiDistributionTerm
          A ->
        ClAdditiveUnaryAntiDistributionTerm
          A
      +Cl :
        ClAdditiveUnaryAntiDistributionTerm
          A ->
        ClAdditiveUnaryAntiDistributionTerm
          A ->
        ClAdditiveUnaryAntiDistributionTerm
          A
    data OpAdditiveUnaryAntiDistributionTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpAdditiveUnaryAntiDistributionTerm
          n
      primOL :
        OpAdditiveUnaryAntiDistributionTerm
          n ->
        OpAdditiveUnaryAntiDistributionTerm
          n
      +OL :
        OpAdditiveUnaryAntiDistributionTerm
          n ->
        OpAdditiveUnaryAntiDistributionTerm
          n ->
        OpAdditiveUnaryAntiDistributionTerm
          n
    data OpAdditiveUnaryAntiDistributionTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAdditiveUnaryAntiDistributionTerm2
          n
          A
      sing2 :
        A ->
        OpAdditiveUnaryAntiDistributionTerm2
          n
          A
      primOL2 :
        OpAdditiveUnaryAntiDistributionTerm2
          n
          A ->
        OpAdditiveUnaryAntiDistributionTerm2
          n
          A
      +OL2 :
        OpAdditiveUnaryAntiDistributionTerm2
          n
          A ->
        OpAdditiveUnaryAntiDistributionTerm2
          n
          A ->
        OpAdditiveUnaryAntiDistributionTerm2
          n
          A
  
  module AdditiveUnital where
    record AdditiveUnital
      (A : Set) : Set where
      constructor AdditiveUnitalC
      field
        0 : A
        + : A -> A -> A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
    record AdditiveUnitalSig
      (AS : Set) : Set where
      constructor AdditiveUnitalSigSigC
      field
        0S : AS
        +S : AS -> AS -> AS
    record AdditiveUnitalProd
      (AP : Set) : Set where
      constructor AdditiveUnitalProdC
      field
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
    record AdditiveUnitalHom
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveUnital A1)
      (Ad2 : AdditiveUnital A2) :
      Set where
      constructor AdditiveUnitalHomC
      field
        hom : A1 -> A2
        pres-0 : hom (0 Ad1) == 0 Ad2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ad1 x1 x2) ==
            + Ad2 (hom x1) (hom x2)
    record AdditiveUnitalRelInterp
      (A1 : Set) (A2 : Set)
      (Ad1 : AdditiveUnital A1)
      (Ad2 : AdditiveUnital A2) :
      Set where
      constructor AdditiveUnitalRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0 :
          interp (0 Ad1) (0 Ad2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ad1 x1 x2)
            (+ Ad2 y1 y2)
    data AdditiveUnitalTerm
      : Set where
      0L : AdditiveUnitalTerm
      +L :
        AdditiveUnitalTerm ->
        AdditiveUnitalTerm ->
        AdditiveUnitalTerm
    data ClAdditiveUnitalTerm
      (A : Set) : Set where
      sing :
        A -> ClAdditiveUnitalTerm A
      0Cl : ClAdditiveUnitalTerm A
      +Cl :
        ClAdditiveUnitalTerm A ->
        ClAdditiveUnitalTerm A ->
        ClAdditiveUnitalTerm A
    data OpAdditiveUnitalTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpAdditiveUnitalTerm n
      0OL : OpAdditiveUnitalTerm n
      +OL :
        OpAdditiveUnitalTerm n ->
        OpAdditiveUnitalTerm n ->
        OpAdditiveUnitalTerm n
    data OpAdditiveUnitalTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAdditiveUnitalTerm2 n A
      sing2 :
        A -> OpAdditiveUnitalTerm2 n A
      0OL2 : OpAdditiveUnitalTerm2 n A
      +OL2 :
        OpAdditiveUnitalTerm2 n A ->
        OpAdditiveUnitalTerm2 n A ->
        OpAdditiveUnitalTerm2 n A
  
  module AndDeMorgan where
    record AndDeMorgan
      (A : Set) : Set where
      constructor AndDeMorganC
      field
        * : A -> A -> A
        + : A -> A -> A
        prim : A -> A
        andDeMorgan_*_+_prim :
          (x : A) (y : A) (z : A) ->
          prim (* x y) ==
            + (prim x) (prim y)
    record AndDeMorganSig
      (AS : Set) : Set where
      constructor AndDeMorganSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        primS : AS -> AS
    record AndDeMorganProd
      (AP : Set) : Set where
      constructor AndDeMorganProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        andDeMorgan_*_+_primP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          primP (*P xP yP) ==
            +P (primP xP) (primP yP)
    record AndDeMorganHom
      (A1 : Set) (A2 : Set)
      (An1 : AndDeMorgan A1)
      (An2 : AndDeMorgan A2) :
      Set where
      constructor AndDeMorganHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* An1 x1 x2) ==
            * An2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ An1 x1 x2) ==
            + An2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A1) ->
          hom (prim An1 x1) ==
            prim An2 (hom x1)
    record AndDeMorganRelInterp
      (A1 : Set) (A2 : Set)
      (An1 : AndDeMorgan A1)
      (An2 : AndDeMorgan A2) :
      Set where
      constructor AndDeMorganRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* An1 x1 x2)
            (* An2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ An1 x1 x2)
            (+ An2 y1 y2)
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim An1 x1)
            (prim An2 y1)
    data AndDeMorganTerm : Set where
      *L :
        AndDeMorganTerm ->
        AndDeMorganTerm ->
        AndDeMorganTerm
      +L :
        AndDeMorganTerm ->
        AndDeMorganTerm ->
        AndDeMorganTerm
      primL :
        AndDeMorganTerm ->
        AndDeMorganTerm
    data ClAndDeMorganTerm
      (A : Set) : Set where
      sing :
        A -> ClAndDeMorganTerm A
      *Cl :
        ClAndDeMorganTerm A ->
        ClAndDeMorganTerm A ->
        ClAndDeMorganTerm A
      +Cl :
        ClAndDeMorganTerm A ->
        ClAndDeMorganTerm A ->
        ClAndDeMorganTerm A
      primCl :
        ClAndDeMorganTerm A ->
        ClAndDeMorganTerm A
    data OpAndDeMorganTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpAndDeMorganTerm n
      *OL :
        OpAndDeMorganTerm n ->
        OpAndDeMorganTerm n ->
        OpAndDeMorganTerm n
      +OL :
        OpAndDeMorganTerm n ->
        OpAndDeMorganTerm n ->
        OpAndDeMorganTerm n
      primOL :
        OpAndDeMorganTerm n ->
        OpAndDeMorganTerm n
    data OpAndDeMorganTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpAndDeMorganTerm2 n A
      sing2 :
        A -> OpAndDeMorganTerm2 n A
      *OL2 :
        OpAndDeMorganTerm2 n A ->
        OpAndDeMorganTerm2 n A ->
        OpAndDeMorganTerm2 n A
      +OL2 :
        OpAndDeMorganTerm2 n A ->
        OpAndDeMorganTerm2 n A ->
        OpAndDeMorganTerm2 n A
      primOL2 :
        OpAndDeMorganTerm2 n A ->
        OpAndDeMorganTerm2 n A
  
  module AntiAbsorbent where
    record AntiAbsorbent
      (A : Set) : Set where
      constructor AntiAbsorbentC
      field
        op : A -> A -> A
        antiAbsorbent :
          (x : A) (y : A) ->
          op x (op x y) == y
    record AntiAbsorbentSig
      (AS : Set) : Set where
      constructor AntiAbsorbentSigSigC
      field
        opS : AS -> AS -> AS
    record AntiAbsorbentProd
      (AP : Set) : Set where
      constructor AntiAbsorbentProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        antiAbsorbentP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (opP xP yP) == yP
    record AntiAbsorbentHom
      (A1 : Set) (A2 : Set)
      (An1 : AntiAbsorbent A1)
      (An2 : AntiAbsorbent A2) :
      Set where
      constructor AntiAbsorbentHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op An1 x1 x2) ==
            op An2 (hom x1) (hom x2)
    record AntiAbsorbentRelInterp
      (A1 : Set) (A2 : Set)
      (An1 : AntiAbsorbent A1)
      (An2 : AntiAbsorbent A2) :
      Set where
      constructor AntiAbsorbentRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op An1 x1 x2)
            (op An2 y1 y2)
    data AntiAbsorbentTerm
      : Set where
      opL :
        AntiAbsorbentTerm ->
        AntiAbsorbentTerm ->
        AntiAbsorbentTerm
    data ClAntiAbsorbentTerm
      (A : Set) : Set where
      sing :
        A -> ClAntiAbsorbentTerm A
      opCl :
        ClAntiAbsorbentTerm A ->
        ClAntiAbsorbentTerm A ->
        ClAntiAbsorbentTerm A
    data OpAntiAbsorbentTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpAntiAbsorbentTerm n
      opOL :
        OpAntiAbsorbentTerm n ->
        OpAntiAbsorbentTerm n ->
        OpAntiAbsorbentTerm n
    data OpAntiAbsorbentTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAntiAbsorbentTerm2 n A
      sing2 :
        A -> OpAntiAbsorbentTerm2 n A
      opOL2 :
        OpAntiAbsorbentTerm2 n A ->
        OpAntiAbsorbentTerm2 n A ->
        OpAntiAbsorbentTerm2 n A
  
  module AntiCommutativeRing where
    record AntiCommutativeRing
      (A : Set) : Set where
      constructor AntiCommutativeRingC
      field
        * : A -> A -> A
        + : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
        antiCommutative :
          (x : A) (y : A) ->
          * x y == neg (* y x)
    record AntiCommutativeRingSig
      (AS : Set) : Set where
      constructor AntiCommutativeRingSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        0S : AS
        negS : AS -> AS
        1S : AS
    record AntiCommutativeRingProd
      (AP : Set) : Set where
      constructor AntiCommutativeRingProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        negP : Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        leftInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P xP (negP xP) == 0P
        rightInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P (negP xP) xP == 0P
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        leftZero_op_0P :
          (xP : Prod AP AP) ->
          *P 0P xP == 0P
        rightZero_op_0P :
          (xP : Prod AP AP) ->
          *P xP 0P == 0P
        antiCommutativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == negP (*P yP xP)
    record AntiCommutativeRingHom
      (A1 : Set) (A2 : Set)
      (An1 : AntiCommutativeRing A1)
      (An2 : AntiCommutativeRing A2) :
      Set where
      constructor AntiCommutativeRingHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* An1 x1 x2) ==
            * An2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ An1 x1 x2) ==
            + An2 (hom x1) (hom x2)
        pres-0 : hom (0 An1) == 0 An2
        pres-neg :
          (x1 : A1) ->
          hom (neg An1 x1) ==
            neg An2 (hom x1)
        pres-1 : hom (1 An1) == 1 An2
    record AntiCommutativeRingRelInterp
      (A1 : Set) (A2 : Set)
      (An1 : AntiCommutativeRing A1)
      (An2 : AntiCommutativeRing A2) :
      Set where
      constructor AntiCommutativeRingRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* An1 x1 x2)
            (* An2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ An1 x1 x2)
            (+ An2 y1 y2)
        interp-0 :
          interp (0 An1) (0 An2)
        interp-neg :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (neg An1 x1) (neg An2 y1)
        interp-1 :
          interp (1 An1) (1 An2)
    data AntiCommutativeRingTerm
      : Set where
      *L :
        AntiCommutativeRingTerm ->
        AntiCommutativeRingTerm ->
        AntiCommutativeRingTerm
      +L :
        AntiCommutativeRingTerm ->
        AntiCommutativeRingTerm ->
        AntiCommutativeRingTerm
      0L : AntiCommutativeRingTerm
      negL :
        AntiCommutativeRingTerm ->
        AntiCommutativeRingTerm
      1L : AntiCommutativeRingTerm
    data ClAntiCommutativeRingTerm
      (A : Set) : Set where
      sing :
        A -> ClAntiCommutativeRingTerm A
      *Cl :
        ClAntiCommutativeRingTerm A ->
        ClAntiCommutativeRingTerm A ->
        ClAntiCommutativeRingTerm A
      +Cl :
        ClAntiCommutativeRingTerm A ->
        ClAntiCommutativeRingTerm A ->
        ClAntiCommutativeRingTerm A
      0Cl :
        ClAntiCommutativeRingTerm A
      negCl :
        ClAntiCommutativeRingTerm A ->
        ClAntiCommutativeRingTerm A
      1Cl :
        ClAntiCommutativeRingTerm A
    data OpAntiCommutativeRingTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpAntiCommutativeRingTerm n
      *OL :
        OpAntiCommutativeRingTerm n ->
        OpAntiCommutativeRingTerm n ->
        OpAntiCommutativeRingTerm n
      +OL :
        OpAntiCommutativeRingTerm n ->
        OpAntiCommutativeRingTerm n ->
        OpAntiCommutativeRingTerm n
      0OL :
        OpAntiCommutativeRingTerm n
      negOL :
        OpAntiCommutativeRingTerm n ->
        OpAntiCommutativeRingTerm n
      1OL :
        OpAntiCommutativeRingTerm n
    data OpAntiCommutativeRingTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAntiCommutativeRingTerm2 n A
      sing2 :
        A ->
        OpAntiCommutativeRingTerm2 n A
      *OL2 :
        OpAntiCommutativeRingTerm2 n
          A ->
        OpAntiCommutativeRingTerm2 n
          A ->
        OpAntiCommutativeRingTerm2 n A
      +OL2 :
        OpAntiCommutativeRingTerm2 n
          A ->
        OpAntiCommutativeRingTerm2 n
          A ->
        OpAntiCommutativeRingTerm2 n A
      0OL2 :
        OpAntiCommutativeRingTerm2 n A
      negOL2 :
        OpAntiCommutativeRingTerm2 n
          A ->
        OpAntiCommutativeRingTerm2 n A
      1OL2 :
        OpAntiCommutativeRingTerm2 n A
  
  module AssocPlusRingoid where
    record AssocPlusRingoid
      (A : Set) : Set where
      constructor AssocPlusRingoidC
      field
        + : A -> A -> A
        * : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
    record AssocPlusRingoidSig
      (AS : Set) : Set where
      constructor AssocPlusRingoidSigSigC
      field
        +S : AS -> AS -> AS
        *S : AS -> AS -> AS
    record AssocPlusRingoidProd
      (AP : Set) : Set where
      constructor AssocPlusRingoidProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
    record AssocPlusRingoidHom
      (A1 : Set) (A2 : Set)
      (As1 : AssocPlusRingoid A1)
      (As2 : AssocPlusRingoid A2) :
      Set where
      constructor AssocPlusRingoidHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ As1 x1 x2) ==
            + As2 (hom x1) (hom x2)
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* As1 x1 x2) ==
            * As2 (hom x1) (hom x2)
    record AssocPlusRingoidRelInterp
      (A1 : Set) (A2 : Set)
      (As1 : AssocPlusRingoid A1)
      (As2 : AssocPlusRingoid A2) :
      Set where
      constructor AssocPlusRingoidRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ As1 x1 x2)
            (+ As2 y1 y2)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* As1 x1 x2)
            (* As2 y1 y2)
    data AssocPlusRingoidTerm
      : Set where
      +L :
        AssocPlusRingoidTerm ->
        AssocPlusRingoidTerm ->
        AssocPlusRingoidTerm
      *L :
        AssocPlusRingoidTerm ->
        AssocPlusRingoidTerm ->
        AssocPlusRingoidTerm
    data ClAssocPlusRingoidTerm
      (A : Set) : Set where
      sing :
        A -> ClAssocPlusRingoidTerm A
      +Cl :
        ClAssocPlusRingoidTerm A ->
        ClAssocPlusRingoidTerm A ->
        ClAssocPlusRingoidTerm A
      *Cl :
        ClAssocPlusRingoidTerm A ->
        ClAssocPlusRingoidTerm A ->
        ClAssocPlusRingoidTerm A
    data OpAssocPlusRingoidTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpAssocPlusRingoidTerm n
      +OL :
        OpAssocPlusRingoidTerm n ->
        OpAssocPlusRingoidTerm n ->
        OpAssocPlusRingoidTerm n
      *OL :
        OpAssocPlusRingoidTerm n ->
        OpAssocPlusRingoidTerm n ->
        OpAssocPlusRingoidTerm n
    data OpAssocPlusRingoidTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAssocPlusRingoidTerm2 n A
      sing2 :
        A -> OpAssocPlusRingoidTerm2 n A
      +OL2 :
        OpAssocPlusRingoidTerm2 n A ->
        OpAssocPlusRingoidTerm2 n A ->
        OpAssocPlusRingoidTerm2 n A
      *OL2 :
        OpAssocPlusRingoidTerm2 n A ->
        OpAssocPlusRingoidTerm2 n A ->
        OpAssocPlusRingoidTerm2 n A
  
  module AssocTimesRingoid where
    record AssocTimesRingoid
      (A : Set) : Set where
      constructor AssocTimesRingoidC
      field
        * : A -> A -> A
        + : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
    record AssocTimesRingoidSig
      (AS : Set) : Set where
      constructor AssocTimesRingoidSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record AssocTimesRingoidProd
      (AP : Set) : Set where
      constructor AssocTimesRingoidProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
    record AssocTimesRingoidHom
      (A1 : Set) (A2 : Set)
      (As1 : AssocTimesRingoid A1)
      (As2 : AssocTimesRingoid A2) :
      Set where
      constructor AssocTimesRingoidHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* As1 x1 x2) ==
            * As2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ As1 x1 x2) ==
            + As2 (hom x1) (hom x2)
    record AssocTimesRingoidRelInterp
      (A1 : Set) (A2 : Set)
      (As1 : AssocTimesRingoid A1)
      (As2 : AssocTimesRingoid A2) :
      Set where
      constructor AssocTimesRingoidRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* As1 x1 x2)
            (* As2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ As1 x1 x2)
            (+ As2 y1 y2)
    data AssocTimesRingoidTerm
      : Set where
      *L :
        AssocTimesRingoidTerm ->
        AssocTimesRingoidTerm ->
        AssocTimesRingoidTerm
      +L :
        AssocTimesRingoidTerm ->
        AssocTimesRingoidTerm ->
        AssocTimesRingoidTerm
    data ClAssocTimesRingoidTerm
      (A : Set) : Set where
      sing :
        A -> ClAssocTimesRingoidTerm A
      *Cl :
        ClAssocTimesRingoidTerm A ->
        ClAssocTimesRingoidTerm A ->
        ClAssocTimesRingoidTerm A
      +Cl :
        ClAssocTimesRingoidTerm A ->
        ClAssocTimesRingoidTerm A ->
        ClAssocTimesRingoidTerm A
    data OpAssocTimesRingoidTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpAssocTimesRingoidTerm n
      *OL :
        OpAssocTimesRingoidTerm n ->
        OpAssocTimesRingoidTerm n ->
        OpAssocTimesRingoidTerm n
      +OL :
        OpAssocTimesRingoidTerm n ->
        OpAssocTimesRingoidTerm n ->
        OpAssocTimesRingoidTerm n
    data OpAssocTimesRingoidTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAssocTimesRingoidTerm2 n A
      sing2 :
        A ->
        OpAssocTimesRingoidTerm2 n A
      *OL2 :
        OpAssocTimesRingoidTerm2 n A ->
        OpAssocTimesRingoidTerm2 n A ->
        OpAssocTimesRingoidTerm2 n A
      +OL2 :
        OpAssocTimesRingoidTerm2 n A ->
        OpAssocTimesRingoidTerm2 n A ->
        OpAssocTimesRingoidTerm2 n A
  
  module AssociativeLeftRingoid where
    record AssociativeLeftRingoid
      (A : Set) : Set where
      constructor AssociativeLeftRingoidC
      field
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        + : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
    record AssociativeLeftRingoidSig
      (AS : Set) : Set where
      constructor AssociativeLeftRingoidSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record AssociativeLeftRingoidProd
      (AP : Set) : Set where
      constructor AssociativeLeftRingoidProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
    record AssociativeLeftRingoidHom
      (A1 : Set) (A2 : Set)
      (As1 : AssociativeLeftRingoid
         A1)
      (As2 : AssociativeLeftRingoid
         A2) : Set where
      constructor AssociativeLeftRingoidHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* As1 x1 x2) ==
            * As2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ As1 x1 x2) ==
            + As2 (hom x1) (hom x2)
    record AssociativeLeftRingoidRelInterp
      (A1 : Set) (A2 : Set)
      (As1 : AssociativeLeftRingoid
         A1)
      (As2 : AssociativeLeftRingoid
         A2) : Set where
      constructor AssociativeLeftRingoidRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* As1 x1 x2)
            (* As2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ As1 x1 x2)
            (+ As2 y1 y2)
    data AssociativeLeftRingoidTerm
      : Set where
      *L :
        AssociativeLeftRingoidTerm ->
        AssociativeLeftRingoidTerm ->
        AssociativeLeftRingoidTerm
      +L :
        AssociativeLeftRingoidTerm ->
        AssociativeLeftRingoidTerm ->
        AssociativeLeftRingoidTerm
    data ClAssociativeLeftRingoidTerm
      (A : Set) : Set where
      sing :
        A ->
        ClAssociativeLeftRingoidTerm A
      *Cl :
        ClAssociativeLeftRingoidTerm
          A ->
        ClAssociativeLeftRingoidTerm
          A ->
        ClAssociativeLeftRingoidTerm A
      +Cl :
        ClAssociativeLeftRingoidTerm
          A ->
        ClAssociativeLeftRingoidTerm
          A ->
        ClAssociativeLeftRingoidTerm A
    data OpAssociativeLeftRingoidTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpAssociativeLeftRingoidTerm n
      *OL :
        OpAssociativeLeftRingoidTerm
          n ->
        OpAssociativeLeftRingoidTerm
          n ->
        OpAssociativeLeftRingoidTerm n
      +OL :
        OpAssociativeLeftRingoidTerm
          n ->
        OpAssociativeLeftRingoidTerm
          n ->
        OpAssociativeLeftRingoidTerm n
    data OpAssociativeLeftRingoidTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAssociativeLeftRingoidTerm2 n
          A
      sing2 :
        A ->
        OpAssociativeLeftRingoidTerm2 n
          A
      *OL2 :
        OpAssociativeLeftRingoidTerm2 n
          A ->
        OpAssociativeLeftRingoidTerm2 n
          A ->
        OpAssociativeLeftRingoidTerm2 n
          A
      +OL2 :
        OpAssociativeLeftRingoidTerm2 n
          A ->
        OpAssociativeLeftRingoidTerm2 n
          A ->
        OpAssociativeLeftRingoidTerm2 n
          A
  
  module AssociativeNonDistributiveRingoid where
    record AssociativeNonDistributiveRingoid
      (A : Set) : Set where
      constructor AssociativeNonDistributiveRingoidC
      field
        * : A -> A -> A
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
    record AssociativeNonDistributiveRingoidSig
      (AS : Set) : Set where
      constructor AssociativeNonDistributiveRingoidSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record AssociativeNonDistributiveRingoidProd
      (AP : Set) : Set where
      constructor AssociativeNonDistributiveRingoidProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
    record AssociativeNonDistributiveRingoidHom
      (A1 : Set) (A2 : Set)
      (As1 : AssociativeNonDistributiveRingoid
         A1)
      (As2 : AssociativeNonDistributiveRingoid
         A2) : Set where
      constructor AssociativeNonDistributiveRingoidHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* As1 x1 x2) ==
            * As2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ As1 x1 x2) ==
            + As2 (hom x1) (hom x2)
    record AssociativeNonDistributiveRingoidRelInterp
      (A1 : Set) (A2 : Set)
      (As1 : AssociativeNonDistributiveRingoid
         A1)
      (As2 : AssociativeNonDistributiveRingoid
         A2) : Set where
      constructor AssociativeNonDistributiveRingoidRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* As1 x1 x2)
            (* As2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ As1 x1 x2)
            (+ As2 y1 y2)
    data AssociativeNonDistributiveRingoidTerm
      : Set where
      *L :
        AssociativeNonDistributiveRingoidTerm ->
        AssociativeNonDistributiveRingoidTerm ->
        AssociativeNonDistributiveRingoidTerm
      +L :
        AssociativeNonDistributiveRingoidTerm ->
        AssociativeNonDistributiveRingoidTerm ->
        AssociativeNonDistributiveRingoidTerm
    data ClAssociativeNonDistributiveRingoidTerm
      (A : Set) : Set where
      sing :
        A ->
        ClAssociativeNonDistributiveRingoidTerm
          A
      *Cl :
        ClAssociativeNonDistributiveRingoidTerm
          A ->
        ClAssociativeNonDistributiveRingoidTerm
          A ->
        ClAssociativeNonDistributiveRingoidTerm
          A
      +Cl :
        ClAssociativeNonDistributiveRingoidTerm
          A ->
        ClAssociativeNonDistributiveRingoidTerm
          A ->
        ClAssociativeNonDistributiveRingoidTerm
          A
    data OpAssociativeNonDistributiveRingoidTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpAssociativeNonDistributiveRingoidTerm
          n
      *OL :
        OpAssociativeNonDistributiveRingoidTerm
          n ->
        OpAssociativeNonDistributiveRingoidTerm
          n ->
        OpAssociativeNonDistributiveRingoidTerm
          n
      +OL :
        OpAssociativeNonDistributiveRingoidTerm
          n ->
        OpAssociativeNonDistributiveRingoidTerm
          n ->
        OpAssociativeNonDistributiveRingoidTerm
          n
    data OpAssociativeNonDistributiveRingoidTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAssociativeNonDistributiveRingoidTerm2
          n
          A
      sing2 :
        A ->
        OpAssociativeNonDistributiveRingoidTerm2
          n
          A
      *OL2 :
        OpAssociativeNonDistributiveRingoidTerm2
          n
          A ->
        OpAssociativeNonDistributiveRingoidTerm2
          n
          A ->
        OpAssociativeNonDistributiveRingoidTerm2
          n
          A
      +OL2 :
        OpAssociativeNonDistributiveRingoidTerm2
          n
          A ->
        OpAssociativeNonDistributiveRingoidTerm2
          n
          A ->
        OpAssociativeNonDistributiveRingoidTerm2
          n
          A
  
  module AssociativeRightRingoid where
    record AssociativeRightRingoid
      (A : Set) : Set where
      constructor AssociativeRightRingoidC
      field
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        + : A -> A -> A
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record AssociativeRightRingoidSig
      (AS : Set) : Set where
      constructor AssociativeRightRingoidSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record AssociativeRightRingoidProd
      (AP : Set) : Set where
      constructor AssociativeRightRingoidProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record AssociativeRightRingoidHom
      (A1 : Set) (A2 : Set)
      (As1 : AssociativeRightRingoid
         A1)
      (As2 : AssociativeRightRingoid
         A2) : Set where
      constructor AssociativeRightRingoidHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* As1 x1 x2) ==
            * As2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ As1 x1 x2) ==
            + As2 (hom x1) (hom x2)
    record AssociativeRightRingoidRelInterp
      (A1 : Set) (A2 : Set)
      (As1 : AssociativeRightRingoid
         A1)
      (As2 : AssociativeRightRingoid
         A2) : Set where
      constructor AssociativeRightRingoidRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* As1 x1 x2)
            (* As2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ As1 x1 x2)
            (+ As2 y1 y2)
    data AssociativeRightRingoidTerm
      : Set where
      *L :
        AssociativeRightRingoidTerm ->
        AssociativeRightRingoidTerm ->
        AssociativeRightRingoidTerm
      +L :
        AssociativeRightRingoidTerm ->
        AssociativeRightRingoidTerm ->
        AssociativeRightRingoidTerm
    data ClAssociativeRightRingoidTerm
      (A : Set) : Set where
      sing :
        A ->
        ClAssociativeRightRingoidTerm A
      *Cl :
        ClAssociativeRightRingoidTerm
          A ->
        ClAssociativeRightRingoidTerm
          A ->
        ClAssociativeRightRingoidTerm A
      +Cl :
        ClAssociativeRightRingoidTerm
          A ->
        ClAssociativeRightRingoidTerm
          A ->
        ClAssociativeRightRingoidTerm A
    data OpAssociativeRightRingoidTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpAssociativeRightRingoidTerm n
      *OL :
        OpAssociativeRightRingoidTerm
          n ->
        OpAssociativeRightRingoidTerm
          n ->
        OpAssociativeRightRingoidTerm n
      +OL :
        OpAssociativeRightRingoidTerm
          n ->
        OpAssociativeRightRingoidTerm
          n ->
        OpAssociativeRightRingoidTerm n
    data OpAssociativeRightRingoidTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpAssociativeRightRingoidTerm2 n
          A
      sing2 :
        A ->
        OpAssociativeRightRingoidTerm2 n
          A
      *OL2 :
        OpAssociativeRightRingoidTerm2 n
          A ->
        OpAssociativeRightRingoidTerm2 n
          A ->
        OpAssociativeRightRingoidTerm2 n
          A
      +OL2 :
        OpAssociativeRightRingoidTerm2 n
          A ->
        OpAssociativeRightRingoidTerm2 n
          A ->
        OpAssociativeRightRingoidTerm2 n
          A
  
  module Band where
    record Band
      (A : Set) : Set where
      constructor BandC
      field
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        idempotent_op :
          (x : A) -> op x x == x
    record BandSig
      (AS : Set) : Set where
      constructor BandSigSigC
      field
        opS : AS -> AS -> AS
    record BandProd
      (AP : Set) : Set where
      constructor BandProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        idempotent_opP :
          (xP : Prod AP AP) ->
          opP xP xP == xP
    record BandHom
      (A1 : Set) (A2 : Set)
      (Ba1 : Band A1)
      (Ba2 : Band A2) : Set where
      constructor BandHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ba1 x1 x2) ==
            op Ba2 (hom x1) (hom x2)
    record BandRelInterp
      (A1 : Set) (A2 : Set)
      (Ba1 : Band A1)
      (Ba2 : Band A2) : Set where
      constructor BandRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ba1 x1 x2)
            (op Ba2 y1 y2)
    data BandTerm : Set where
      opL :
        BandTerm -> BandTerm -> BandTerm
    data ClBandTerm
      (A : Set) : Set where
      sing : A -> ClBandTerm A
      opCl :
        ClBandTerm A ->
        ClBandTerm A -> ClBandTerm A
    data OpBandTerm
      (n : Nat) : Set where
      v : Fin n -> OpBandTerm n
      opOL :
        OpBandTerm n ->
        OpBandTerm n -> OpBandTerm n
    data OpBandTerm2
      (n : Nat) (A : Set) : Set where
      v2 : Fin n -> OpBandTerm2 n A
      sing2 : A -> OpBandTerm2 n A
      opOL2 :
        OpBandTerm2 n A ->
        OpBandTerm2 n A ->
        OpBandTerm2 n A
  
  module BinaryInverse where
    record BinaryInverse
      (A : Set) : Set where
      constructor BinaryInverseC
      field
        |> : A -> A -> A
        <| : A -> A -> A
        leftInverse :
          (x : A) (y : A) ->
          <| (|> x y) x == y
        rightInverse :
          (x : A) (y : A) ->
          |> x (<| y x) == y
    record BinaryInverseSig
      (AS : Set) : Set where
      constructor BinaryInverseSigSigC
      field
        |>S : AS -> AS -> AS
        <|S : AS -> AS -> AS
    record BinaryInverseProd
      (AP : Set) : Set where
      constructor BinaryInverseProdC
      field
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftInverseP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          <|P (|>P xP yP) xP == yP
        rightInverseP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          |>P xP (<|P yP xP) == yP
    record BinaryInverseHom
      (A1 : Set) (A2 : Set)
      (Bi1 : BinaryInverse A1)
      (Bi2 : BinaryInverse A2) :
      Set where
      constructor BinaryInverseHomC
      field
        hom : A1 -> A2
        pres-|> :
          (x1 : A1) (x2 : A1) ->
          hom (|> Bi1 x1 x2) ==
            |> Bi2 (hom x1) (hom x2)
        pres-<| :
          (x1 : A1) (x2 : A1) ->
          hom (<| Bi1 x1 x2) ==
            <| Bi2 (hom x1) (hom x2)
    record BinaryInverseRelInterp
      (A1 : Set) (A2 : Set)
      (Bi1 : BinaryInverse A1)
      (Bi2 : BinaryInverse A2) :
      Set where
      constructor BinaryInverseRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-|> :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (|> Bi1 x1 x2)
            (|> Bi2 y1 y2)
        interp-<| :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (<| Bi1 x1 x2)
            (<| Bi2 y1 y2)
    data BinaryInverseTerm
      : Set where
      |>L :
        BinaryInverseTerm ->
        BinaryInverseTerm ->
        BinaryInverseTerm
      <|L :
        BinaryInverseTerm ->
        BinaryInverseTerm ->
        BinaryInverseTerm
    data ClBinaryInverseTerm
      (A : Set) : Set where
      sing :
        A -> ClBinaryInverseTerm A
      |>Cl :
        ClBinaryInverseTerm A ->
        ClBinaryInverseTerm A ->
        ClBinaryInverseTerm A
      <|Cl :
        ClBinaryInverseTerm A ->
        ClBinaryInverseTerm A ->
        ClBinaryInverseTerm A
    data OpBinaryInverseTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpBinaryInverseTerm n
      |>OL :
        OpBinaryInverseTerm n ->
        OpBinaryInverseTerm n ->
        OpBinaryInverseTerm n
      <|OL :
        OpBinaryInverseTerm n ->
        OpBinaryInverseTerm n ->
        OpBinaryInverseTerm n
    data OpBinaryInverseTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpBinaryInverseTerm2 n A
      sing2 :
        A -> OpBinaryInverseTerm2 n A
      |>OL2 :
        OpBinaryInverseTerm2 n A ->
        OpBinaryInverseTerm2 n A ->
        OpBinaryInverseTerm2 n A
      <|OL2 :
        OpBinaryInverseTerm2 n A ->
        OpBinaryInverseTerm2 n A ->
        OpBinaryInverseTerm2 n A
  
  module BooleanGroup where
    record BooleanGroup
      (A : Set) : Set where
      constructor BooleanGroupC
      field
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        unipotence :
          (x : A) -> op x x == e
    record BooleanGroupSig
      (AS : Set) : Set where
      constructor BooleanGroupSigSigC
      field
        eS : AS
        opS : AS -> AS -> AS
    record BooleanGroupProd
      (AP : Set) : Set where
      constructor BooleanGroupProdC
      field
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        unipotenceP :
          (xP : Prod AP AP) ->
          opP xP xP == eP
    record BooleanGroupHom
      (A1 : Set) (A2 : Set)
      (Bo1 : BooleanGroup A1)
      (Bo2 : BooleanGroup A2) :
      Set where
      constructor BooleanGroupHomC
      field
        hom : A1 -> A2
        pres-e : hom (e Bo1) == e Bo2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Bo1 x1 x2) ==
            op Bo2 (hom x1) (hom x2)
    record BooleanGroupRelInterp
      (A1 : Set) (A2 : Set)
      (Bo1 : BooleanGroup A1)
      (Bo2 : BooleanGroup A2) :
      Set where
      constructor BooleanGroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-e :
          interp (e Bo1) (e Bo2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Bo1 x1 x2)
            (op Bo2 y1 y2)
    data BooleanGroupTerm
      : Set where
      eL : BooleanGroupTerm
      opL :
        BooleanGroupTerm ->
        BooleanGroupTerm ->
        BooleanGroupTerm
    data ClBooleanGroupTerm
      (A : Set) : Set where
      sing :
        A -> ClBooleanGroupTerm A
      eCl : ClBooleanGroupTerm A
      opCl :
        ClBooleanGroupTerm A ->
        ClBooleanGroupTerm A ->
        ClBooleanGroupTerm A
    data OpBooleanGroupTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpBooleanGroupTerm n
      eOL : OpBooleanGroupTerm n
      opOL :
        OpBooleanGroupTerm n ->
        OpBooleanGroupTerm n ->
        OpBooleanGroupTerm n
    data OpBooleanGroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpBooleanGroupTerm2 n A
      sing2 :
        A -> OpBooleanGroupTerm2 n A
      eOL2 : OpBooleanGroupTerm2 n A
      opOL2 :
        OpBooleanGroupTerm2 n A ->
        OpBooleanGroupTerm2 n A ->
        OpBooleanGroupTerm2 n A
  
  module BooleanRing where
    record BooleanRing
      (A : Set) : Set where
      constructor BooleanRingC
      field
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        + : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
        idempotent_* :
          (x : A) -> * x x == x
    record BooleanRingSig
      (AS : Set) : Set where
      constructor BooleanRingSigSigC
      field
        *S : AS -> AS -> AS
        1S : AS
        +S : AS -> AS -> AS
        0S : AS
        negS : AS -> AS
    record BooleanRingProd
      (AP : Set) : Set where
      constructor BooleanRingProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        negP : Prod AP AP -> Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        leftInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P xP (negP xP) == 0P
        rightInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P (negP xP) xP == 0P
        leftZero_op_0P :
          (xP : Prod AP AP) ->
          *P 0P xP == 0P
        rightZero_op_0P :
          (xP : Prod AP AP) ->
          *P xP 0P == 0P
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
    record BooleanRingHom
      (A1 : Set) (A2 : Set)
      (Bo1 : BooleanRing A1)
      (Bo2 : BooleanRing A2) :
      Set where
      constructor BooleanRingHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Bo1 x1 x2) ==
            * Bo2 (hom x1) (hom x2)
        pres-1 : hom (1 Bo1) == 1 Bo2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Bo1 x1 x2) ==
            + Bo2 (hom x1) (hom x2)
        pres-0 : hom (0 Bo1) == 0 Bo2
        pres-neg :
          (x1 : A1) ->
          hom (neg Bo1 x1) ==
            neg Bo2 (hom x1)
    record BooleanRingRelInterp
      (A1 : Set) (A2 : Set)
      (Bo1 : BooleanRing A1)
      (Bo2 : BooleanRing A2) :
      Set where
      constructor BooleanRingRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Bo1 x1 x2)
            (* Bo2 y1 y2)
        interp-1 :
          interp (1 Bo1) (1 Bo2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Bo1 x1 x2)
            (+ Bo2 y1 y2)
        interp-0 :
          interp (0 Bo1) (0 Bo2)
        interp-neg :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (neg Bo1 x1) (neg Bo2 y1)
    data BooleanRingTerm : Set where
      *L :
        BooleanRingTerm ->
        BooleanRingTerm ->
        BooleanRingTerm
      1L : BooleanRingTerm
      +L :
        BooleanRingTerm ->
        BooleanRingTerm ->
        BooleanRingTerm
      0L : BooleanRingTerm
      negL :
        BooleanRingTerm ->
        BooleanRingTerm
    data ClBooleanRingTerm
      (A : Set) : Set where
      sing :
        A -> ClBooleanRingTerm A
      *Cl :
        ClBooleanRingTerm A ->
        ClBooleanRingTerm A ->
        ClBooleanRingTerm A
      1Cl : ClBooleanRingTerm A
      +Cl :
        ClBooleanRingTerm A ->
        ClBooleanRingTerm A ->
        ClBooleanRingTerm A
      0Cl : ClBooleanRingTerm A
      negCl :
        ClBooleanRingTerm A ->
        ClBooleanRingTerm A
    data OpBooleanRingTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpBooleanRingTerm n
      *OL :
        OpBooleanRingTerm n ->
        OpBooleanRingTerm n ->
        OpBooleanRingTerm n
      1OL : OpBooleanRingTerm n
      +OL :
        OpBooleanRingTerm n ->
        OpBooleanRingTerm n ->
        OpBooleanRingTerm n
      0OL : OpBooleanRingTerm n
      negOL :
        OpBooleanRingTerm n ->
        OpBooleanRingTerm n
    data OpBooleanRingTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpBooleanRingTerm2 n A
      sing2 :
        A -> OpBooleanRingTerm2 n A
      *OL2 :
        OpBooleanRingTerm2 n A ->
        OpBooleanRingTerm2 n A ->
        OpBooleanRingTerm2 n A
      1OL2 : OpBooleanRingTerm2 n A
      +OL2 :
        OpBooleanRingTerm2 n A ->
        OpBooleanRingTerm2 n A ->
        OpBooleanRingTerm2 n A
      0OL2 : OpBooleanRingTerm2 n A
      negOL2 :
        OpBooleanRingTerm2 n A ->
        OpBooleanRingTerm2 n A
  
  module BoundedDistributiveLattice where
    record BoundedDistributiveLattice
      (A : Set) : Set where
      constructor BoundedDistributiveLatticeC
      field
        * : A -> A -> A
        + : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        idempotent_* :
          (x : A) -> * x x == x
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        idempotent_+ :
          (x : A) -> + x x == x
        leftAbsorp_*_+ :
          (x : A) (y : A) ->
          * x (+ x y) == x
        leftAbsorp_+_* :
          (x : A) (y : A) ->
          + x (* x y) == x
        leftModular_*_+ :
          (x : A) (y : A) (z : A) ->
          + (* x y) (* x z) ==
            * x (+ y (* x z))
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
    record BoundedDistributiveLatticeSig
      (AS : Set) : Set where
      constructor BoundedDistributiveLatticeSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        0S : AS
        1S : AS
    record BoundedDistributiveLatticeProd
      (AP : Set) : Set where
      constructor BoundedDistributiveLatticeProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        1P : Prod AP AP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
        leftAbsorp_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP (+P xP yP) == xP
        leftAbsorp_+_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP (*P xP yP) == xP
        leftModular_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (*P xP yP) (*P xP zP) ==
            *P xP (+P yP (*P xP zP))
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
    record BoundedDistributiveLatticeHom
      (A1 : Set) (A2 : Set)
      (Bo1 : BoundedDistributiveLattice
         A1)
      (Bo2 : BoundedDistributiveLattice
         A2) : Set where
      constructor BoundedDistributiveLatticeHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Bo1 x1 x2) ==
            * Bo2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Bo1 x1 x2) ==
            + Bo2 (hom x1) (hom x2)
        pres-0 : hom (0 Bo1) == 0 Bo2
        pres-1 : hom (1 Bo1) == 1 Bo2
    record BoundedDistributiveLatticeRelInterp
      (A1 : Set) (A2 : Set)
      (Bo1 : BoundedDistributiveLattice
         A1)
      (Bo2 : BoundedDistributiveLattice
         A2) : Set where
      constructor BoundedDistributiveLatticeRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Bo1 x1 x2)
            (* Bo2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Bo1 x1 x2)
            (+ Bo2 y1 y2)
        interp-0 :
          interp (0 Bo1) (0 Bo2)
        interp-1 :
          interp (1 Bo1) (1 Bo2)
    data BoundedDistributiveLatticeTerm
      : Set where
      *L :
        BoundedDistributiveLatticeTerm ->
        BoundedDistributiveLatticeTerm ->
        BoundedDistributiveLatticeTerm
      +L :
        BoundedDistributiveLatticeTerm ->
        BoundedDistributiveLatticeTerm ->
        BoundedDistributiveLatticeTerm
      0L :
        BoundedDistributiveLatticeTerm
      1L :
        BoundedDistributiveLatticeTerm
    data ClBoundedDistributiveLatticeTerm
      (A : Set) : Set where
      sing :
        A ->
        ClBoundedDistributiveLatticeTerm
          A
      *Cl :
        ClBoundedDistributiveLatticeTerm
          A ->
        ClBoundedDistributiveLatticeTerm
          A ->
        ClBoundedDistributiveLatticeTerm
          A
      +Cl :
        ClBoundedDistributiveLatticeTerm
          A ->
        ClBoundedDistributiveLatticeTerm
          A ->
        ClBoundedDistributiveLatticeTerm
          A
      0Cl :
        ClBoundedDistributiveLatticeTerm
          A
      1Cl :
        ClBoundedDistributiveLatticeTerm
          A
    data OpBoundedDistributiveLatticeTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpBoundedDistributiveLatticeTerm
          n
      *OL :
        OpBoundedDistributiveLatticeTerm
          n ->
        OpBoundedDistributiveLatticeTerm
          n ->
        OpBoundedDistributiveLatticeTerm
          n
      +OL :
        OpBoundedDistributiveLatticeTerm
          n ->
        OpBoundedDistributiveLatticeTerm
          n ->
        OpBoundedDistributiveLatticeTerm
          n
      0OL :
        OpBoundedDistributiveLatticeTerm
          n
      1OL :
        OpBoundedDistributiveLatticeTerm
          n
    data OpBoundedDistributiveLatticeTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpBoundedDistributiveLatticeTerm2
          n
          A
      sing2 :
        A ->
        OpBoundedDistributiveLatticeTerm2
          n
          A
      *OL2 :
        OpBoundedDistributiveLatticeTerm2
          n
          A ->
        OpBoundedDistributiveLatticeTerm2
          n
          A ->
        OpBoundedDistributiveLatticeTerm2
          n
          A
      +OL2 :
        OpBoundedDistributiveLatticeTerm2
          n
          A ->
        OpBoundedDistributiveLatticeTerm2
          n
          A ->
        OpBoundedDistributiveLatticeTerm2
          n
          A
      0OL2 :
        OpBoundedDistributiveLatticeTerm2
          n
          A
      1OL2 :
        OpBoundedDistributiveLatticeTerm2
          n
          A
  
  module BoundedJoinLattice where
    record BoundedJoinLattice
      (A : Set) : Set where
      constructor BoundedJoinLatticeC
      field
        + : A -> A -> A
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        idempotent_+ :
          (x : A) -> + x x == x
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        * : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        idempotent_* :
          (x : A) -> * x x == x
        leftAbsorp_*_+ :
          (x : A) (y : A) ->
          * x (+ x y) == x
        leftAbsorp_+_* :
          (x : A) (y : A) ->
          + x (* x y) == x
    record BoundedJoinLatticeSig
      (AS : Set) : Set where
      constructor BoundedJoinLatticeSigSigC
      field
        +S : AS -> AS -> AS
        0S : AS
        *S : AS -> AS -> AS
    record BoundedJoinLatticeProd
      (AP : Set) : Set where
      constructor BoundedJoinLatticeProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
        leftAbsorp_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP (+P xP yP) == xP
        leftAbsorp_+_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP (*P xP yP) == xP
    record BoundedJoinLatticeHom
      (A1 : Set) (A2 : Set)
      (Bo1 : BoundedJoinLattice A1)
      (Bo2 : BoundedJoinLattice A2) :
      Set where
      constructor BoundedJoinLatticeHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Bo1 x1 x2) ==
            + Bo2 (hom x1) (hom x2)
        pres-0 : hom (0 Bo1) == 0 Bo2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Bo1 x1 x2) ==
            * Bo2 (hom x1) (hom x2)
    record BoundedJoinLatticeRelInterp
      (A1 : Set) (A2 : Set)
      (Bo1 : BoundedJoinLattice A1)
      (Bo2 : BoundedJoinLattice A2) :
      Set where
      constructor BoundedJoinLatticeRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Bo1 x1 x2)
            (+ Bo2 y1 y2)
        interp-0 :
          interp (0 Bo1) (0 Bo2)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Bo1 x1 x2)
            (* Bo2 y1 y2)
    data BoundedJoinLatticeTerm
      : Set where
      +L :
        BoundedJoinLatticeTerm ->
        BoundedJoinLatticeTerm ->
        BoundedJoinLatticeTerm
      0L : BoundedJoinLatticeTerm
      *L :
        BoundedJoinLatticeTerm ->
        BoundedJoinLatticeTerm ->
        BoundedJoinLatticeTerm
    data ClBoundedJoinLatticeTerm
      (A : Set) : Set where
      sing :
        A -> ClBoundedJoinLatticeTerm A
      +Cl :
        ClBoundedJoinLatticeTerm A ->
        ClBoundedJoinLatticeTerm A ->
        ClBoundedJoinLatticeTerm A
      0Cl : ClBoundedJoinLatticeTerm A
      *Cl :
        ClBoundedJoinLatticeTerm A ->
        ClBoundedJoinLatticeTerm A ->
        ClBoundedJoinLatticeTerm A
    data OpBoundedJoinLatticeTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpBoundedJoinLatticeTerm n
      +OL :
        OpBoundedJoinLatticeTerm n ->
        OpBoundedJoinLatticeTerm n ->
        OpBoundedJoinLatticeTerm n
      0OL : OpBoundedJoinLatticeTerm n
      *OL :
        OpBoundedJoinLatticeTerm n ->
        OpBoundedJoinLatticeTerm n ->
        OpBoundedJoinLatticeTerm n
    data OpBoundedJoinLatticeTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpBoundedJoinLatticeTerm2 n A
      sing2 :
        A ->
        OpBoundedJoinLatticeTerm2 n A
      +OL2 :
        OpBoundedJoinLatticeTerm2 n A ->
        OpBoundedJoinLatticeTerm2 n A ->
        OpBoundedJoinLatticeTerm2 n A
      0OL2 :
        OpBoundedJoinLatticeTerm2 n A
      *OL2 :
        OpBoundedJoinLatticeTerm2 n A ->
        OpBoundedJoinLatticeTerm2 n A ->
        OpBoundedJoinLatticeTerm2 n A
  
  module BoundedJoinSemilattice where
    record BoundedJoinSemilattice
      (A : Set) : Set where
      constructor BoundedJoinSemilatticeC
      field
        + : A -> A -> A
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        idempotent_+ :
          (x : A) -> + x x == x
    record BoundedJoinSemilatticeSig
      (AS : Set) : Set where
      constructor BoundedJoinSemilatticeSigSigC
      field
        +S : AS -> AS -> AS
        0S : AS
    record BoundedJoinSemilatticeProd
      (AP : Set) : Set where
      constructor BoundedJoinSemilatticeProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
    record BoundedJoinSemilatticeHom
      (A1 : Set) (A2 : Set)
      (Bo1 : BoundedJoinSemilattice
         A1)
      (Bo2 : BoundedJoinSemilattice
         A2) : Set where
      constructor BoundedJoinSemilatticeHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Bo1 x1 x2) ==
            + Bo2 (hom x1) (hom x2)
        pres-0 : hom (0 Bo1) == 0 Bo2
    record BoundedJoinSemilatticeRelInterp
      (A1 : Set) (A2 : Set)
      (Bo1 : BoundedJoinSemilattice
         A1)
      (Bo2 : BoundedJoinSemilattice
         A2) : Set where
      constructor BoundedJoinSemilatticeRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Bo1 x1 x2)
            (+ Bo2 y1 y2)
        interp-0 :
          interp (0 Bo1) (0 Bo2)
    data BoundedJoinSemilatticeTerm
      : Set where
      +L :
        BoundedJoinSemilatticeTerm ->
        BoundedJoinSemilatticeTerm ->
        BoundedJoinSemilatticeTerm
      0L : BoundedJoinSemilatticeTerm
    data ClBoundedJoinSemilatticeTerm
      (A : Set) : Set where
      sing :
        A ->
        ClBoundedJoinSemilatticeTerm A
      +Cl :
        ClBoundedJoinSemilatticeTerm
          A ->
        ClBoundedJoinSemilatticeTerm
          A ->
        ClBoundedJoinSemilatticeTerm A
      0Cl :
        ClBoundedJoinSemilatticeTerm A
    data OpBoundedJoinSemilatticeTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpBoundedJoinSemilatticeTerm n
      +OL :
        OpBoundedJoinSemilatticeTerm
          n ->
        OpBoundedJoinSemilatticeTerm
          n ->
        OpBoundedJoinSemilatticeTerm n
      0OL :
        OpBoundedJoinSemilatticeTerm n
    data OpBoundedJoinSemilatticeTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpBoundedJoinSemilatticeTerm2 n
          A
      sing2 :
        A ->
        OpBoundedJoinSemilatticeTerm2 n
          A
      +OL2 :
        OpBoundedJoinSemilatticeTerm2 n
          A ->
        OpBoundedJoinSemilatticeTerm2 n
          A ->
        OpBoundedJoinSemilatticeTerm2 n
          A
      0OL2 :
        OpBoundedJoinSemilatticeTerm2 n
          A
  
  module BoundedLattice where
    record BoundedLattice
      (A : Set) : Set where
      constructor BoundedLatticeC
      field
        * : A -> A -> A
        + : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        idempotent_* :
          (x : A) -> * x x == x
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        idempotent_+ :
          (x : A) -> + x x == x
        leftAbsorp_*_+ :
          (x : A) (y : A) ->
          * x (+ x y) == x
        leftAbsorp_+_* :
          (x : A) (y : A) ->
          + x (* x y) == x
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
    record BoundedLatticeSig
      (AS : Set) : Set where
      constructor BoundedLatticeSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        0S : AS
        1S : AS
    record BoundedLatticeProd
      (AP : Set) : Set where
      constructor BoundedLatticeProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        1P : Prod AP AP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
        leftAbsorp_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP (+P xP yP) == xP
        leftAbsorp_+_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP (*P xP yP) == xP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
    record BoundedLatticeHom
      (A1 : Set) (A2 : Set)
      (Bo1 : BoundedLattice A1)
      (Bo2 : BoundedLattice A2) :
      Set where
      constructor BoundedLatticeHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Bo1 x1 x2) ==
            * Bo2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Bo1 x1 x2) ==
            + Bo2 (hom x1) (hom x2)
        pres-0 : hom (0 Bo1) == 0 Bo2
        pres-1 : hom (1 Bo1) == 1 Bo2
    record BoundedLatticeRelInterp
      (A1 : Set) (A2 : Set)
      (Bo1 : BoundedLattice A1)
      (Bo2 : BoundedLattice A2) :
      Set where
      constructor BoundedLatticeRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Bo1 x1 x2)
            (* Bo2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Bo1 x1 x2)
            (+ Bo2 y1 y2)
        interp-0 :
          interp (0 Bo1) (0 Bo2)
        interp-1 :
          interp (1 Bo1) (1 Bo2)
    data BoundedLatticeTerm
      : Set where
      *L :
        BoundedLatticeTerm ->
        BoundedLatticeTerm ->
        BoundedLatticeTerm
      +L :
        BoundedLatticeTerm ->
        BoundedLatticeTerm ->
        BoundedLatticeTerm
      0L : BoundedLatticeTerm
      1L : BoundedLatticeTerm
    data ClBoundedLatticeTerm
      (A : Set) : Set where
      sing :
        A -> ClBoundedLatticeTerm A
      *Cl :
        ClBoundedLatticeTerm A ->
        ClBoundedLatticeTerm A ->
        ClBoundedLatticeTerm A
      +Cl :
        ClBoundedLatticeTerm A ->
        ClBoundedLatticeTerm A ->
        ClBoundedLatticeTerm A
      0Cl : ClBoundedLatticeTerm A
      1Cl : ClBoundedLatticeTerm A
    data OpBoundedLatticeTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpBoundedLatticeTerm n
      *OL :
        OpBoundedLatticeTerm n ->
        OpBoundedLatticeTerm n ->
        OpBoundedLatticeTerm n
      +OL :
        OpBoundedLatticeTerm n ->
        OpBoundedLatticeTerm n ->
        OpBoundedLatticeTerm n
      0OL : OpBoundedLatticeTerm n
      1OL : OpBoundedLatticeTerm n
    data OpBoundedLatticeTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpBoundedLatticeTerm2 n A
      sing2 :
        A -> OpBoundedLatticeTerm2 n A
      *OL2 :
        OpBoundedLatticeTerm2 n A ->
        OpBoundedLatticeTerm2 n A ->
        OpBoundedLatticeTerm2 n A
      +OL2 :
        OpBoundedLatticeTerm2 n A ->
        OpBoundedLatticeTerm2 n A ->
        OpBoundedLatticeTerm2 n A
      0OL2 : OpBoundedLatticeTerm2 n A
      1OL2 : OpBoundedLatticeTerm2 n A
  
  module BoundedMeetLattice where
    record BoundedMeetLattice
      (A : Set) : Set where
      constructor BoundedMeetLatticeC
      field
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        idempotent_* :
          (x : A) -> * x x == x
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        + : A -> A -> A
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        idempotent_+ :
          (x : A) -> + x x == x
        leftAbsorp_*_+ :
          (x : A) (y : A) ->
          * x (+ x y) == x
        leftAbsorp_+_* :
          (x : A) (y : A) ->
          + x (* x y) == x
    record BoundedMeetLatticeSig
      (AS : Set) : Set where
      constructor BoundedMeetLatticeSigSigC
      field
        *S : AS -> AS -> AS
        1S : AS
        +S : AS -> AS -> AS
    record BoundedMeetLatticeProd
      (AP : Set) : Set where
      constructor BoundedMeetLatticeProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
        leftAbsorp_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP (+P xP yP) == xP
        leftAbsorp_+_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP (*P xP yP) == xP
    record BoundedMeetLatticeHom
      (A1 : Set) (A2 : Set)
      (Bo1 : BoundedMeetLattice A1)
      (Bo2 : BoundedMeetLattice A2) :
      Set where
      constructor BoundedMeetLatticeHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Bo1 x1 x2) ==
            * Bo2 (hom x1) (hom x2)
        pres-1 : hom (1 Bo1) == 1 Bo2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Bo1 x1 x2) ==
            + Bo2 (hom x1) (hom x2)
    record BoundedMeetLatticeRelInterp
      (A1 : Set) (A2 : Set)
      (Bo1 : BoundedMeetLattice A1)
      (Bo2 : BoundedMeetLattice A2) :
      Set where
      constructor BoundedMeetLatticeRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Bo1 x1 x2)
            (* Bo2 y1 y2)
        interp-1 :
          interp (1 Bo1) (1 Bo2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Bo1 x1 x2)
            (+ Bo2 y1 y2)
    data BoundedMeetLatticeTerm
      : Set where
      *L :
        BoundedMeetLatticeTerm ->
        BoundedMeetLatticeTerm ->
        BoundedMeetLatticeTerm
      1L : BoundedMeetLatticeTerm
      +L :
        BoundedMeetLatticeTerm ->
        BoundedMeetLatticeTerm ->
        BoundedMeetLatticeTerm
    data ClBoundedMeetLatticeTerm
      (A : Set) : Set where
      sing :
        A -> ClBoundedMeetLatticeTerm A
      *Cl :
        ClBoundedMeetLatticeTerm A ->
        ClBoundedMeetLatticeTerm A ->
        ClBoundedMeetLatticeTerm A
      1Cl : ClBoundedMeetLatticeTerm A
      +Cl :
        ClBoundedMeetLatticeTerm A ->
        ClBoundedMeetLatticeTerm A ->
        ClBoundedMeetLatticeTerm A
    data OpBoundedMeetLatticeTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpBoundedMeetLatticeTerm n
      *OL :
        OpBoundedMeetLatticeTerm n ->
        OpBoundedMeetLatticeTerm n ->
        OpBoundedMeetLatticeTerm n
      1OL : OpBoundedMeetLatticeTerm n
      +OL :
        OpBoundedMeetLatticeTerm n ->
        OpBoundedMeetLatticeTerm n ->
        OpBoundedMeetLatticeTerm n
    data OpBoundedMeetLatticeTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpBoundedMeetLatticeTerm2 n A
      sing2 :
        A ->
        OpBoundedMeetLatticeTerm2 n A
      *OL2 :
        OpBoundedMeetLatticeTerm2 n A ->
        OpBoundedMeetLatticeTerm2 n A ->
        OpBoundedMeetLatticeTerm2 n A
      1OL2 :
        OpBoundedMeetLatticeTerm2 n A
      +OL2 :
        OpBoundedMeetLatticeTerm2 n A ->
        OpBoundedMeetLatticeTerm2 n A ->
        OpBoundedMeetLatticeTerm2 n A
  
  module BoundedMeetSemilattice where
    record BoundedMeetSemilattice
      (A : Set) : Set where
      constructor BoundedMeetSemilatticeC
      field
        * : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        idempotent_* :
          (x : A) -> * x x == x
    record BoundedMeetSemilatticeSig
      (AS : Set) : Set where
      constructor BoundedMeetSemilatticeSigSigC
      field
        *S : AS -> AS -> AS
        1S : AS
    record BoundedMeetSemilatticeProd
      (AP : Set) : Set where
      constructor BoundedMeetSemilatticeProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
    record BoundedMeetSemilatticeHom
      (A1 : Set) (A2 : Set)
      (Bo1 : BoundedMeetSemilattice
         A1)
      (Bo2 : BoundedMeetSemilattice
         A2) : Set where
      constructor BoundedMeetSemilatticeHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Bo1 x1 x2) ==
            * Bo2 (hom x1) (hom x2)
        pres-1 : hom (1 Bo1) == 1 Bo2
    record BoundedMeetSemilatticeRelInterp
      (A1 : Set) (A2 : Set)
      (Bo1 : BoundedMeetSemilattice
         A1)
      (Bo2 : BoundedMeetSemilattice
         A2) : Set where
      constructor BoundedMeetSemilatticeRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Bo1 x1 x2)
            (* Bo2 y1 y2)
        interp-1 :
          interp (1 Bo1) (1 Bo2)
    data BoundedMeetSemilatticeTerm
      : Set where
      *L :
        BoundedMeetSemilatticeTerm ->
        BoundedMeetSemilatticeTerm ->
        BoundedMeetSemilatticeTerm
      1L : BoundedMeetSemilatticeTerm
    data ClBoundedMeetSemilatticeTerm
      (A : Set) : Set where
      sing :
        A ->
        ClBoundedMeetSemilatticeTerm A
      *Cl :
        ClBoundedMeetSemilatticeTerm
          A ->
        ClBoundedMeetSemilatticeTerm
          A ->
        ClBoundedMeetSemilatticeTerm A
      1Cl :
        ClBoundedMeetSemilatticeTerm A
    data OpBoundedMeetSemilatticeTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpBoundedMeetSemilatticeTerm n
      *OL :
        OpBoundedMeetSemilatticeTerm
          n ->
        OpBoundedMeetSemilatticeTerm
          n ->
        OpBoundedMeetSemilatticeTerm n
      1OL :
        OpBoundedMeetSemilatticeTerm n
    data OpBoundedMeetSemilatticeTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpBoundedMeetSemilatticeTerm2 n
          A
      sing2 :
        A ->
        OpBoundedMeetSemilatticeTerm2 n
          A
      *OL2 :
        OpBoundedMeetSemilatticeTerm2 n
          A ->
        OpBoundedMeetSemilatticeTerm2 n
          A ->
        OpBoundedMeetSemilatticeTerm2 n
          A
      1OL2 :
        OpBoundedMeetSemilatticeTerm2 n
          A
  
  module BoundedModularLattice where
    record BoundedModularLattice
      (A : Set) : Set where
      constructor BoundedModularLatticeC
      field
        * : A -> A -> A
        + : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        idempotent_* :
          (x : A) -> * x x == x
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        idempotent_+ :
          (x : A) -> + x x == x
        leftAbsorp_*_+ :
          (x : A) (y : A) ->
          * x (+ x y) == x
        leftAbsorp_+_* :
          (x : A) (y : A) ->
          + x (* x y) == x
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        leftModular_*_+ :
          (x : A) (y : A) (z : A) ->
          + (* x y) (* x z) ==
            * x (+ y (* x z))
    record BoundedModularLatticeSig
      (AS : Set) : Set where
      constructor BoundedModularLatticeSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        0S : AS
        1S : AS
    record BoundedModularLatticeProd
      (AP : Set) : Set where
      constructor BoundedModularLatticeProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        1P : Prod AP AP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
        leftAbsorp_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP (+P xP yP) == xP
        leftAbsorp_+_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP (*P xP yP) == xP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        leftModular_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (*P xP yP) (*P xP zP) ==
            *P xP (+P yP (*P xP zP))
    record BoundedModularLatticeHom
      (A1 : Set) (A2 : Set)
      (Bo1 : BoundedModularLattice A1)
      (Bo2 : BoundedModularLattice
         A2) : Set where
      constructor BoundedModularLatticeHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Bo1 x1 x2) ==
            * Bo2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Bo1 x1 x2) ==
            + Bo2 (hom x1) (hom x2)
        pres-0 : hom (0 Bo1) == 0 Bo2
        pres-1 : hom (1 Bo1) == 1 Bo2
    record BoundedModularLatticeRelInterp
      (A1 : Set) (A2 : Set)
      (Bo1 : BoundedModularLattice A1)
      (Bo2 : BoundedModularLattice
         A2) : Set where
      constructor BoundedModularLatticeRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Bo1 x1 x2)
            (* Bo2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Bo1 x1 x2)
            (+ Bo2 y1 y2)
        interp-0 :
          interp (0 Bo1) (0 Bo2)
        interp-1 :
          interp (1 Bo1) (1 Bo2)
    data BoundedModularLatticeTerm
      : Set where
      *L :
        BoundedModularLatticeTerm ->
        BoundedModularLatticeTerm ->
        BoundedModularLatticeTerm
      +L :
        BoundedModularLatticeTerm ->
        BoundedModularLatticeTerm ->
        BoundedModularLatticeTerm
      0L : BoundedModularLatticeTerm
      1L : BoundedModularLatticeTerm
    data ClBoundedModularLatticeTerm
      (A : Set) : Set where
      sing :
        A ->
        ClBoundedModularLatticeTerm A
      *Cl :
        ClBoundedModularLatticeTerm A ->
        ClBoundedModularLatticeTerm A ->
        ClBoundedModularLatticeTerm A
      +Cl :
        ClBoundedModularLatticeTerm A ->
        ClBoundedModularLatticeTerm A ->
        ClBoundedModularLatticeTerm A
      0Cl :
        ClBoundedModularLatticeTerm A
      1Cl :
        ClBoundedModularLatticeTerm A
    data OpBoundedModularLatticeTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpBoundedModularLatticeTerm n
      *OL :
        OpBoundedModularLatticeTerm n ->
        OpBoundedModularLatticeTerm n ->
        OpBoundedModularLatticeTerm n
      +OL :
        OpBoundedModularLatticeTerm n ->
        OpBoundedModularLatticeTerm n ->
        OpBoundedModularLatticeTerm n
      0OL :
        OpBoundedModularLatticeTerm n
      1OL :
        OpBoundedModularLatticeTerm n
    data OpBoundedModularLatticeTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpBoundedModularLatticeTerm2 n A
      sing2 :
        A ->
        OpBoundedModularLatticeTerm2 n A
      *OL2 :
        OpBoundedModularLatticeTerm2 n
          A ->
        OpBoundedModularLatticeTerm2 n
          A ->
        OpBoundedModularLatticeTerm2 n A
      +OL2 :
        OpBoundedModularLatticeTerm2 n
          A ->
        OpBoundedModularLatticeTerm2 n
          A ->
        OpBoundedModularLatticeTerm2 n A
      0OL2 :
        OpBoundedModularLatticeTerm2 n A
      1OL2 :
        OpBoundedModularLatticeTerm2 n A
  
  module CancellativeCommutativeMonoid where
    record CancellativeCommutativeMonoid
      (A : Set) : Set where
      constructor CancellativeCommutativeMonoidC
      field
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        leftCancellative :
          (x : A) (y : A) (z : A) ->
          op z x == op z y -> x == y
        rightCancellative :
          (x : A) (y : A) (z : A) ->
          op x z == op y z -> x == y
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
    record CancellativeCommutativeMonoidSig
      (AS : Set) : Set where
      constructor CancellativeCommutativeMonoidSigSigC
      field
        eS : AS
        opS : AS -> AS -> AS
    record CancellativeCommutativeMonoidProd
      (AP : Set) : Set where
      constructor CancellativeCommutativeMonoidProdC
      field
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        leftCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP zP xP == opP zP yP ->
          xP == yP
        rightCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP xP zP == opP yP zP ->
          xP == yP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
    record CancellativeCommutativeMonoidHom
      (A1 : Set) (A2 : Set)
      (Ca1 : CancellativeCommutativeMonoid
         A1)
      (Ca2 : CancellativeCommutativeMonoid
         A2) : Set where
      constructor CancellativeCommutativeMonoidHomC
      field
        hom : A1 -> A2
        pres-e : hom (e Ca1) == e Ca2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ca1 x1 x2) ==
            op Ca2 (hom x1) (hom x2)
    record CancellativeCommutativeMonoidRelInterp
      (A1 : Set) (A2 : Set)
      (Ca1 : CancellativeCommutativeMonoid
         A1)
      (Ca2 : CancellativeCommutativeMonoid
         A2) : Set where
      constructor CancellativeCommutativeMonoidRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-e :
          interp (e Ca1) (e Ca2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ca1 x1 x2)
            (op Ca2 y1 y2)
    data CancellativeCommutativeMonoidTerm
      : Set where
      eL :
        CancellativeCommutativeMonoidTerm
      opL :
        CancellativeCommutativeMonoidTerm ->
        CancellativeCommutativeMonoidTerm ->
        CancellativeCommutativeMonoidTerm
    data ClCancellativeCommutativeMonoidTerm
      (A : Set) : Set where
      sing :
        A ->
        ClCancellativeCommutativeMonoidTerm
          A
      eCl :
        ClCancellativeCommutativeMonoidTerm
          A
      opCl :
        ClCancellativeCommutativeMonoidTerm
          A ->
        ClCancellativeCommutativeMonoidTerm
          A ->
        ClCancellativeCommutativeMonoidTerm
          A
    data OpCancellativeCommutativeMonoidTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpCancellativeCommutativeMonoidTerm
          n
      eOL :
        OpCancellativeCommutativeMonoidTerm
          n
      opOL :
        OpCancellativeCommutativeMonoidTerm
          n ->
        OpCancellativeCommutativeMonoidTerm
          n ->
        OpCancellativeCommutativeMonoidTerm
          n
    data OpCancellativeCommutativeMonoidTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpCancellativeCommutativeMonoidTerm2
          n
          A
      sing2 :
        A ->
        OpCancellativeCommutativeMonoidTerm2
          n
          A
      eOL2 :
        OpCancellativeCommutativeMonoidTerm2
          n
          A
      opOL2 :
        OpCancellativeCommutativeMonoidTerm2
          n
          A ->
        OpCancellativeCommutativeMonoidTerm2
          n
          A ->
        OpCancellativeCommutativeMonoidTerm2
          n
          A
  
  module CancellativeCommutativeSemigroup where
    record CancellativeCommutativeSemigroup
      (A : Set) : Set where
      constructor CancellativeCommutativeSemigroupC
      field
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
        leftCancellative :
          (x : A) (y : A) (z : A) ->
          op z x == op z y -> x == y
        rightCancellative :
          (x : A) (y : A) (z : A) ->
          op x z == op y z -> x == y
    record CancellativeCommutativeSemigroupSig
      (AS : Set) : Set where
      constructor CancellativeCommutativeSemigroupSigSigC
      field
        opS : AS -> AS -> AS
    record CancellativeCommutativeSemigroupProd
      (AP : Set) : Set where
      constructor CancellativeCommutativeSemigroupProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
        leftCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP zP xP == opP zP yP ->
          xP == yP
        rightCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP xP zP == opP yP zP ->
          xP == yP
    record CancellativeCommutativeSemigroupHom
      (A1 : Set) (A2 : Set)
      (Ca1 : CancellativeCommutativeSemigroup
         A1)
      (Ca2 : CancellativeCommutativeSemigroup
         A2) : Set where
      constructor CancellativeCommutativeSemigroupHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ca1 x1 x2) ==
            op Ca2 (hom x1) (hom x2)
    record CancellativeCommutativeSemigroupRelInterp
      (A1 : Set) (A2 : Set)
      (Ca1 : CancellativeCommutativeSemigroup
         A1)
      (Ca2 : CancellativeCommutativeSemigroup
         A2) : Set where
      constructor CancellativeCommutativeSemigroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ca1 x1 x2)
            (op Ca2 y1 y2)
    data CancellativeCommutativeSemigroupTerm
      : Set where
      opL :
        CancellativeCommutativeSemigroupTerm ->
        CancellativeCommutativeSemigroupTerm ->
        CancellativeCommutativeSemigroupTerm
    data ClCancellativeCommutativeSemigroupTerm
      (A : Set) : Set where
      sing :
        A ->
        ClCancellativeCommutativeSemigroupTerm
          A
      opCl :
        ClCancellativeCommutativeSemigroupTerm
          A ->
        ClCancellativeCommutativeSemigroupTerm
          A ->
        ClCancellativeCommutativeSemigroupTerm
          A
    data OpCancellativeCommutativeSemigroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpCancellativeCommutativeSemigroupTerm
          n
      opOL :
        OpCancellativeCommutativeSemigroupTerm
          n ->
        OpCancellativeCommutativeSemigroupTerm
          n ->
        OpCancellativeCommutativeSemigroupTerm
          n
    data OpCancellativeCommutativeSemigroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpCancellativeCommutativeSemigroupTerm2
          n
          A
      sing2 :
        A ->
        OpCancellativeCommutativeSemigroupTerm2
          n
          A
      opOL2 :
        OpCancellativeCommutativeSemigroupTerm2
          n
          A ->
        OpCancellativeCommutativeSemigroupTerm2
          n
          A ->
        OpCancellativeCommutativeSemigroupTerm2
          n
          A
  
  module CancellativeMagma where
    record CancellativeMagma
      (A : Set) : Set where
      constructor CancellativeMagmaC
      field
        op : A -> A -> A
        leftCancellative :
          (x : A) (y : A) (z : A) ->
          op z x == op z y -> x == y
        rightCancellative :
          (x : A) (y : A) (z : A) ->
          op x z == op y z -> x == y
    record CancellativeMagmaSig
      (AS : Set) : Set where
      constructor CancellativeMagmaSigSigC
      field
        opS : AS -> AS -> AS
    record CancellativeMagmaProd
      (AP : Set) : Set where
      constructor CancellativeMagmaProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP zP xP == opP zP yP ->
          xP == yP
        rightCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP xP zP == opP yP zP ->
          xP == yP
    record CancellativeMagmaHom
      (A1 : Set) (A2 : Set)
      (Ca1 : CancellativeMagma A1)
      (Ca2 : CancellativeMagma A2) :
      Set where
      constructor CancellativeMagmaHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ca1 x1 x2) ==
            op Ca2 (hom x1) (hom x2)
    record CancellativeMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Ca1 : CancellativeMagma A1)
      (Ca2 : CancellativeMagma A2) :
      Set where
      constructor CancellativeMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ca1 x1 x2)
            (op Ca2 y1 y2)
    data CancellativeMagmaTerm
      : Set where
      opL :
        CancellativeMagmaTerm ->
        CancellativeMagmaTerm ->
        CancellativeMagmaTerm
    data ClCancellativeMagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClCancellativeMagmaTerm A
      opCl :
        ClCancellativeMagmaTerm A ->
        ClCancellativeMagmaTerm A ->
        ClCancellativeMagmaTerm A
    data OpCancellativeMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpCancellativeMagmaTerm n
      opOL :
        OpCancellativeMagmaTerm n ->
        OpCancellativeMagmaTerm n ->
        OpCancellativeMagmaTerm n
    data OpCancellativeMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpCancellativeMagmaTerm2 n A
      sing2 :
        A ->
        OpCancellativeMagmaTerm2 n A
      opOL2 :
        OpCancellativeMagmaTerm2 n A ->
        OpCancellativeMagmaTerm2 n A ->
        OpCancellativeMagmaTerm2 n A
  
  module CancellativeMonoid where
    record CancellativeMonoid
      (A : Set) : Set where
      constructor CancellativeMonoidC
      field
        op : A -> A -> A
        e : A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        leftCancellative :
          (x : A) (y : A) (z : A) ->
          op z x == op z y -> x == y
        rightCancellative :
          (x : A) (y : A) (z : A) ->
          op x z == op y z -> x == y
    record CancellativeMonoidSig
      (AS : Set) : Set where
      constructor CancellativeMonoidSigSigC
      field
        opS : AS -> AS -> AS
        eS : AS
    record CancellativeMonoidProd
      (AP : Set) : Set where
      constructor CancellativeMonoidProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        leftCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP zP xP == opP zP yP ->
          xP == yP
        rightCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP xP zP == opP yP zP ->
          xP == yP
    record CancellativeMonoidHom
      (A1 : Set) (A2 : Set)
      (Ca1 : CancellativeMonoid A1)
      (Ca2 : CancellativeMonoid A2) :
      Set where
      constructor CancellativeMonoidHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ca1 x1 x2) ==
            op Ca2 (hom x1) (hom x2)
        pres-e : hom (e Ca1) == e Ca2
    record CancellativeMonoidRelInterp
      (A1 : Set) (A2 : Set)
      (Ca1 : CancellativeMonoid A1)
      (Ca2 : CancellativeMonoid A2) :
      Set where
      constructor CancellativeMonoidRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ca1 x1 x2)
            (op Ca2 y1 y2)
        interp-e :
          interp (e Ca1) (e Ca2)
    data CancellativeMonoidTerm
      : Set where
      opL :
        CancellativeMonoidTerm ->
        CancellativeMonoidTerm ->
        CancellativeMonoidTerm
      eL : CancellativeMonoidTerm
    data ClCancellativeMonoidTerm
      (A : Set) : Set where
      sing :
        A -> ClCancellativeMonoidTerm A
      opCl :
        ClCancellativeMonoidTerm A ->
        ClCancellativeMonoidTerm A ->
        ClCancellativeMonoidTerm A
      eCl : ClCancellativeMonoidTerm A
    data OpCancellativeMonoidTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpCancellativeMonoidTerm n
      opOL :
        OpCancellativeMonoidTerm n ->
        OpCancellativeMonoidTerm n ->
        OpCancellativeMonoidTerm n
      eOL : OpCancellativeMonoidTerm n
    data OpCancellativeMonoidTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpCancellativeMonoidTerm2 n A
      sing2 :
        A ->
        OpCancellativeMonoidTerm2 n A
      opOL2 :
        OpCancellativeMonoidTerm2 n A ->
        OpCancellativeMonoidTerm2 n A ->
        OpCancellativeMonoidTerm2 n A
      eOL2 :
        OpCancellativeMonoidTerm2 n A
  
  module CancellativeSemigroup where
    record CancellativeSemigroup
      (A : Set) : Set where
      constructor CancellativeSemigroupC
      field
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        leftCancellative :
          (x : A) (y : A) (z : A) ->
          op z x == op z y -> x == y
        rightCancellative :
          (x : A) (y : A) (z : A) ->
          op x z == op y z -> x == y
    record CancellativeSemigroupSig
      (AS : Set) : Set where
      constructor CancellativeSemigroupSigSigC
      field
        opS : AS -> AS -> AS
    record CancellativeSemigroupProd
      (AP : Set) : Set where
      constructor CancellativeSemigroupProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        leftCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP zP xP == opP zP yP ->
          xP == yP
        rightCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP xP zP == opP yP zP ->
          xP == yP
    record CancellativeSemigroupHom
      (A1 : Set) (A2 : Set)
      (Ca1 : CancellativeSemigroup A1)
      (Ca2 : CancellativeSemigroup
         A2) : Set where
      constructor CancellativeSemigroupHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ca1 x1 x2) ==
            op Ca2 (hom x1) (hom x2)
    record CancellativeSemigroupRelInterp
      (A1 : Set) (A2 : Set)
      (Ca1 : CancellativeSemigroup A1)
      (Ca2 : CancellativeSemigroup
         A2) : Set where
      constructor CancellativeSemigroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ca1 x1 x2)
            (op Ca2 y1 y2)
    data CancellativeSemigroupTerm
      : Set where
      opL :
        CancellativeSemigroupTerm ->
        CancellativeSemigroupTerm ->
        CancellativeSemigroupTerm
    data ClCancellativeSemigroupTerm
      (A : Set) : Set where
      sing :
        A ->
        ClCancellativeSemigroupTerm A
      opCl :
        ClCancellativeSemigroupTerm A ->
        ClCancellativeSemigroupTerm A ->
        ClCancellativeSemigroupTerm A
    data OpCancellativeSemigroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpCancellativeSemigroupTerm n
      opOL :
        OpCancellativeSemigroupTerm n ->
        OpCancellativeSemigroupTerm n ->
        OpCancellativeSemigroupTerm n
    data OpCancellativeSemigroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpCancellativeSemigroupTerm2 n A
      sing2 :
        A ->
        OpCancellativeSemigroupTerm2 n A
      opOL2 :
        OpCancellativeSemigroupTerm2 n
          A ->
        OpCancellativeSemigroupTerm2 n
          A ->
        OpCancellativeSemigroupTerm2 n A
  
  module Carrier where
    record Carrier
      (A : Set) : Set where
      constructor CarrierC
      field
        
    record CarrierSig
      (AS : Set) : Set where
      constructor CarrierSigSigC
      field
        
    record CarrierProd
      (AP : Set) : Set where
      constructor CarrierProdC
      field
        
    record CarrierHom
      (A1 : Set) (A2 : Set)
      (Ca1 : Carrier A1)
      (Ca2 : Carrier A2) : Set where
      constructor CarrierHomC
      field
        hom : A1 -> A2
    record CarrierRelInterp
      (A1 : Set) (A2 : Set)
      (Ca1 : Carrier A1)
      (Ca2 : Carrier A2) : Set where
      constructor CarrierRelInterpC
      field
        interp : A1 -> A2 -> Set
    data CarrierTerm : Set where
      
    data ClCarrierTerm
      (A : Set) : Set where
      sing : A -> ClCarrierTerm A
    data OpCarrierTerm
      (n : Nat) : Set where
      v : Fin n -> OpCarrierTerm n
    data OpCarrierTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpCarrierTerm2 n A
      sing2 : A -> OpCarrierTerm2 n A
  
  module CommutativeAdditiveMagma where
    record CommutativeAdditiveMagma
      (A : Set) : Set where
      constructor CommutativeAdditiveMagmaC
      field
        + : A -> A -> A
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
    record CommutativeAdditiveMagmaSig
      (AS : Set) : Set where
      constructor CommutativeAdditiveMagmaSigSigC
      field
        +S : AS -> AS -> AS
    record CommutativeAdditiveMagmaProd
      (AP : Set) : Set where
      constructor CommutativeAdditiveMagmaProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
    record CommutativeAdditiveMagmaHom
      (A1 : Set) (A2 : Set)
      (Co1 : CommutativeAdditiveMagma
         A1)
      (Co2 : CommutativeAdditiveMagma
         A2) : Set where
      constructor CommutativeAdditiveMagmaHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Co1 x1 x2) ==
            + Co2 (hom x1) (hom x2)
    record CommutativeAdditiveMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Co1 : CommutativeAdditiveMagma
         A1)
      (Co2 : CommutativeAdditiveMagma
         A2) : Set where
      constructor CommutativeAdditiveMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Co1 x1 x2)
            (+ Co2 y1 y2)
    data CommutativeAdditiveMagmaTerm
      : Set where
      +L :
        CommutativeAdditiveMagmaTerm ->
        CommutativeAdditiveMagmaTerm ->
        CommutativeAdditiveMagmaTerm
    data ClCommutativeAdditiveMagmaTerm
      (A : Set) : Set where
      sing :
        A ->
        ClCommutativeAdditiveMagmaTerm A
      +Cl :
        ClCommutativeAdditiveMagmaTerm
          A ->
        ClCommutativeAdditiveMagmaTerm
          A ->
        ClCommutativeAdditiveMagmaTerm A
    data OpCommutativeAdditiveMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpCommutativeAdditiveMagmaTerm n
      +OL :
        OpCommutativeAdditiveMagmaTerm
          n ->
        OpCommutativeAdditiveMagmaTerm
          n ->
        OpCommutativeAdditiveMagmaTerm n
    data OpCommutativeAdditiveMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpCommutativeAdditiveMagmaTerm2
          n
          A
      sing2 :
        A ->
        OpCommutativeAdditiveMagmaTerm2
          n
          A
      +OL2 :
        OpCommutativeAdditiveMagmaTerm2
          n
          A ->
        OpCommutativeAdditiveMagmaTerm2
          n
          A ->
        OpCommutativeAdditiveMagmaTerm2
          n
          A
  
  module CommutativeGroup where
    record CommutativeGroup
      (A : Set) : Set where
      constructor CommutativeGroupC
      field
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        inv : A -> A
        leftInverse_inv_op_e :
          (x : A) -> op x (inv x) == e
        rightInverse_inv_op_e :
          (x : A) -> op (inv x) x == e
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
    record CommutativeGroupSig
      (AS : Set) : Set where
      constructor CommutativeGroupSigSigC
      field
        eS : AS
        opS : AS -> AS -> AS
        invS : AS -> AS
    record CommutativeGroupProd
      (AP : Set) : Set where
      constructor CommutativeGroupProdC
      field
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        invP : Prod AP AP -> Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        leftInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP xP (invP xP) == eP
        rightInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP (invP xP) xP == eP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
    record CommutativeGroupHom
      (A1 : Set) (A2 : Set)
      (Co1 : CommutativeGroup A1)
      (Co2 : CommutativeGroup A2) :
      Set where
      constructor CommutativeGroupHomC
      field
        hom : A1 -> A2
        pres-e : hom (e Co1) == e Co2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Co1 x1 x2) ==
            op Co2 (hom x1) (hom x2)
        pres-inv :
          (x1 : A1) ->
          hom (inv Co1 x1) ==
            inv Co2 (hom x1)
    record CommutativeGroupRelInterp
      (A1 : Set) (A2 : Set)
      (Co1 : CommutativeGroup A1)
      (Co2 : CommutativeGroup A2) :
      Set where
      constructor CommutativeGroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-e :
          interp (e Co1) (e Co2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Co1 x1 x2)
            (op Co2 y1 y2)
        interp-inv :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (inv Co1 x1) (inv Co2 y1)
    data CommutativeGroupTerm
      : Set where
      eL : CommutativeGroupTerm
      opL :
        CommutativeGroupTerm ->
        CommutativeGroupTerm ->
        CommutativeGroupTerm
      invL :
        CommutativeGroupTerm ->
        CommutativeGroupTerm
    data ClCommutativeGroupTerm
      (A : Set) : Set where
      sing :
        A -> ClCommutativeGroupTerm A
      eCl : ClCommutativeGroupTerm A
      opCl :
        ClCommutativeGroupTerm A ->
        ClCommutativeGroupTerm A ->
        ClCommutativeGroupTerm A
      invCl :
        ClCommutativeGroupTerm A ->
        ClCommutativeGroupTerm A
    data OpCommutativeGroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpCommutativeGroupTerm n
      eOL : OpCommutativeGroupTerm n
      opOL :
        OpCommutativeGroupTerm n ->
        OpCommutativeGroupTerm n ->
        OpCommutativeGroupTerm n
      invOL :
        OpCommutativeGroupTerm n ->
        OpCommutativeGroupTerm n
    data OpCommutativeGroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpCommutativeGroupTerm2 n A
      sing2 :
        A -> OpCommutativeGroupTerm2 n A
      eOL2 :
        OpCommutativeGroupTerm2 n A
      opOL2 :
        OpCommutativeGroupTerm2 n A ->
        OpCommutativeGroupTerm2 n A ->
        OpCommutativeGroupTerm2 n A
      invOL2 :
        OpCommutativeGroupTerm2 n A ->
        OpCommutativeGroupTerm2 n A
  
  module CommutativeMagma where
    record CommutativeMagma
      (A : Set) : Set where
      constructor CommutativeMagmaC
      field
        op : A -> A -> A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
    record CommutativeMagmaSig
      (AS : Set) : Set where
      constructor CommutativeMagmaSigSigC
      field
        opS : AS -> AS -> AS
    record CommutativeMagmaProd
      (AP : Set) : Set where
      constructor CommutativeMagmaProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
    record CommutativeMagmaHom
      (A1 : Set) (A2 : Set)
      (Co1 : CommutativeMagma A1)
      (Co2 : CommutativeMagma A2) :
      Set where
      constructor CommutativeMagmaHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Co1 x1 x2) ==
            op Co2 (hom x1) (hom x2)
    record CommutativeMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Co1 : CommutativeMagma A1)
      (Co2 : CommutativeMagma A2) :
      Set where
      constructor CommutativeMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Co1 x1 x2)
            (op Co2 y1 y2)
    data CommutativeMagmaTerm
      : Set where
      opL :
        CommutativeMagmaTerm ->
        CommutativeMagmaTerm ->
        CommutativeMagmaTerm
    data ClCommutativeMagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClCommutativeMagmaTerm A
      opCl :
        ClCommutativeMagmaTerm A ->
        ClCommutativeMagmaTerm A ->
        ClCommutativeMagmaTerm A
    data OpCommutativeMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpCommutativeMagmaTerm n
      opOL :
        OpCommutativeMagmaTerm n ->
        OpCommutativeMagmaTerm n ->
        OpCommutativeMagmaTerm n
    data OpCommutativeMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpCommutativeMagmaTerm2 n A
      sing2 :
        A -> OpCommutativeMagmaTerm2 n A
      opOL2 :
        OpCommutativeMagmaTerm2 n A ->
        OpCommutativeMagmaTerm2 n A ->
        OpCommutativeMagmaTerm2 n A
  
  module CommutativeMonoid where
    record CommutativeMonoid
      (A : Set) : Set where
      constructor CommutativeMonoidC
      field
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        e : A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
    record CommutativeMonoidSig
      (AS : Set) : Set where
      constructor CommutativeMonoidSigSigC
      field
        opS : AS -> AS -> AS
        eS : AS
    record CommutativeMonoidProd
      (AP : Set) : Set where
      constructor CommutativeMonoidProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
    record CommutativeMonoidHom
      (A1 : Set) (A2 : Set)
      (Co1 : CommutativeMonoid A1)
      (Co2 : CommutativeMonoid A2) :
      Set where
      constructor CommutativeMonoidHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Co1 x1 x2) ==
            op Co2 (hom x1) (hom x2)
        pres-e : hom (e Co1) == e Co2
    record CommutativeMonoidRelInterp
      (A1 : Set) (A2 : Set)
      (Co1 : CommutativeMonoid A1)
      (Co2 : CommutativeMonoid A2) :
      Set where
      constructor CommutativeMonoidRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Co1 x1 x2)
            (op Co2 y1 y2)
        interp-e :
          interp (e Co1) (e Co2)
    data CommutativeMonoidTerm
      : Set where
      opL :
        CommutativeMonoidTerm ->
        CommutativeMonoidTerm ->
        CommutativeMonoidTerm
      eL : CommutativeMonoidTerm
    data ClCommutativeMonoidTerm
      (A : Set) : Set where
      sing :
        A -> ClCommutativeMonoidTerm A
      opCl :
        ClCommutativeMonoidTerm A ->
        ClCommutativeMonoidTerm A ->
        ClCommutativeMonoidTerm A
      eCl : ClCommutativeMonoidTerm A
    data OpCommutativeMonoidTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpCommutativeMonoidTerm n
      opOL :
        OpCommutativeMonoidTerm n ->
        OpCommutativeMonoidTerm n ->
        OpCommutativeMonoidTerm n
      eOL : OpCommutativeMonoidTerm n
    data OpCommutativeMonoidTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpCommutativeMonoidTerm2 n A
      sing2 :
        A ->
        OpCommutativeMonoidTerm2 n A
      opOL2 :
        OpCommutativeMonoidTerm2 n A ->
        OpCommutativeMonoidTerm2 n A ->
        OpCommutativeMonoidTerm2 n A
      eOL2 :
        OpCommutativeMonoidTerm2 n A
  
  module CommutativeMonoid1 where
    record CommutativeMonoid1
      (A : Set) : Set where
      constructor CommutativeMonoid1C
      field
        1 : A
        op : A -> A -> A
        lunit_1 : (x : A) -> op 1 x == x
        runit_1 : (x : A) -> op x 1 == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
    record CommutativeMonoid1Sig
      (AS : Set) : Set where
      constructor CommutativeMonoid1SigSigC
      field
        1S : AS
        opS : AS -> AS -> AS
    record CommutativeMonoid1Prod
      (AP : Set) : Set where
      constructor CommutativeMonoid1ProdC
      field
        1P : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_1P :
          (xP : Prod AP AP) ->
          opP 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          opP xP 1P == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
    record CommutativeMonoid1Hom
      (A1 : Set) (A2 : Set)
      (Co1 : CommutativeMonoid1 A1)
      (Co2 : CommutativeMonoid1 A2) :
      Set where
      constructor CommutativeMonoid1HomC
      field
        hom : A1 -> A2
        pres-1 : hom (1 Co1) == 1 Co2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Co1 x1 x2) ==
            op Co2 (hom x1) (hom x2)
    record CommutativeMonoid1RelInterp
      (A1 : Set) (A2 : Set)
      (Co1 : CommutativeMonoid1 A1)
      (Co2 : CommutativeMonoid1 A2) :
      Set where
      constructor CommutativeMonoid1RelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-1 :
          interp (1 Co1) (1 Co2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Co1 x1 x2)
            (op Co2 y1 y2)
    data CommutativeMonoid1LTerm
      : Set where
      1L : CommutativeMonoid1LTerm
      opL :
        CommutativeMonoid1LTerm ->
        CommutativeMonoid1LTerm ->
        CommutativeMonoid1LTerm
    data ClCommutativeMonoid1ClTerm
      (A : Set) : Set where
      sing :
        A ->
        ClCommutativeMonoid1ClTerm A
      1Cl :
        ClCommutativeMonoid1ClTerm A
      opCl :
        ClCommutativeMonoid1ClTerm A ->
        ClCommutativeMonoid1ClTerm A ->
        ClCommutativeMonoid1ClTerm A
    data OpCommutativeMonoid1OLTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpCommutativeMonoid1OLTerm n
      1OL :
        OpCommutativeMonoid1OLTerm n
      opOL :
        OpCommutativeMonoid1OLTerm n ->
        OpCommutativeMonoid1OLTerm n ->
        OpCommutativeMonoid1OLTerm n
    data OpCommutativeMonoid1OL2Term2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpCommutativeMonoid1OL2Term2 n A
      sing2 :
        A ->
        OpCommutativeMonoid1OL2Term2 n A
      1OL2 :
        OpCommutativeMonoid1OL2Term2 n A
      opOL2 :
        OpCommutativeMonoid1OL2Term2 n
          A ->
        OpCommutativeMonoid1OL2Term2 n
          A ->
        OpCommutativeMonoid1OL2Term2 n A
  
  module CommutativePointedMagma where
    record CommutativePointedMagma
      (A : Set) : Set where
      constructor CommutativePointedMagmaC
      field
        op : A -> A -> A
        e : A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
    record CommutativePointedMagmaSig
      (AS : Set) : Set where
      constructor CommutativePointedMagmaSigSigC
      field
        opS : AS -> AS -> AS
        eS : AS
    record CommutativePointedMagmaProd
      (AP : Set) : Set where
      constructor CommutativePointedMagmaProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
    record CommutativePointedMagmaHom
      (A1 : Set) (A2 : Set)
      (Co1 : CommutativePointedMagma
         A1)
      (Co2 : CommutativePointedMagma
         A2) : Set where
      constructor CommutativePointedMagmaHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Co1 x1 x2) ==
            op Co2 (hom x1) (hom x2)
        pres-e : hom (e Co1) == e Co2
    record CommutativePointedMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Co1 : CommutativePointedMagma
         A1)
      (Co2 : CommutativePointedMagma
         A2) : Set where
      constructor CommutativePointedMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Co1 x1 x2)
            (op Co2 y1 y2)
        interp-e :
          interp (e Co1) (e Co2)
    data CommutativePointedMagmaTerm
      : Set where
      opL :
        CommutativePointedMagmaTerm ->
        CommutativePointedMagmaTerm ->
        CommutativePointedMagmaTerm
      eL : CommutativePointedMagmaTerm
    data ClCommutativePointedMagmaTerm
      (A : Set) : Set where
      sing :
        A ->
        ClCommutativePointedMagmaTerm A
      opCl :
        ClCommutativePointedMagmaTerm
          A ->
        ClCommutativePointedMagmaTerm
          A ->
        ClCommutativePointedMagmaTerm A
      eCl :
        ClCommutativePointedMagmaTerm A
    data OpCommutativePointedMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpCommutativePointedMagmaTerm n
      opOL :
        OpCommutativePointedMagmaTerm
          n ->
        OpCommutativePointedMagmaTerm
          n ->
        OpCommutativePointedMagmaTerm n
      eOL :
        OpCommutativePointedMagmaTerm n
    data OpCommutativePointedMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpCommutativePointedMagmaTerm2 n
          A
      sing2 :
        A ->
        OpCommutativePointedMagmaTerm2 n
          A
      opOL2 :
        OpCommutativePointedMagmaTerm2 n
          A ->
        OpCommutativePointedMagmaTerm2 n
          A ->
        OpCommutativePointedMagmaTerm2 n
          A
      eOL2 :
        OpCommutativePointedMagmaTerm2 n
          A
  
  module CommutativeRing where
    record CommutativeRing
      (A : Set) : Set where
      constructor CommutativeRingC
      field
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        + : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
    record CommutativeRingSig
      (AS : Set) : Set where
      constructor CommutativeRingSigSigC
      field
        *S : AS -> AS -> AS
        1S : AS
        +S : AS -> AS -> AS
        0S : AS
        negS : AS -> AS
    record CommutativeRingProd
      (AP : Set) : Set where
      constructor CommutativeRingProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        negP : Prod AP AP -> Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        leftInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P xP (negP xP) == 0P
        rightInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P (negP xP) xP == 0P
        leftZero_op_0P :
          (xP : Prod AP AP) ->
          *P 0P xP == 0P
        rightZero_op_0P :
          (xP : Prod AP AP) ->
          *P xP 0P == 0P
    record CommutativeRingHom
      (A1 : Set) (A2 : Set)
      (Co1 : CommutativeRing A1)
      (Co2 : CommutativeRing A2) :
      Set where
      constructor CommutativeRingHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Co1 x1 x2) ==
            * Co2 (hom x1) (hom x2)
        pres-1 : hom (1 Co1) == 1 Co2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Co1 x1 x2) ==
            + Co2 (hom x1) (hom x2)
        pres-0 : hom (0 Co1) == 0 Co2
        pres-neg :
          (x1 : A1) ->
          hom (neg Co1 x1) ==
            neg Co2 (hom x1)
    record CommutativeRingRelInterp
      (A1 : Set) (A2 : Set)
      (Co1 : CommutativeRing A1)
      (Co2 : CommutativeRing A2) :
      Set where
      constructor CommutativeRingRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Co1 x1 x2)
            (* Co2 y1 y2)
        interp-1 :
          interp (1 Co1) (1 Co2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Co1 x1 x2)
            (+ Co2 y1 y2)
        interp-0 :
          interp (0 Co1) (0 Co2)
        interp-neg :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (neg Co1 x1) (neg Co2 y1)
    data CommutativeRingTerm
      : Set where
      *L :
        CommutativeRingTerm ->
        CommutativeRingTerm ->
        CommutativeRingTerm
      1L : CommutativeRingTerm
      +L :
        CommutativeRingTerm ->
        CommutativeRingTerm ->
        CommutativeRingTerm
      0L : CommutativeRingTerm
      negL :
        CommutativeRingTerm ->
        CommutativeRingTerm
    data ClCommutativeRingTerm
      (A : Set) : Set where
      sing :
        A -> ClCommutativeRingTerm A
      *Cl :
        ClCommutativeRingTerm A ->
        ClCommutativeRingTerm A ->
        ClCommutativeRingTerm A
      1Cl : ClCommutativeRingTerm A
      +Cl :
        ClCommutativeRingTerm A ->
        ClCommutativeRingTerm A ->
        ClCommutativeRingTerm A
      0Cl : ClCommutativeRingTerm A
      negCl :
        ClCommutativeRingTerm A ->
        ClCommutativeRingTerm A
    data OpCommutativeRingTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpCommutativeRingTerm n
      *OL :
        OpCommutativeRingTerm n ->
        OpCommutativeRingTerm n ->
        OpCommutativeRingTerm n
      1OL : OpCommutativeRingTerm n
      +OL :
        OpCommutativeRingTerm n ->
        OpCommutativeRingTerm n ->
        OpCommutativeRingTerm n
      0OL : OpCommutativeRingTerm n
      negOL :
        OpCommutativeRingTerm n ->
        OpCommutativeRingTerm n
    data OpCommutativeRingTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpCommutativeRingTerm2 n A
      sing2 :
        A -> OpCommutativeRingTerm2 n A
      *OL2 :
        OpCommutativeRingTerm2 n A ->
        OpCommutativeRingTerm2 n A ->
        OpCommutativeRingTerm2 n A
      1OL2 :
        OpCommutativeRingTerm2 n A
      +OL2 :
        OpCommutativeRingTerm2 n A ->
        OpCommutativeRingTerm2 n A ->
        OpCommutativeRingTerm2 n A
      0OL2 :
        OpCommutativeRingTerm2 n A
      negOL2 :
        OpCommutativeRingTerm2 n A ->
        OpCommutativeRingTerm2 n A
  
  module CommutativeSemigroup where
    record CommutativeSemigroup
      (A : Set) : Set where
      constructor CommutativeSemigroupC
      field
        op : A -> A -> A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
    record CommutativeSemigroupSig
      (AS : Set) : Set where
      constructor CommutativeSemigroupSigSigC
      field
        opS : AS -> AS -> AS
    record CommutativeSemigroupProd
      (AP : Set) : Set where
      constructor CommutativeSemigroupProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
    record CommutativeSemigroupHom
      (A1 : Set) (A2 : Set)
      (Co1 : CommutativeSemigroup A1)
      (Co2 : CommutativeSemigroup
         A2) : Set where
      constructor CommutativeSemigroupHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Co1 x1 x2) ==
            op Co2 (hom x1) (hom x2)
    record CommutativeSemigroupRelInterp
      (A1 : Set) (A2 : Set)
      (Co1 : CommutativeSemigroup A1)
      (Co2 : CommutativeSemigroup
         A2) : Set where
      constructor CommutativeSemigroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Co1 x1 x2)
            (op Co2 y1 y2)
    data CommutativeSemigroupTerm
      : Set where
      opL :
        CommutativeSemigroupTerm ->
        CommutativeSemigroupTerm ->
        CommutativeSemigroupTerm
    data ClCommutativeSemigroupTerm
      (A : Set) : Set where
      sing :
        A ->
        ClCommutativeSemigroupTerm A
      opCl :
        ClCommutativeSemigroupTerm A ->
        ClCommutativeSemigroupTerm A ->
        ClCommutativeSemigroupTerm A
    data OpCommutativeSemigroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpCommutativeSemigroupTerm n
      opOL :
        OpCommutativeSemigroupTerm n ->
        OpCommutativeSemigroupTerm n ->
        OpCommutativeSemigroupTerm n
    data OpCommutativeSemigroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpCommutativeSemigroupTerm2 n A
      sing2 :
        A ->
        OpCommutativeSemigroupTerm2 n A
      opOL2 :
        OpCommutativeSemigroupTerm2 n
          A ->
        OpCommutativeSemigroupTerm2 n
          A ->
        OpCommutativeSemigroupTerm2 n A
  
  module ComplementSig where
    record ComplementSig
      (A : Set) : Set where
      constructor ComplementSigC
      field
        compl : A -> A
    record ComplementSigSig
      (AS : Set) : Set where
      constructor ComplementSigSigSigC
      field
        complS : AS -> AS
    record ComplementSigProd
      (AP : Set) : Set where
      constructor ComplementSigProdC
      field
        complP :
          Prod AP AP -> Prod AP AP
    record ComplementSigHom
      (A1 : Set) (A2 : Set)
      (Co1 : ComplementSig A1)
      (Co2 : ComplementSig A2) :
      Set where
      constructor ComplementSigHomC
      field
        hom : A1 -> A2
        pres-compl :
          (x1 : A1) ->
          hom (compl Co1 x1) ==
            compl Co2 (hom x1)
    record ComplementSigRelInterp
      (A1 : Set) (A2 : Set)
      (Co1 : ComplementSig A1)
      (Co2 : ComplementSig A2) :
      Set where
      constructor ComplementSigRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-compl :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (compl Co1 x1)
            (compl Co2 y1)
    data ComplementSigTerm
      : Set where
      complL :
        ComplementSigTerm ->
        ComplementSigTerm
    data ClComplementSigTerm
      (A : Set) : Set where
      sing :
        A -> ClComplementSigTerm A
      complCl :
        ClComplementSigTerm A ->
        ClComplementSigTerm A
    data OpComplementSigTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpComplementSigTerm n
      complOL :
        OpComplementSigTerm n ->
        OpComplementSigTerm n
    data OpComplementSigTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpComplementSigTerm2 n A
      sing2 :
        A -> OpComplementSigTerm2 n A
      complOL2 :
        OpComplementSigTerm2 n A ->
        OpComplementSigTerm2 n A
  
  module DistributiveLattice where
    record DistributiveLattice
      (A : Set) : Set where
      constructor DistributiveLatticeC
      field
        * : A -> A -> A
        + : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        idempotent_* :
          (x : A) -> * x x == x
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        idempotent_+ :
          (x : A) -> + x x == x
        leftAbsorp_*_+ :
          (x : A) (y : A) ->
          * x (+ x y) == x
        leftAbsorp_+_* :
          (x : A) (y : A) ->
          + x (* x y) == x
        leftModular_*_+ :
          (x : A) (y : A) (z : A) ->
          + (* x y) (* x z) ==
            * x (+ y (* x z))
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
    record DistributiveLatticeSig
      (AS : Set) : Set where
      constructor DistributiveLatticeSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record DistributiveLatticeProd
      (AP : Set) : Set where
      constructor DistributiveLatticeProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
        leftAbsorp_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP (+P xP yP) == xP
        leftAbsorp_+_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP (*P xP yP) == xP
        leftModular_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (*P xP yP) (*P xP zP) ==
            *P xP (+P yP (*P xP zP))
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
    record DistributiveLatticeHom
      (A1 : Set) (A2 : Set)
      (Di1 : DistributiveLattice A1)
      (Di2 : DistributiveLattice A2) :
      Set where
      constructor DistributiveLatticeHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Di1 x1 x2) ==
            * Di2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Di1 x1 x2) ==
            + Di2 (hom x1) (hom x2)
    record DistributiveLatticeRelInterp
      (A1 : Set) (A2 : Set)
      (Di1 : DistributiveLattice A1)
      (Di2 : DistributiveLattice A2) :
      Set where
      constructor DistributiveLatticeRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Di1 x1 x2)
            (* Di2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Di1 x1 x2)
            (+ Di2 y1 y2)
    data DistributiveLatticeTerm
      : Set where
      *L :
        DistributiveLatticeTerm ->
        DistributiveLatticeTerm ->
        DistributiveLatticeTerm
      +L :
        DistributiveLatticeTerm ->
        DistributiveLatticeTerm ->
        DistributiveLatticeTerm
    data ClDistributiveLatticeTerm
      (A : Set) : Set where
      sing :
        A -> ClDistributiveLatticeTerm A
      *Cl :
        ClDistributiveLatticeTerm A ->
        ClDistributiveLatticeTerm A ->
        ClDistributiveLatticeTerm A
      +Cl :
        ClDistributiveLatticeTerm A ->
        ClDistributiveLatticeTerm A ->
        ClDistributiveLatticeTerm A
    data OpDistributiveLatticeTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpDistributiveLatticeTerm n
      *OL :
        OpDistributiveLatticeTerm n ->
        OpDistributiveLatticeTerm n ->
        OpDistributiveLatticeTerm n
      +OL :
        OpDistributiveLatticeTerm n ->
        OpDistributiveLatticeTerm n ->
        OpDistributiveLatticeTerm n
    data OpDistributiveLatticeTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpDistributiveLatticeTerm2 n A
      sing2 :
        A ->
        OpDistributiveLatticeTerm2 n A
      *OL2 :
        OpDistributiveLatticeTerm2 n
          A ->
        OpDistributiveLatticeTerm2 n
          A ->
        OpDistributiveLatticeTerm2 n A
      +OL2 :
        OpDistributiveLatticeTerm2 n
          A ->
        OpDistributiveLatticeTerm2 n
          A ->
        OpDistributiveLatticeTerm2 n A
  
  module DoubleMonoid where
    record DoubleMonoid
      (A : Set) : Set where
      constructor DoubleMonoidC
      field
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
    record DoubleMonoidSig
      (AS : Set) : Set where
      constructor DoubleMonoidSigSigC
      field
        +S : AS -> AS -> AS
        0S : AS
        *S : AS -> AS -> AS
        1S : AS
    record DoubleMonoidProd
      (AP : Set) : Set where
      constructor DoubleMonoidProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
    record DoubleMonoidHom
      (A1 : Set) (A2 : Set)
      (Do1 : DoubleMonoid A1)
      (Do2 : DoubleMonoid A2) :
      Set where
      constructor DoubleMonoidHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Do1 x1 x2) ==
            + Do2 (hom x1) (hom x2)
        pres-0 : hom (0 Do1) == 0 Do2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Do1 x1 x2) ==
            * Do2 (hom x1) (hom x2)
        pres-1 : hom (1 Do1) == 1 Do2
    record DoubleMonoidRelInterp
      (A1 : Set) (A2 : Set)
      (Do1 : DoubleMonoid A1)
      (Do2 : DoubleMonoid A2) :
      Set where
      constructor DoubleMonoidRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Do1 x1 x2)
            (+ Do2 y1 y2)
        interp-0 :
          interp (0 Do1) (0 Do2)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Do1 x1 x2)
            (* Do2 y1 y2)
        interp-1 :
          interp (1 Do1) (1 Do2)
    data DoubleMonoidTerm
      : Set where
      +L :
        DoubleMonoidTerm ->
        DoubleMonoidTerm ->
        DoubleMonoidTerm
      0L : DoubleMonoidTerm
      *L :
        DoubleMonoidTerm ->
        DoubleMonoidTerm ->
        DoubleMonoidTerm
      1L : DoubleMonoidTerm
    data ClDoubleMonoidTerm
      (A : Set) : Set where
      sing :
        A -> ClDoubleMonoidTerm A
      +Cl :
        ClDoubleMonoidTerm A ->
        ClDoubleMonoidTerm A ->
        ClDoubleMonoidTerm A
      0Cl : ClDoubleMonoidTerm A
      *Cl :
        ClDoubleMonoidTerm A ->
        ClDoubleMonoidTerm A ->
        ClDoubleMonoidTerm A
      1Cl : ClDoubleMonoidTerm A
    data OpDoubleMonoidTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpDoubleMonoidTerm n
      +OL :
        OpDoubleMonoidTerm n ->
        OpDoubleMonoidTerm n ->
        OpDoubleMonoidTerm n
      0OL : OpDoubleMonoidTerm n
      *OL :
        OpDoubleMonoidTerm n ->
        OpDoubleMonoidTerm n ->
        OpDoubleMonoidTerm n
      1OL : OpDoubleMonoidTerm n
    data OpDoubleMonoidTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpDoubleMonoidTerm2 n A
      sing2 :
        A -> OpDoubleMonoidTerm2 n A
      +OL2 :
        OpDoubleMonoidTerm2 n A ->
        OpDoubleMonoidTerm2 n A ->
        OpDoubleMonoidTerm2 n A
      0OL2 : OpDoubleMonoidTerm2 n A
      *OL2 :
        OpDoubleMonoidTerm2 n A ->
        OpDoubleMonoidTerm2 n A ->
        OpDoubleMonoidTerm2 n A
      1OL2 : OpDoubleMonoidTerm2 n A
  
  module DualDeMorgan where
    record DualDeMorgan
      (A : Set) : Set where
      constructor DualDeMorganC
      field
        * : A -> A -> A
        + : A -> A -> A
        prim : A -> A
        andDeMorgan_*_+_prim :
          (x : A) (y : A) (z : A) ->
          prim (* x y) ==
            + (prim x) (prim y)
        orDeMorgan_+_*_prim :
          (x : A) (y : A) (z : A) ->
          prim (+ x y) ==
            * (prim x) (prim y)
    record DualDeMorganSig
      (AS : Set) : Set where
      constructor DualDeMorganSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        primS : AS -> AS
    record DualDeMorganProd
      (AP : Set) : Set where
      constructor DualDeMorganProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        andDeMorgan_*_+_primP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          primP (*P xP yP) ==
            +P (primP xP) (primP yP)
        orDeMorgan_+_*_primP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          primP (+P xP yP) ==
            *P (primP xP) (primP yP)
    record DualDeMorganHom
      (A1 : Set) (A2 : Set)
      (Du1 : DualDeMorgan A1)
      (Du2 : DualDeMorgan A2) :
      Set where
      constructor DualDeMorganHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Du1 x1 x2) ==
            * Du2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Du1 x1 x2) ==
            + Du2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A1) ->
          hom (prim Du1 x1) ==
            prim Du2 (hom x1)
    record DualDeMorganRelInterp
      (A1 : Set) (A2 : Set)
      (Du1 : DualDeMorgan A1)
      (Du2 : DualDeMorgan A2) :
      Set where
      constructor DualDeMorganRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Du1 x1 x2)
            (* Du2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Du1 x1 x2)
            (+ Du2 y1 y2)
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim Du1 x1)
            (prim Du2 y1)
    data DualDeMorganTerm
      : Set where
      *L :
        DualDeMorganTerm ->
        DualDeMorganTerm ->
        DualDeMorganTerm
      +L :
        DualDeMorganTerm ->
        DualDeMorganTerm ->
        DualDeMorganTerm
      primL :
        DualDeMorganTerm ->
        DualDeMorganTerm
    data ClDualDeMorganTerm
      (A : Set) : Set where
      sing :
        A -> ClDualDeMorganTerm A
      *Cl :
        ClDualDeMorganTerm A ->
        ClDualDeMorganTerm A ->
        ClDualDeMorganTerm A
      +Cl :
        ClDualDeMorganTerm A ->
        ClDualDeMorganTerm A ->
        ClDualDeMorganTerm A
      primCl :
        ClDualDeMorganTerm A ->
        ClDualDeMorganTerm A
    data OpDualDeMorganTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpDualDeMorganTerm n
      *OL :
        OpDualDeMorganTerm n ->
        OpDualDeMorganTerm n ->
        OpDualDeMorganTerm n
      +OL :
        OpDualDeMorganTerm n ->
        OpDualDeMorganTerm n ->
        OpDualDeMorganTerm n
      primOL :
        OpDualDeMorganTerm n ->
        OpDualDeMorganTerm n
    data OpDualDeMorganTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpDualDeMorganTerm2 n A
      sing2 :
        A -> OpDualDeMorganTerm2 n A
      *OL2 :
        OpDualDeMorganTerm2 n A ->
        OpDualDeMorganTerm2 n A ->
        OpDualDeMorganTerm2 n A
      +OL2 :
        OpDualDeMorganTerm2 n A ->
        OpDualDeMorganTerm2 n A ->
        OpDualDeMorganTerm2 n A
      primOL2 :
        OpDualDeMorganTerm2 n A ->
        OpDualDeMorganTerm2 n A
  
  module DualSemilattices where
    record DualSemilattices
      (A : Set) : Set where
      constructor DualSemilatticesC
      field
        * : A -> A -> A
        + : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        idempotent_* :
          (x : A) -> * x x == x
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        idempotent_+ :
          (x : A) -> + x x == x
    record DualSemilatticesSig
      (AS : Set) : Set where
      constructor DualSemilatticesSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record DualSemilatticesProd
      (AP : Set) : Set where
      constructor DualSemilatticesProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
    record DualSemilatticesHom
      (A1 : Set) (A2 : Set)
      (Du1 : DualSemilattices A1)
      (Du2 : DualSemilattices A2) :
      Set where
      constructor DualSemilatticesHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Du1 x1 x2) ==
            * Du2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Du1 x1 x2) ==
            + Du2 (hom x1) (hom x2)
    record DualSemilatticesRelInterp
      (A1 : Set) (A2 : Set)
      (Du1 : DualSemilattices A1)
      (Du2 : DualSemilattices A2) :
      Set where
      constructor DualSemilatticesRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Du1 x1 x2)
            (* Du2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Du1 x1 x2)
            (+ Du2 y1 y2)
    data DualSemilatticesTerm
      : Set where
      *L :
        DualSemilatticesTerm ->
        DualSemilatticesTerm ->
        DualSemilatticesTerm
      +L :
        DualSemilatticesTerm ->
        DualSemilatticesTerm ->
        DualSemilatticesTerm
    data ClDualSemilatticesTerm
      (A : Set) : Set where
      sing :
        A -> ClDualSemilatticesTerm A
      *Cl :
        ClDualSemilatticesTerm A ->
        ClDualSemilatticesTerm A ->
        ClDualSemilatticesTerm A
      +Cl :
        ClDualSemilatticesTerm A ->
        ClDualSemilatticesTerm A ->
        ClDualSemilatticesTerm A
    data OpDualSemilatticesTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpDualSemilatticesTerm n
      *OL :
        OpDualSemilatticesTerm n ->
        OpDualSemilatticesTerm n ->
        OpDualSemilatticesTerm n
      +OL :
        OpDualSemilatticesTerm n ->
        OpDualSemilatticesTerm n ->
        OpDualSemilatticesTerm n
    data OpDualSemilatticesTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpDualSemilatticesTerm2 n A
      sing2 :
        A -> OpDualSemilatticesTerm2 n A
      *OL2 :
        OpDualSemilatticesTerm2 n A ->
        OpDualSemilatticesTerm2 n A ->
        OpDualSemilatticesTerm2 n A
      +OL2 :
        OpDualSemilatticesTerm2 n A ->
        OpDualSemilatticesTerm2 n A ->
        OpDualSemilatticesTerm2 n A
  
  module Empty where
    record Empty : Set where
      constructor EmptyC
      field
        
  
  module FixedPoint where
    record FixedPoint
      (A : Set) : Set where
      constructor FixedPointC
      field
        prim : A -> A
        e : A
        fixes_prim_e : prim e == e
    record FixedPointSig
      (AS : Set) : Set where
      constructor FixedPointSigSigC
      field
        primS : AS -> AS
        eS : AS
    record FixedPointProd
      (AP : Set) : Set where
      constructor FixedPointProdC
      field
        primP : Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        fixes_prim_eP : primP eP == eP
    record FixedPointHom
      (A1 : Set) (A2 : Set)
      (Fi1 : FixedPoint A1)
      (Fi2 : FixedPoint A2) :
      Set where
      constructor FixedPointHomC
      field
        hom : A1 -> A2
        pres-prim :
          (x1 : A1) ->
          hom (prim Fi1 x1) ==
            prim Fi2 (hom x1)
        pres-e : hom (e Fi1) == e Fi2
    record FixedPointRelInterp
      (A1 : Set) (A2 : Set)
      (Fi1 : FixedPoint A1)
      (Fi2 : FixedPoint A2) :
      Set where
      constructor FixedPointRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim Fi1 x1)
            (prim Fi2 y1)
        interp-e :
          interp (e Fi1) (e Fi2)
    data FixedPointTerm : Set where
      primL :
        FixedPointTerm -> FixedPointTerm
      eL : FixedPointTerm
    data ClFixedPointTerm
      (A : Set) : Set where
      sing : A -> ClFixedPointTerm A
      primCl :
        ClFixedPointTerm A ->
        ClFixedPointTerm A
      eCl : ClFixedPointTerm A
    data OpFixedPointTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpFixedPointTerm n
      primOL :
        OpFixedPointTerm n ->
        OpFixedPointTerm n
      eOL : OpFixedPointTerm n
    data OpFixedPointTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpFixedPointTerm2 n A
      sing2 :
        A -> OpFixedPointTerm2 n A
      primOL2 :
        OpFixedPointTerm2 n A ->
        OpFixedPointTerm2 n A
      eOL2 : OpFixedPointTerm2 n A
  
  module Group where
    record Group
      (A : Set) : Set where
      constructor GroupC
      field
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        inv : A -> A
        leftInverse_inv_op_e :
          (x : A) -> op x (inv x) == e
        rightInverse_inv_op_e :
          (x : A) -> op (inv x) x == e
    record GroupSig
      (AS : Set) : Set where
      constructor GroupSigSigC
      field
        eS : AS
        opS : AS -> AS -> AS
        invS : AS -> AS
    record GroupProd
      (AP : Set) : Set where
      constructor GroupProdC
      field
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        invP : Prod AP AP -> Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        leftInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP xP (invP xP) == eP
        rightInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP (invP xP) xP == eP
    record GroupHom
      (A1 : Set) (A2 : Set)
      (Gr1 : Group A1)
      (Gr2 : Group A2) : Set where
      constructor GroupHomC
      field
        hom : A1 -> A2
        pres-e : hom (e Gr1) == e Gr2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Gr1 x1 x2) ==
            op Gr2 (hom x1) (hom x2)
        pres-inv :
          (x1 : A1) ->
          hom (inv Gr1 x1) ==
            inv Gr2 (hom x1)
    record GroupRelInterp
      (A1 : Set) (A2 : Set)
      (Gr1 : Group A1)
      (Gr2 : Group A2) : Set where
      constructor GroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-e :
          interp (e Gr1) (e Gr2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Gr1 x1 x2)
            (op Gr2 y1 y2)
        interp-inv :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (inv Gr1 x1) (inv Gr2 y1)
    data GroupTerm : Set where
      eL : GroupTerm
      opL :
        GroupTerm ->
        GroupTerm -> GroupTerm
      invL : GroupTerm -> GroupTerm
    data ClGroupTerm
      (A : Set) : Set where
      sing : A -> ClGroupTerm A
      eCl : ClGroupTerm A
      opCl :
        ClGroupTerm A ->
        ClGroupTerm A -> ClGroupTerm A
      invCl :
        ClGroupTerm A -> ClGroupTerm A
    data OpGroupTerm
      (n : Nat) : Set where
      v : Fin n -> OpGroupTerm n
      eOL : OpGroupTerm n
      opOL :
        OpGroupTerm n ->
        OpGroupTerm n -> OpGroupTerm n
      invOL :
        OpGroupTerm n -> OpGroupTerm n
    data OpGroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 : Fin n -> OpGroupTerm2 n A
      sing2 : A -> OpGroupTerm2 n A
      eOL2 : OpGroupTerm2 n A
      opOL2 :
        OpGroupTerm2 n A ->
        OpGroupTerm2 n A ->
        OpGroupTerm2 n A
      invOL2 :
        OpGroupTerm2 n A ->
        OpGroupTerm2 n A
  
  module Group1 where
    record Group1
      (A : Set) : Set where
      constructor Group1C
      field
        1 : A
        op : A -> A -> A
        lunit_1 : (x : A) -> op 1 x == x
        runit_1 : (x : A) -> op x 1 == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        inv : A -> A
        leftInverse_inv_op_1 :
          (x : A) -> op x (inv x) == 1
        rightInverse_inv_op_1 :
          (x : A) -> op (inv x) x == 1
    record Group1Sig
      (AS : Set) : Set where
      constructor Group1SigSigC
      field
        1S : AS
        opS : AS -> AS -> AS
        invS : AS -> AS
    record Group1Prod
      (AP : Set) : Set where
      constructor Group1ProdC
      field
        1P : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        invP : Prod AP AP -> Prod AP AP
        lunit_1P :
          (xP : Prod AP AP) ->
          opP 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          opP xP 1P == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        leftInverse_inv_op_1P :
          (xP : Prod AP AP) ->
          opP xP (invP xP) == 1P
        rightInverse_inv_op_1P :
          (xP : Prod AP AP) ->
          opP (invP xP) xP == 1P
    record Group1Hom
      (A1 : Set) (A2 : Set)
      (Gr1 : Group1 A1)
      (Gr2 : Group1 A2) : Set where
      constructor Group1HomC
      field
        hom : A1 -> A2
        pres-1 : hom (1 Gr1) == 1 Gr2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Gr1 x1 x2) ==
            op Gr2 (hom x1) (hom x2)
        pres-inv :
          (x1 : A1) ->
          hom (inv Gr1 x1) ==
            inv Gr2 (hom x1)
    record Group1RelInterp
      (A1 : Set) (A2 : Set)
      (Gr1 : Group1 A1)
      (Gr2 : Group1 A2) : Set where
      constructor Group1RelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-1 :
          interp (1 Gr1) (1 Gr2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Gr1 x1 x2)
            (op Gr2 y1 y2)
        interp-inv :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (inv Gr1 x1) (inv Gr2 y1)
    data Group1LTerm : Set where
      1L : Group1LTerm
      opL :
        Group1LTerm ->
        Group1LTerm -> Group1LTerm
      invL :
        Group1LTerm -> Group1LTerm
    data ClGroup1ClTerm
      (A : Set) : Set where
      sing : A -> ClGroup1ClTerm A
      1Cl : ClGroup1ClTerm A
      opCl :
        ClGroup1ClTerm A ->
        ClGroup1ClTerm A ->
        ClGroup1ClTerm A
      invCl :
        ClGroup1ClTerm A ->
        ClGroup1ClTerm A
    data OpGroup1OLTerm
      (n : Nat) : Set where
      v : Fin n -> OpGroup1OLTerm n
      1OL : OpGroup1OLTerm n
      opOL :
        OpGroup1OLTerm n ->
        OpGroup1OLTerm n ->
        OpGroup1OLTerm n
      invOL :
        OpGroup1OLTerm n ->
        OpGroup1OLTerm n
    data OpGroup1OL2Term2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpGroup1OL2Term2 n A
      sing2 :
        A -> OpGroup1OL2Term2 n A
      1OL2 : OpGroup1OL2Term2 n A
      opOL2 :
        OpGroup1OL2Term2 n A ->
        OpGroup1OL2Term2 n A ->
        OpGroup1OL2Term2 n A
      invOL2 :
        OpGroup1OL2Term2 n A ->
        OpGroup1OL2Term2 n A
  
  module IdempotentAdditiveMagma where
    record IdempotentAdditiveMagma
      (A : Set) : Set where
      constructor IdempotentAdditiveMagmaC
      field
        + : A -> A -> A
        idempotent_+ :
          (x : A) -> + x x == x
    record IdempotentAdditiveMagmaSig
      (AS : Set) : Set where
      constructor IdempotentAdditiveMagmaSigSigC
      field
        +S : AS -> AS -> AS
    record IdempotentAdditiveMagmaProd
      (AP : Set) : Set where
      constructor IdempotentAdditiveMagmaProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
    record IdempotentAdditiveMagmaHom
      (A1 : Set) (A2 : Set)
      (Id1 : IdempotentAdditiveMagma
         A1)
      (Id2 : IdempotentAdditiveMagma
         A2) : Set where
      constructor IdempotentAdditiveMagmaHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Id1 x1 x2) ==
            + Id2 (hom x1) (hom x2)
    record IdempotentAdditiveMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Id1 : IdempotentAdditiveMagma
         A1)
      (Id2 : IdempotentAdditiveMagma
         A2) : Set where
      constructor IdempotentAdditiveMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Id1 x1 x2)
            (+ Id2 y1 y2)
    data IdempotentAdditiveMagmaTerm
      : Set where
      +L :
        IdempotentAdditiveMagmaTerm ->
        IdempotentAdditiveMagmaTerm ->
        IdempotentAdditiveMagmaTerm
    data ClIdempotentAdditiveMagmaTerm
      (A : Set) : Set where
      sing :
        A ->
        ClIdempotentAdditiveMagmaTerm A
      +Cl :
        ClIdempotentAdditiveMagmaTerm
          A ->
        ClIdempotentAdditiveMagmaTerm
          A ->
        ClIdempotentAdditiveMagmaTerm A
    data OpIdempotentAdditiveMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpIdempotentAdditiveMagmaTerm n
      +OL :
        OpIdempotentAdditiveMagmaTerm
          n ->
        OpIdempotentAdditiveMagmaTerm
          n ->
        OpIdempotentAdditiveMagmaTerm n
    data OpIdempotentAdditiveMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpIdempotentAdditiveMagmaTerm2 n
          A
      sing2 :
        A ->
        OpIdempotentAdditiveMagmaTerm2 n
          A
      +OL2 :
        OpIdempotentAdditiveMagmaTerm2 n
          A ->
        OpIdempotentAdditiveMagmaTerm2 n
          A ->
        OpIdempotentAdditiveMagmaTerm2 n
          A
  
  module IdempotentMagma where
    record IdempotentMagma
      (A : Set) : Set where
      constructor IdempotentMagmaC
      field
        op : A -> A -> A
        idempotent_op :
          (x : A) -> op x x == x
    record IdempotentMagmaSig
      (AS : Set) : Set where
      constructor IdempotentMagmaSigSigC
      field
        opS : AS -> AS -> AS
    record IdempotentMagmaProd
      (AP : Set) : Set where
      constructor IdempotentMagmaProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        idempotent_opP :
          (xP : Prod AP AP) ->
          opP xP xP == xP
    record IdempotentMagmaHom
      (A1 : Set) (A2 : Set)
      (Id1 : IdempotentMagma A1)
      (Id2 : IdempotentMagma A2) :
      Set where
      constructor IdempotentMagmaHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Id1 x1 x2) ==
            op Id2 (hom x1) (hom x2)
    record IdempotentMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Id1 : IdempotentMagma A1)
      (Id2 : IdempotentMagma A2) :
      Set where
      constructor IdempotentMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Id1 x1 x2)
            (op Id2 y1 y2)
    data IdempotentMagmaTerm
      : Set where
      opL :
        IdempotentMagmaTerm ->
        IdempotentMagmaTerm ->
        IdempotentMagmaTerm
    data ClIdempotentMagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClIdempotentMagmaTerm A
      opCl :
        ClIdempotentMagmaTerm A ->
        ClIdempotentMagmaTerm A ->
        ClIdempotentMagmaTerm A
    data OpIdempotentMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpIdempotentMagmaTerm n
      opOL :
        OpIdempotentMagmaTerm n ->
        OpIdempotentMagmaTerm n ->
        OpIdempotentMagmaTerm n
    data OpIdempotentMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpIdempotentMagmaTerm2 n A
      sing2 :
        A -> OpIdempotentMagmaTerm2 n A
      opOL2 :
        OpIdempotentMagmaTerm2 n A ->
        OpIdempotentMagmaTerm2 n A ->
        OpIdempotentMagmaTerm2 n A
  
  module IdempotentMultMagma where
    record IdempotentMultMagma
      (A : Set) : Set where
      constructor IdempotentMultMagmaC
      field
        * : A -> A -> A
        idempotent_* :
          (x : A) -> * x x == x
    record IdempotentMultMagmaSig
      (AS : Set) : Set where
      constructor IdempotentMultMagmaSigSigC
      field
        *S : AS -> AS -> AS
    record IdempotentMultMagmaProd
      (AP : Set) : Set where
      constructor IdempotentMultMagmaProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
    record IdempotentMultMagmaHom
      (A1 : Set) (A2 : Set)
      (Id1 : IdempotentMultMagma A1)
      (Id2 : IdempotentMultMagma A2) :
      Set where
      constructor IdempotentMultMagmaHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Id1 x1 x2) ==
            * Id2 (hom x1) (hom x2)
    record IdempotentMultMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Id1 : IdempotentMultMagma A1)
      (Id2 : IdempotentMultMagma A2) :
      Set where
      constructor IdempotentMultMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Id1 x1 x2)
            (* Id2 y1 y2)
    data IdempotentMultMagmaTerm
      : Set where
      *L :
        IdempotentMultMagmaTerm ->
        IdempotentMultMagmaTerm ->
        IdempotentMultMagmaTerm
    data ClIdempotentMultMagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClIdempotentMultMagmaTerm A
      *Cl :
        ClIdempotentMultMagmaTerm A ->
        ClIdempotentMultMagmaTerm A ->
        ClIdempotentMultMagmaTerm A
    data OpIdempotentMultMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpIdempotentMultMagmaTerm n
      *OL :
        OpIdempotentMultMagmaTerm n ->
        OpIdempotentMultMagmaTerm n ->
        OpIdempotentMultMagmaTerm n
    data OpIdempotentMultMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpIdempotentMultMagmaTerm2 n A
      sing2 :
        A ->
        OpIdempotentMultMagmaTerm2 n A
      *OL2 :
        OpIdempotentMultMagmaTerm2 n
          A ->
        OpIdempotentMultMagmaTerm2 n
          A ->
        OpIdempotentMultMagmaTerm2 n A
  
  module IdempotentSemiRng where
    record IdempotentSemiRng
      (A : Set) : Set where
      constructor IdempotentSemiRngC
      field
        + : A -> A -> A
        * : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        idempotent_+ :
          (x : A) -> + x x == x
    record IdempotentSemiRngSig
      (AS : Set) : Set where
      constructor IdempotentSemiRngSigSigC
      field
        +S : AS -> AS -> AS
        *S : AS -> AS -> AS
        0S : AS
    record IdempotentSemiRngProd
      (AP : Set) : Set where
      constructor IdempotentSemiRngProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
    record IdempotentSemiRngHom
      (A1 : Set) (A2 : Set)
      (Id1 : IdempotentSemiRng A1)
      (Id2 : IdempotentSemiRng A2) :
      Set where
      constructor IdempotentSemiRngHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Id1 x1 x2) ==
            + Id2 (hom x1) (hom x2)
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Id1 x1 x2) ==
            * Id2 (hom x1) (hom x2)
        pres-0 : hom (0 Id1) == 0 Id2
    record IdempotentSemiRngRelInterp
      (A1 : Set) (A2 : Set)
      (Id1 : IdempotentSemiRng A1)
      (Id2 : IdempotentSemiRng A2) :
      Set where
      constructor IdempotentSemiRngRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Id1 x1 x2)
            (+ Id2 y1 y2)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Id1 x1 x2)
            (* Id2 y1 y2)
        interp-0 :
          interp (0 Id1) (0 Id2)
    data IdempotentSemiRngTerm
      : Set where
      +L :
        IdempotentSemiRngTerm ->
        IdempotentSemiRngTerm ->
        IdempotentSemiRngTerm
      *L :
        IdempotentSemiRngTerm ->
        IdempotentSemiRngTerm ->
        IdempotentSemiRngTerm
      0L : IdempotentSemiRngTerm
    data ClIdempotentSemiRngTerm
      (A : Set) : Set where
      sing :
        A -> ClIdempotentSemiRngTerm A
      +Cl :
        ClIdempotentSemiRngTerm A ->
        ClIdempotentSemiRngTerm A ->
        ClIdempotentSemiRngTerm A
      *Cl :
        ClIdempotentSemiRngTerm A ->
        ClIdempotentSemiRngTerm A ->
        ClIdempotentSemiRngTerm A
      0Cl : ClIdempotentSemiRngTerm A
    data OpIdempotentSemiRngTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpIdempotentSemiRngTerm n
      +OL :
        OpIdempotentSemiRngTerm n ->
        OpIdempotentSemiRngTerm n ->
        OpIdempotentSemiRngTerm n
      *OL :
        OpIdempotentSemiRngTerm n ->
        OpIdempotentSemiRngTerm n ->
        OpIdempotentSemiRngTerm n
      0OL : OpIdempotentSemiRngTerm n
    data OpIdempotentSemiRngTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpIdempotentSemiRngTerm2 n A
      sing2 :
        A ->
        OpIdempotentSemiRngTerm2 n A
      +OL2 :
        OpIdempotentSemiRngTerm2 n A ->
        OpIdempotentSemiRngTerm2 n A ->
        OpIdempotentSemiRngTerm2 n A
      *OL2 :
        OpIdempotentSemiRngTerm2 n A ->
        OpIdempotentSemiRngTerm2 n A ->
        OpIdempotentSemiRngTerm2 n A
      0OL2 :
        OpIdempotentSemiRngTerm2 n A
  
  module IdempotentSemiring where
    record IdempotentSemiring
      (A : Set) : Set where
      constructor IdempotentSemiringC
      field
        + : A -> A -> A
        0 : A
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
        idempotent_+ :
          (x : A) -> + x x == x
    record IdempotentSemiringSig
      (AS : Set) : Set where
      constructor IdempotentSemiringSigSigC
      field
        +S : AS -> AS -> AS
        0S : AS
        *S : AS -> AS -> AS
        1S : AS
    record IdempotentSemiringProd
      (AP : Set) : Set where
      constructor IdempotentSemiringProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        leftZero_op_0P :
          (xP : Prod AP AP) ->
          *P 0P xP == 0P
        rightZero_op_0P :
          (xP : Prod AP AP) ->
          *P xP 0P == 0P
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
    record IdempotentSemiringHom
      (A1 : Set) (A2 : Set)
      (Id1 : IdempotentSemiring A1)
      (Id2 : IdempotentSemiring A2) :
      Set where
      constructor IdempotentSemiringHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Id1 x1 x2) ==
            + Id2 (hom x1) (hom x2)
        pres-0 : hom (0 Id1) == 0 Id2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Id1 x1 x2) ==
            * Id2 (hom x1) (hom x2)
        pres-1 : hom (1 Id1) == 1 Id2
    record IdempotentSemiringRelInterp
      (A1 : Set) (A2 : Set)
      (Id1 : IdempotentSemiring A1)
      (Id2 : IdempotentSemiring A2) :
      Set where
      constructor IdempotentSemiringRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Id1 x1 x2)
            (+ Id2 y1 y2)
        interp-0 :
          interp (0 Id1) (0 Id2)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Id1 x1 x2)
            (* Id2 y1 y2)
        interp-1 :
          interp (1 Id1) (1 Id2)
    data IdempotentSemiringTerm
      : Set where
      +L :
        IdempotentSemiringTerm ->
        IdempotentSemiringTerm ->
        IdempotentSemiringTerm
      0L : IdempotentSemiringTerm
      *L :
        IdempotentSemiringTerm ->
        IdempotentSemiringTerm ->
        IdempotentSemiringTerm
      1L : IdempotentSemiringTerm
    data ClIdempotentSemiringTerm
      (A : Set) : Set where
      sing :
        A -> ClIdempotentSemiringTerm A
      +Cl :
        ClIdempotentSemiringTerm A ->
        ClIdempotentSemiringTerm A ->
        ClIdempotentSemiringTerm A
      0Cl : ClIdempotentSemiringTerm A
      *Cl :
        ClIdempotentSemiringTerm A ->
        ClIdempotentSemiringTerm A ->
        ClIdempotentSemiringTerm A
      1Cl : ClIdempotentSemiringTerm A
    data OpIdempotentSemiringTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpIdempotentSemiringTerm n
      +OL :
        OpIdempotentSemiringTerm n ->
        OpIdempotentSemiringTerm n ->
        OpIdempotentSemiringTerm n
      0OL : OpIdempotentSemiringTerm n
      *OL :
        OpIdempotentSemiringTerm n ->
        OpIdempotentSemiringTerm n ->
        OpIdempotentSemiringTerm n
      1OL : OpIdempotentSemiringTerm n
    data OpIdempotentSemiringTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpIdempotentSemiringTerm2 n A
      sing2 :
        A ->
        OpIdempotentSemiringTerm2 n A
      +OL2 :
        OpIdempotentSemiringTerm2 n A ->
        OpIdempotentSemiringTerm2 n A ->
        OpIdempotentSemiringTerm2 n A
      0OL2 :
        OpIdempotentSemiringTerm2 n A
      *OL2 :
        OpIdempotentSemiringTerm2 n A ->
        OpIdempotentSemiringTerm2 n A ->
        OpIdempotentSemiringTerm2 n A
      1OL2 :
        OpIdempotentSemiringTerm2 n A
  
  module IdempotentUnary where
    record IdempotentUnary
      (A : Set) : Set where
      constructor IdempotentUnaryC
      field
        prim : A -> A
        idempotent_prim :
          (x : A) ->
          prim (prim x) == prim x
    record IdempotentUnarySig
      (AS : Set) : Set where
      constructor IdempotentUnarySigSigC
      field
        primS : AS -> AS
    record IdempotentUnaryProd
      (AP : Set) : Set where
      constructor IdempotentUnaryProdC
      field
        primP : Prod AP AP -> Prod AP AP
        idempotent_primP :
          (xP : Prod AP AP) ->
          primP (primP xP) == primP xP
    record IdempotentUnaryHom
      (A1 : Set) (A2 : Set)
      (Id1 : IdempotentUnary A1)
      (Id2 : IdempotentUnary A2) :
      Set where
      constructor IdempotentUnaryHomC
      field
        hom : A1 -> A2
        pres-prim :
          (x1 : A1) ->
          hom (prim Id1 x1) ==
            prim Id2 (hom x1)
    record IdempotentUnaryRelInterp
      (A1 : Set) (A2 : Set)
      (Id1 : IdempotentUnary A1)
      (Id2 : IdempotentUnary A2) :
      Set where
      constructor IdempotentUnaryRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim Id1 x1)
            (prim Id2 y1)
    data IdempotentUnaryTerm
      : Set where
      primL :
        IdempotentUnaryTerm ->
        IdempotentUnaryTerm
    data ClIdempotentUnaryTerm
      (A : Set) : Set where
      sing :
        A -> ClIdempotentUnaryTerm A
      primCl :
        ClIdempotentUnaryTerm A ->
        ClIdempotentUnaryTerm A
    data OpIdempotentUnaryTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpIdempotentUnaryTerm n
      primOL :
        OpIdempotentUnaryTerm n ->
        OpIdempotentUnaryTerm n
    data OpIdempotentUnaryTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpIdempotentUnaryTerm2 n A
      sing2 :
        A -> OpIdempotentUnaryTerm2 n A
      primOL2 :
        OpIdempotentUnaryTerm2 n A ->
        OpIdempotentUnaryTerm2 n A
  
  module Inverse where
    record Inverse
      (A : Set) : Set where
      constructor InverseC
      field
        inv : A -> A
        e : A
        op : A -> A -> A
        leftInverse_inv_op_e :
          (x : A) -> op x (inv x) == e
        rightInverse_inv_op_e :
          (x : A) -> op (inv x) x == e
    record InverseSig
      (AS : Set) : Set where
      constructor InverseSigSigC
      field
        invS : AS -> AS
        eS : AS
        opS : AS -> AS -> AS
    record InverseProd
      (AP : Set) : Set where
      constructor InverseProdC
      field
        invP : Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP xP (invP xP) == eP
        rightInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP (invP xP) xP == eP
    record InverseHom
      (A1 : Set) (A2 : Set)
      (In1 : Inverse A1)
      (In2 : Inverse A2) : Set where
      constructor InverseHomC
      field
        hom : A1 -> A2
        pres-inv :
          (x1 : A1) ->
          hom (inv In1 x1) ==
            inv In2 (hom x1)
        pres-e : hom (e In1) == e In2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op In1 x1 x2) ==
            op In2 (hom x1) (hom x2)
    record InverseRelInterp
      (A1 : Set) (A2 : Set)
      (In1 : Inverse A1)
      (In2 : Inverse A2) : Set where
      constructor InverseRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-inv :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (inv In1 x1) (inv In2 y1)
        interp-e :
          interp (e In1) (e In2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op In1 x1 x2)
            (op In2 y1 y2)
    data InverseLTerm : Set where
      invL :
        InverseLTerm -> InverseLTerm
      eL : InverseLTerm
      opL :
        InverseLTerm ->
        InverseLTerm -> InverseLTerm
    data ClInverseClTerm
      (A : Set) : Set where
      sing : A -> ClInverseClTerm A
      invCl :
        ClInverseClTerm A ->
        ClInverseClTerm A
      eCl : ClInverseClTerm A
      opCl :
        ClInverseClTerm A ->
        ClInverseClTerm A ->
        ClInverseClTerm A
    data OpInverseOLTerm
      (n : Nat) : Set where
      v : Fin n -> OpInverseOLTerm n
      invOL :
        OpInverseOLTerm n ->
        OpInverseOLTerm n
      eOL : OpInverseOLTerm n
      opOL :
        OpInverseOLTerm n ->
        OpInverseOLTerm n ->
        OpInverseOLTerm n
    data OpInverseOL2Term2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpInverseOL2Term2 n A
      sing2 :
        A -> OpInverseOL2Term2 n A
      invOL2 :
        OpInverseOL2Term2 n A ->
        OpInverseOL2Term2 n A
      eOL2 : OpInverseOL2Term2 n A
      opOL2 :
        OpInverseOL2Term2 n A ->
        OpInverseOL2Term2 n A ->
        OpInverseOL2Term2 n A
  
  module InverseSig where
    record InverseSig
      (A : Set) : Set where
      constructor InverseSigC
      field
        inv : A -> A
        e : A
        op : A -> A -> A
    record InverseSigSig
      (AS : Set) : Set where
      constructor InverseSigSigSigC
      field
        invS : AS -> AS
        eS : AS
        opS : AS -> AS -> AS
    record InverseSigProd
      (AP : Set) : Set where
      constructor InverseSigProdC
      field
        invP : Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record InverseSigHom
      (A1 : Set) (A2 : Set)
      (In1 : InverseSig A1)
      (In2 : InverseSig A2) :
      Set where
      constructor InverseSigHomC
      field
        hom : A1 -> A2
        pres-inv :
          (x1 : A1) ->
          hom (inv In1 x1) ==
            inv In2 (hom x1)
        pres-e : hom (e In1) == e In2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op In1 x1 x2) ==
            op In2 (hom x1) (hom x2)
    record InverseSigRelInterp
      (A1 : Set) (A2 : Set)
      (In1 : InverseSig A1)
      (In2 : InverseSig A2) :
      Set where
      constructor InverseSigRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-inv :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (inv In1 x1) (inv In2 y1)
        interp-e :
          interp (e In1) (e In2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op In1 x1 x2)
            (op In2 y1 y2)
    data InverseSigTerm : Set where
      invL :
        InverseSigTerm -> InverseSigTerm
      eL : InverseSigTerm
      opL :
        InverseSigTerm ->
        InverseSigTerm -> InverseSigTerm
    data ClInverseSigTerm
      (A : Set) : Set where
      sing : A -> ClInverseSigTerm A
      invCl :
        ClInverseSigTerm A ->
        ClInverseSigTerm A
      eCl : ClInverseSigTerm A
      opCl :
        ClInverseSigTerm A ->
        ClInverseSigTerm A ->
        ClInverseSigTerm A
    data OpInverseSigTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpInverseSigTerm n
      invOL :
        OpInverseSigTerm n ->
        OpInverseSigTerm n
      eOL : OpInverseSigTerm n
      opOL :
        OpInverseSigTerm n ->
        OpInverseSigTerm n ->
        OpInverseSigTerm n
    data OpInverseSigTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpInverseSigTerm2 n A
      sing2 :
        A -> OpInverseSigTerm2 n A
      invOL2 :
        OpInverseSigTerm2 n A ->
        OpInverseSigTerm2 n A
      eOL2 : OpInverseSigTerm2 n A
      opOL2 :
        OpInverseSigTerm2 n A ->
        OpInverseSigTerm2 n A ->
        OpInverseSigTerm2 n A
  
  module InverseUnaryOperation where
    record InverseUnaryOperation
      (A : Set) : Set where
      constructor InverseUnaryOperationC
      field
        inv : A -> A
    record InverseUnaryOperationSig
      (AS : Set) : Set where
      constructor InverseUnaryOperationSigSigC
      field
        invS : AS -> AS
    record InverseUnaryOperationProd
      (AP : Set) : Set where
      constructor InverseUnaryOperationProdC
      field
        invP : Prod AP AP -> Prod AP AP
    record InverseUnaryOperationHom
      (A1 : Set) (A2 : Set)
      (In1 : InverseUnaryOperation A1)
      (In2 : InverseUnaryOperation
         A2) : Set where
      constructor InverseUnaryOperationHomC
      field
        hom : A1 -> A2
        pres-inv :
          (x1 : A1) ->
          hom (inv In1 x1) ==
            inv In2 (hom x1)
    record InverseUnaryOperationRelInterp
      (A1 : Set) (A2 : Set)
      (In1 : InverseUnaryOperation A1)
      (In2 : InverseUnaryOperation
         A2) : Set where
      constructor InverseUnaryOperationRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-inv :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (inv In1 x1) (inv In2 y1)
    data InverseUnaryOperationTerm
      : Set where
      invL :
        InverseUnaryOperationTerm ->
        InverseUnaryOperationTerm
    data ClInverseUnaryOperationTerm
      (A : Set) : Set where
      sing :
        A ->
        ClInverseUnaryOperationTerm A
      invCl :
        ClInverseUnaryOperationTerm A ->
        ClInverseUnaryOperationTerm A
    data OpInverseUnaryOperationTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpInverseUnaryOperationTerm n
      invOL :
        OpInverseUnaryOperationTerm n ->
        OpInverseUnaryOperationTerm n
    data OpInverseUnaryOperationTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpInverseUnaryOperationTerm2 n A
      sing2 :
        A ->
        OpInverseUnaryOperationTerm2 n A
      invOL2 :
        OpInverseUnaryOperationTerm2 n
          A ->
        OpInverseUnaryOperationTerm2 n A
  
  module Involution where
    record Involution
      (A : Set) : Set where
      constructor InvolutionC
      field
        prim : A -> A
        involutive_prim :
          (x : A) -> prim (prim x) == x
    record InvolutionSig
      (AS : Set) : Set where
      constructor InvolutionSigSigC
      field
        primS : AS -> AS
    record InvolutionProd
      (AP : Set) : Set where
      constructor InvolutionProdC
      field
        primP : Prod AP AP -> Prod AP AP
        involutive_primP :
          (xP : Prod AP AP) ->
          primP (primP xP) == xP
    record InvolutionHom
      (A1 : Set) (A2 : Set)
      (In1 : Involution A1)
      (In2 : Involution A2) :
      Set where
      constructor InvolutionHomC
      field
        hom : A1 -> A2
        pres-prim :
          (x1 : A1) ->
          hom (prim In1 x1) ==
            prim In2 (hom x1)
    record InvolutionRelInterp
      (A1 : Set) (A2 : Set)
      (In1 : Involution A1)
      (In2 : Involution A2) :
      Set where
      constructor InvolutionRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim In1 x1)
            (prim In2 y1)
    data InvolutionTerm : Set where
      primL :
        InvolutionTerm -> InvolutionTerm
    data ClInvolutionTerm
      (A : Set) : Set where
      sing : A -> ClInvolutionTerm A
      primCl :
        ClInvolutionTerm A ->
        ClInvolutionTerm A
    data OpInvolutionTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpInvolutionTerm n
      primOL :
        OpInvolutionTerm n ->
        OpInvolutionTerm n
    data OpInvolutionTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpInvolutionTerm2 n A
      sing2 :
        A -> OpInvolutionTerm2 n A
      primOL2 :
        OpInvolutionTerm2 n A ->
        OpInvolutionTerm2 n A
  
  module InvolutiveAddMagmaSig where
    record InvolutiveAddMagmaSig
      (A : Set) : Set where
      constructor InvolutiveAddMagmaSigC
      field
        + : A -> A -> A
        prim : A -> A
    record InvolutiveAddMagmaSigSig
      (AS : Set) : Set where
      constructor InvolutiveAddMagmaSigSigSigC
      field
        +S : AS -> AS -> AS
        primS : AS -> AS
    record InvolutiveAddMagmaSigProd
      (AP : Set) : Set where
      constructor InvolutiveAddMagmaSigProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
    record InvolutiveAddMagmaSigHom
      (A1 : Set) (A2 : Set)
      (In1 : InvolutiveAddMagmaSig A1)
      (In2 : InvolutiveAddMagmaSig
         A2) : Set where
      constructor InvolutiveAddMagmaSigHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ In1 x1 x2) ==
            + In2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A1) ->
          hom (prim In1 x1) ==
            prim In2 (hom x1)
    record InvolutiveAddMagmaSigRelInterp
      (A1 : Set) (A2 : Set)
      (In1 : InvolutiveAddMagmaSig A1)
      (In2 : InvolutiveAddMagmaSig
         A2) : Set where
      constructor InvolutiveAddMagmaSigRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ In1 x1 x2)
            (+ In2 y1 y2)
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim In1 x1)
            (prim In2 y1)
    data InvolutiveAddMagmaSigTerm
      : Set where
      +L :
        InvolutiveAddMagmaSigTerm ->
        InvolutiveAddMagmaSigTerm ->
        InvolutiveAddMagmaSigTerm
      primL :
        InvolutiveAddMagmaSigTerm ->
        InvolutiveAddMagmaSigTerm
    data ClInvolutiveAddMagmaSigTerm
      (A : Set) : Set where
      sing :
        A ->
        ClInvolutiveAddMagmaSigTerm A
      +Cl :
        ClInvolutiveAddMagmaSigTerm A ->
        ClInvolutiveAddMagmaSigTerm A ->
        ClInvolutiveAddMagmaSigTerm A
      primCl :
        ClInvolutiveAddMagmaSigTerm A ->
        ClInvolutiveAddMagmaSigTerm A
    data OpInvolutiveAddMagmaSigTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpInvolutiveAddMagmaSigTerm n
      +OL :
        OpInvolutiveAddMagmaSigTerm n ->
        OpInvolutiveAddMagmaSigTerm n ->
        OpInvolutiveAddMagmaSigTerm n
      primOL :
        OpInvolutiveAddMagmaSigTerm n ->
        OpInvolutiveAddMagmaSigTerm n
    data OpInvolutiveAddMagmaSigTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpInvolutiveAddMagmaSigTerm2 n A
      sing2 :
        A ->
        OpInvolutiveAddMagmaSigTerm2 n A
      +OL2 :
        OpInvolutiveAddMagmaSigTerm2 n
          A ->
        OpInvolutiveAddMagmaSigTerm2 n
          A ->
        OpInvolutiveAddMagmaSigTerm2 n A
      primOL2 :
        OpInvolutiveAddMagmaSigTerm2 n
          A ->
        OpInvolutiveAddMagmaSigTerm2 n A
  
  module InvolutiveFixedPoint where
    record InvolutiveFixedPoint
      (A : Set) : Set where
      constructor InvolutiveFixedPointC
      field
        prim : A -> A
        1 : A
        fixes_prim_1 : prim 1 == 1
        involutive_prim :
          (x : A) -> prim (prim x) == x
    record InvolutiveFixedPointSig
      (AS : Set) : Set where
      constructor InvolutiveFixedPointSigSigC
      field
        primS : AS -> AS
        1S : AS
    record InvolutiveFixedPointProd
      (AP : Set) : Set where
      constructor InvolutiveFixedPointProdC
      field
        primP : Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        fixes_prim_1P : primP 1P == 1P
        involutive_primP :
          (xP : Prod AP AP) ->
          primP (primP xP) == xP
    record InvolutiveFixedPointHom
      (A1 : Set) (A2 : Set)
      (In1 : InvolutiveFixedPoint A1)
      (In2 : InvolutiveFixedPoint
         A2) : Set where
      constructor InvolutiveFixedPointHomC
      field
        hom : A1 -> A2
        pres-prim :
          (x1 : A1) ->
          hom (prim In1 x1) ==
            prim In2 (hom x1)
        pres-1 : hom (1 In1) == 1 In2
    record InvolutiveFixedPointRelInterp
      (A1 : Set) (A2 : Set)
      (In1 : InvolutiveFixedPoint A1)
      (In2 : InvolutiveFixedPoint
         A2) : Set where
      constructor InvolutiveFixedPointRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim In1 x1)
            (prim In2 y1)
        interp-1 :
          interp (1 In1) (1 In2)
    data InvolutiveFixedPointTerm
      : Set where
      primL :
        InvolutiveFixedPointTerm ->
        InvolutiveFixedPointTerm
      1L : InvolutiveFixedPointTerm
    data ClInvolutiveFixedPointTerm
      (A : Set) : Set where
      sing :
        A ->
        ClInvolutiveFixedPointTerm A
      primCl :
        ClInvolutiveFixedPointTerm A ->
        ClInvolutiveFixedPointTerm A
      1Cl :
        ClInvolutiveFixedPointTerm A
    data OpInvolutiveFixedPointTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpInvolutiveFixedPointTerm n
      primOL :
        OpInvolutiveFixedPointTerm n ->
        OpInvolutiveFixedPointTerm n
      1OL :
        OpInvolutiveFixedPointTerm n
    data OpInvolutiveFixedPointTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpInvolutiveFixedPointTerm2 n A
      sing2 :
        A ->
        OpInvolutiveFixedPointTerm2 n A
      primOL2 :
        OpInvolutiveFixedPointTerm2 n
          A ->
        OpInvolutiveFixedPointTerm2 n A
      1OL2 :
        OpInvolutiveFixedPointTerm2 n A
  
  module InvolutiveFixes where
    record InvolutiveFixes
      (A : Set) : Set where
      constructor InvolutiveFixesC
      field
        1 : A
        prim : A -> A
        fixes_prim_1 : prim 1 == 1
    record InvolutiveFixesSig
      (AS : Set) : Set where
      constructor InvolutiveFixesSigSigC
      field
        1S : AS
        primS : AS -> AS
    record InvolutiveFixesProd
      (AP : Set) : Set where
      constructor InvolutiveFixesProdC
      field
        1P : Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        fixes_prim_1P : primP 1P == 1P
    record InvolutiveFixesHom
      (A1 : Set) (A2 : Set)
      (In1 : InvolutiveFixes A1)
      (In2 : InvolutiveFixes A2) :
      Set where
      constructor InvolutiveFixesHomC
      field
        hom : A1 -> A2
        pres-1 : hom (1 In1) == 1 In2
        pres-prim :
          (x1 : A1) ->
          hom (prim In1 x1) ==
            prim In2 (hom x1)
    record InvolutiveFixesRelInterp
      (A1 : Set) (A2 : Set)
      (In1 : InvolutiveFixes A1)
      (In2 : InvolutiveFixes A2) :
      Set where
      constructor InvolutiveFixesRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-1 :
          interp (1 In1) (1 In2)
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim In1 x1)
            (prim In2 y1)
    data InvolutiveFixesTerm
      : Set where
      1L : InvolutiveFixesTerm
      primL :
        InvolutiveFixesTerm ->
        InvolutiveFixesTerm
    data ClInvolutiveFixesTerm
      (A : Set) : Set where
      sing :
        A -> ClInvolutiveFixesTerm A
      1Cl : ClInvolutiveFixesTerm A
      primCl :
        ClInvolutiveFixesTerm A ->
        ClInvolutiveFixesTerm A
    data OpInvolutiveFixesTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpInvolutiveFixesTerm n
      1OL : OpInvolutiveFixesTerm n
      primOL :
        OpInvolutiveFixesTerm n ->
        OpInvolutiveFixesTerm n
    data OpInvolutiveFixesTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpInvolutiveFixesTerm2 n A
      sing2 :
        A -> OpInvolutiveFixesTerm2 n A
      1OL2 :
        OpInvolutiveFixesTerm2 n A
      primOL2 :
        OpInvolutiveFixesTerm2 n A ->
        OpInvolutiveFixesTerm2 n A
  
  module InvolutiveMagma where
    record InvolutiveMagma
      (A : Set) : Set where
      constructor InvolutiveMagmaC
      field
        prim : A -> A
        involutive_prim :
          (x : A) -> prim (prim x) == x
        op : A -> A -> A
        antidis_prim_op :
          (x : A) (y : A) ->
          prim (op x y) ==
            op (prim y) (prim x)
    record InvolutiveMagmaSig
      (AS : Set) : Set where
      constructor InvolutiveMagmaSigSigC
      field
        primS : AS -> AS
        opS : AS -> AS -> AS
    record InvolutiveMagmaProd
      (AP : Set) : Set where
      constructor InvolutiveMagmaProdC
      field
        primP : Prod AP AP -> Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        involutive_primP :
          (xP : Prod AP AP) ->
          primP (primP xP) == xP
        antidis_prim_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (opP xP yP) ==
            opP (primP yP) (primP xP)
    record InvolutiveMagmaHom
      (A1 : Set) (A2 : Set)
      (In1 : InvolutiveMagma A1)
      (In2 : InvolutiveMagma A2) :
      Set where
      constructor InvolutiveMagmaHomC
      field
        hom : A1 -> A2
        pres-prim :
          (x1 : A1) ->
          hom (prim In1 x1) ==
            prim In2 (hom x1)
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op In1 x1 x2) ==
            op In2 (hom x1) (hom x2)
    record InvolutiveMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (In1 : InvolutiveMagma A1)
      (In2 : InvolutiveMagma A2) :
      Set where
      constructor InvolutiveMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim In1 x1)
            (prim In2 y1)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op In1 x1 x2)
            (op In2 y1 y2)
    data InvolutiveMagmaTerm
      : Set where
      primL :
        InvolutiveMagmaTerm ->
        InvolutiveMagmaTerm
      opL :
        InvolutiveMagmaTerm ->
        InvolutiveMagmaTerm ->
        InvolutiveMagmaTerm
    data ClInvolutiveMagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClInvolutiveMagmaTerm A
      primCl :
        ClInvolutiveMagmaTerm A ->
        ClInvolutiveMagmaTerm A
      opCl :
        ClInvolutiveMagmaTerm A ->
        ClInvolutiveMagmaTerm A ->
        ClInvolutiveMagmaTerm A
    data OpInvolutiveMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpInvolutiveMagmaTerm n
      primOL :
        OpInvolutiveMagmaTerm n ->
        OpInvolutiveMagmaTerm n
      opOL :
        OpInvolutiveMagmaTerm n ->
        OpInvolutiveMagmaTerm n ->
        OpInvolutiveMagmaTerm n
    data OpInvolutiveMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpInvolutiveMagmaTerm2 n A
      sing2 :
        A -> OpInvolutiveMagmaTerm2 n A
      primOL2 :
        OpInvolutiveMagmaTerm2 n A ->
        OpInvolutiveMagmaTerm2 n A
      opOL2 :
        OpInvolutiveMagmaTerm2 n A ->
        OpInvolutiveMagmaTerm2 n A ->
        OpInvolutiveMagmaTerm2 n A
  
  module InvolutiveMagmaSig where
    record InvolutiveMagmaSig
      (A : Set) : Set where
      constructor InvolutiveMagmaSigC
      field
        prim : A -> A
        op : A -> A -> A
    record InvolutiveMagmaSigSig
      (AS : Set) : Set where
      constructor InvolutiveMagmaSigSigSigC
      field
        primS : AS -> AS
        opS : AS -> AS -> AS
    record InvolutiveMagmaSigProd
      (AP : Set) : Set where
      constructor InvolutiveMagmaSigProdC
      field
        primP : Prod AP AP -> Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record InvolutiveMagmaSigHom
      (A1 : Set) (A2 : Set)
      (In1 : InvolutiveMagmaSig A1)
      (In2 : InvolutiveMagmaSig A2) :
      Set where
      constructor InvolutiveMagmaSigHomC
      field
        hom : A1 -> A2
        pres-prim :
          (x1 : A1) ->
          hom (prim In1 x1) ==
            prim In2 (hom x1)
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op In1 x1 x2) ==
            op In2 (hom x1) (hom x2)
    record InvolutiveMagmaSigRelInterp
      (A1 : Set) (A2 : Set)
      (In1 : InvolutiveMagmaSig A1)
      (In2 : InvolutiveMagmaSig A2) :
      Set where
      constructor InvolutiveMagmaSigRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim In1 x1)
            (prim In2 y1)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op In1 x1 x2)
            (op In2 y1 y2)
    data InvolutiveMagmaSigTerm
      : Set where
      primL :
        InvolutiveMagmaSigTerm ->
        InvolutiveMagmaSigTerm
      opL :
        InvolutiveMagmaSigTerm ->
        InvolutiveMagmaSigTerm ->
        InvolutiveMagmaSigTerm
    data ClInvolutiveMagmaSigTerm
      (A : Set) : Set where
      sing :
        A -> ClInvolutiveMagmaSigTerm A
      primCl :
        ClInvolutiveMagmaSigTerm A ->
        ClInvolutiveMagmaSigTerm A
      opCl :
        ClInvolutiveMagmaSigTerm A ->
        ClInvolutiveMagmaSigTerm A ->
        ClInvolutiveMagmaSigTerm A
    data OpInvolutiveMagmaSigTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpInvolutiveMagmaSigTerm n
      primOL :
        OpInvolutiveMagmaSigTerm n ->
        OpInvolutiveMagmaSigTerm n
      opOL :
        OpInvolutiveMagmaSigTerm n ->
        OpInvolutiveMagmaSigTerm n ->
        OpInvolutiveMagmaSigTerm n
    data OpInvolutiveMagmaSigTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpInvolutiveMagmaSigTerm2 n A
      sing2 :
        A ->
        OpInvolutiveMagmaSigTerm2 n A
      primOL2 :
        OpInvolutiveMagmaSigTerm2 n A ->
        OpInvolutiveMagmaSigTerm2 n A
      opOL2 :
        OpInvolutiveMagmaSigTerm2 n A ->
        OpInvolutiveMagmaSigTerm2 n A ->
        OpInvolutiveMagmaSigTerm2 n A
  
  module InvolutiveMultMagmaSig where
    record InvolutiveMultMagmaSig
      (A : Set) : Set where
      constructor InvolutiveMultMagmaSigC
      field
        * : A -> A -> A
        prim : A -> A
    record InvolutiveMultMagmaSigSig
      (AS : Set) : Set where
      constructor InvolutiveMultMagmaSigSigSigC
      field
        *S : AS -> AS -> AS
        primS : AS -> AS
    record InvolutiveMultMagmaSigProd
      (AP : Set) : Set where
      constructor InvolutiveMultMagmaSigProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
    record InvolutiveMultMagmaSigHom
      (A1 : Set) (A2 : Set)
      (In1 : InvolutiveMultMagmaSig
         A1)
      (In2 : InvolutiveMultMagmaSig
         A2) : Set where
      constructor InvolutiveMultMagmaSigHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* In1 x1 x2) ==
            * In2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A1) ->
          hom (prim In1 x1) ==
            prim In2 (hom x1)
    record InvolutiveMultMagmaSigRelInterp
      (A1 : Set) (A2 : Set)
      (In1 : InvolutiveMultMagmaSig
         A1)
      (In2 : InvolutiveMultMagmaSig
         A2) : Set where
      constructor InvolutiveMultMagmaSigRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* In1 x1 x2)
            (* In2 y1 y2)
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim In1 x1)
            (prim In2 y1)
    data InvolutiveMultMagmaSigTerm
      : Set where
      *L :
        InvolutiveMultMagmaSigTerm ->
        InvolutiveMultMagmaSigTerm ->
        InvolutiveMultMagmaSigTerm
      primL :
        InvolutiveMultMagmaSigTerm ->
        InvolutiveMultMagmaSigTerm
    data ClInvolutiveMultMagmaSigTerm
      (A : Set) : Set where
      sing :
        A ->
        ClInvolutiveMultMagmaSigTerm A
      *Cl :
        ClInvolutiveMultMagmaSigTerm
          A ->
        ClInvolutiveMultMagmaSigTerm
          A ->
        ClInvolutiveMultMagmaSigTerm A
      primCl :
        ClInvolutiveMultMagmaSigTerm
          A ->
        ClInvolutiveMultMagmaSigTerm A
    data OpInvolutiveMultMagmaSigTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpInvolutiveMultMagmaSigTerm n
      *OL :
        OpInvolutiveMultMagmaSigTerm
          n ->
        OpInvolutiveMultMagmaSigTerm
          n ->
        OpInvolutiveMultMagmaSigTerm n
      primOL :
        OpInvolutiveMultMagmaSigTerm
          n ->
        OpInvolutiveMultMagmaSigTerm n
    data OpInvolutiveMultMagmaSigTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpInvolutiveMultMagmaSigTerm2 n
          A
      sing2 :
        A ->
        OpInvolutiveMultMagmaSigTerm2 n
          A
      *OL2 :
        OpInvolutiveMultMagmaSigTerm2 n
          A ->
        OpInvolutiveMultMagmaSigTerm2 n
          A ->
        OpInvolutiveMultMagmaSigTerm2 n
          A
      primOL2 :
        OpInvolutiveMultMagmaSigTerm2 n
          A ->
        OpInvolutiveMultMagmaSigTerm2 n
          A
  
  module InvolutivePointedMagmaSig where
    record InvolutivePointedMagmaSig
      (A : Set) : Set where
      constructor InvolutivePointedMagmaSigC
      field
        prim : A -> A
        e : A
        op : A -> A -> A
    record InvolutivePointedMagmaSigSig
      (AS : Set) : Set where
      constructor InvolutivePointedMagmaSigSigSigC
      field
        primS : AS -> AS
        eS : AS
        opS : AS -> AS -> AS
    record InvolutivePointedMagmaSigProd
      (AP : Set) : Set where
      constructor InvolutivePointedMagmaSigProdC
      field
        primP : Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record InvolutivePointedMagmaSigHom
      (A1 : Set) (A2 : Set)
      (In1 : InvolutivePointedMagmaSig
         A1)
      (In2 : InvolutivePointedMagmaSig
         A2) : Set where
      constructor InvolutivePointedMagmaSigHomC
      field
        hom : A1 -> A2
        pres-prim :
          (x1 : A1) ->
          hom (prim In1 x1) ==
            prim In2 (hom x1)
        pres-e : hom (e In1) == e In2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op In1 x1 x2) ==
            op In2 (hom x1) (hom x2)
    record InvolutivePointedMagmaSigRelInterp
      (A1 : Set) (A2 : Set)
      (In1 : InvolutivePointedMagmaSig
         A1)
      (In2 : InvolutivePointedMagmaSig
         A2) : Set where
      constructor InvolutivePointedMagmaSigRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim In1 x1)
            (prim In2 y1)
        interp-e :
          interp (e In1) (e In2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op In1 x1 x2)
            (op In2 y1 y2)
    data InvolutivePointedMagmaSigTerm
      : Set where
      primL :
        InvolutivePointedMagmaSigTerm ->
        InvolutivePointedMagmaSigTerm
      eL :
        InvolutivePointedMagmaSigTerm
      opL :
        InvolutivePointedMagmaSigTerm ->
        InvolutivePointedMagmaSigTerm ->
        InvolutivePointedMagmaSigTerm
    data ClInvolutivePointedMagmaSigTerm
      (A : Set) : Set where
      sing :
        A ->
        ClInvolutivePointedMagmaSigTerm
          A
      primCl :
        ClInvolutivePointedMagmaSigTerm
          A ->
        ClInvolutivePointedMagmaSigTerm
          A
      eCl :
        ClInvolutivePointedMagmaSigTerm
          A
      opCl :
        ClInvolutivePointedMagmaSigTerm
          A ->
        ClInvolutivePointedMagmaSigTerm
          A ->
        ClInvolutivePointedMagmaSigTerm
          A
    data OpInvolutivePointedMagmaSigTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpInvolutivePointedMagmaSigTerm
          n
      primOL :
        OpInvolutivePointedMagmaSigTerm
          n ->
        OpInvolutivePointedMagmaSigTerm
          n
      eOL :
        OpInvolutivePointedMagmaSigTerm
          n
      opOL :
        OpInvolutivePointedMagmaSigTerm
          n ->
        OpInvolutivePointedMagmaSigTerm
          n ->
        OpInvolutivePointedMagmaSigTerm
          n
    data OpInvolutivePointedMagmaSigTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpInvolutivePointedMagmaSigTerm2
          n
          A
      sing2 :
        A ->
        OpInvolutivePointedMagmaSigTerm2
          n
          A
      primOL2 :
        OpInvolutivePointedMagmaSigTerm2
          n
          A ->
        OpInvolutivePointedMagmaSigTerm2
          n
          A
      eOL2 :
        OpInvolutivePointedMagmaSigTerm2
          n
          A
      opOL2 :
        OpInvolutivePointedMagmaSigTerm2
          n
          A ->
        OpInvolutivePointedMagmaSigTerm2
          n
          A ->
        OpInvolutivePointedMagmaSigTerm2
          n
          A
  
  module InvolutivePointedSemigroup where
    record InvolutivePointedSemigroup
      (A : Set) : Set where
      constructor InvolutivePointedSemigroupC
      field
        op : A -> A -> A
        e : A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        prim : A -> A
        involutive_prim :
          (x : A) -> prim (prim x) == x
        antidis_prim_op :
          (x : A) (y : A) ->
          prim (op x y) ==
            op (prim y) (prim x)
    record InvolutivePointedSemigroupSig
      (AS : Set) : Set where
      constructor InvolutivePointedSemigroupSigSigC
      field
        opS : AS -> AS -> AS
        eS : AS
        primS : AS -> AS
    record InvolutivePointedSemigroupProd
      (AP : Set) : Set where
      constructor InvolutivePointedSemigroupProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        involutive_primP :
          (xP : Prod AP AP) ->
          primP (primP xP) == xP
        antidis_prim_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (opP xP yP) ==
            opP (primP yP) (primP xP)
    record InvolutivePointedSemigroupHom
      (A1 : Set) (A2 : Set)
      (In1 : InvolutivePointedSemigroup
         A1)
      (In2 : InvolutivePointedSemigroup
         A2) : Set where
      constructor InvolutivePointedSemigroupHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op In1 x1 x2) ==
            op In2 (hom x1) (hom x2)
        pres-e : hom (e In1) == e In2
        pres-prim :
          (x1 : A1) ->
          hom (prim In1 x1) ==
            prim In2 (hom x1)
    record InvolutivePointedSemigroupRelInterp
      (A1 : Set) (A2 : Set)
      (In1 : InvolutivePointedSemigroup
         A1)
      (In2 : InvolutivePointedSemigroup
         A2) : Set where
      constructor InvolutivePointedSemigroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op In1 x1 x2)
            (op In2 y1 y2)
        interp-e :
          interp (e In1) (e In2)
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim In1 x1)
            (prim In2 y1)
    data InvolutivePointedSemigroupTerm
      : Set where
      opL :
        InvolutivePointedSemigroupTerm ->
        InvolutivePointedSemigroupTerm ->
        InvolutivePointedSemigroupTerm
      eL :
        InvolutivePointedSemigroupTerm
      primL :
        InvolutivePointedSemigroupTerm ->
        InvolutivePointedSemigroupTerm
    data ClInvolutivePointedSemigroupTerm
      (A : Set) : Set where
      sing :
        A ->
        ClInvolutivePointedSemigroupTerm
          A
      opCl :
        ClInvolutivePointedSemigroupTerm
          A ->
        ClInvolutivePointedSemigroupTerm
          A ->
        ClInvolutivePointedSemigroupTerm
          A
      eCl :
        ClInvolutivePointedSemigroupTerm
          A
      primCl :
        ClInvolutivePointedSemigroupTerm
          A ->
        ClInvolutivePointedSemigroupTerm
          A
    data OpInvolutivePointedSemigroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpInvolutivePointedSemigroupTerm
          n
      opOL :
        OpInvolutivePointedSemigroupTerm
          n ->
        OpInvolutivePointedSemigroupTerm
          n ->
        OpInvolutivePointedSemigroupTerm
          n
      eOL :
        OpInvolutivePointedSemigroupTerm
          n
      primOL :
        OpInvolutivePointedSemigroupTerm
          n ->
        OpInvolutivePointedSemigroupTerm
          n
    data OpInvolutivePointedSemigroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpInvolutivePointedSemigroupTerm2
          n
          A
      sing2 :
        A ->
        OpInvolutivePointedSemigroupTerm2
          n
          A
      opOL2 :
        OpInvolutivePointedSemigroupTerm2
          n
          A ->
        OpInvolutivePointedSemigroupTerm2
          n
          A ->
        OpInvolutivePointedSemigroupTerm2
          n
          A
      eOL2 :
        OpInvolutivePointedSemigroupTerm2
          n
          A
      primOL2 :
        OpInvolutivePointedSemigroupTerm2
          n
          A ->
        OpInvolutivePointedSemigroupTerm2
          n
          A
  
  module InvolutiveRing where
    record InvolutiveRing
      (A : Set) : Set where
      constructor InvolutiveRingC
      field
        * : A -> A -> A
        + : A -> A -> A
        1 : A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        prim : A -> A
        fixes_prim_1 : prim 1 == 1
        involutive_prim :
          (x : A) -> prim (prim x) == x
        antidis_prim_+ :
          (x : A) (y : A) ->
          prim (+ x y) ==
            + (prim y) (prim x)
        antidis_prim_* :
          (x : A) (y : A) ->
          prim (* x y) ==
            * (prim y) (prim x)
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
    record InvolutiveRingSig
      (AS : Set) : Set where
      constructor InvolutiveRingSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        1S : AS
        primS : AS -> AS
        0S : AS
        negS : AS -> AS
    record InvolutiveRingProd
      (AP : Set) : Set where
      constructor InvolutiveRingProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        negP : Prod AP AP -> Prod AP AP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        fixes_prim_1P : primP 1P == 1P
        involutive_primP :
          (xP : Prod AP AP) ->
          primP (primP xP) == xP
        antidis_prim_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (+P xP yP) ==
            +P (primP yP) (primP xP)
        antidis_prim_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (*P xP yP) ==
            *P (primP yP) (primP xP)
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P xP (negP xP) == 0P
        rightInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P (negP xP) xP == 0P
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        leftZero_op_0P :
          (xP : Prod AP AP) ->
          *P 0P xP == 0P
        rightZero_op_0P :
          (xP : Prod AP AP) ->
          *P xP 0P == 0P
    record InvolutiveRingHom
      (A1 : Set) (A2 : Set)
      (In1 : InvolutiveRing A1)
      (In2 : InvolutiveRing A2) :
      Set where
      constructor InvolutiveRingHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* In1 x1 x2) ==
            * In2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ In1 x1 x2) ==
            + In2 (hom x1) (hom x2)
        pres-1 : hom (1 In1) == 1 In2
        pres-prim :
          (x1 : A1) ->
          hom (prim In1 x1) ==
            prim In2 (hom x1)
        pres-0 : hom (0 In1) == 0 In2
        pres-neg :
          (x1 : A1) ->
          hom (neg In1 x1) ==
            neg In2 (hom x1)
    record InvolutiveRingRelInterp
      (A1 : Set) (A2 : Set)
      (In1 : InvolutiveRing A1)
      (In2 : InvolutiveRing A2) :
      Set where
      constructor InvolutiveRingRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* In1 x1 x2)
            (* In2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ In1 x1 x2)
            (+ In2 y1 y2)
        interp-1 :
          interp (1 In1) (1 In2)
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim In1 x1)
            (prim In2 y1)
        interp-0 :
          interp (0 In1) (0 In2)
        interp-neg :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (neg In1 x1) (neg In2 y1)
    data InvolutiveRingTerm
      : Set where
      *L :
        InvolutiveRingTerm ->
        InvolutiveRingTerm ->
        InvolutiveRingTerm
      +L :
        InvolutiveRingTerm ->
        InvolutiveRingTerm ->
        InvolutiveRingTerm
      1L : InvolutiveRingTerm
      primL :
        InvolutiveRingTerm ->
        InvolutiveRingTerm
      0L : InvolutiveRingTerm
      negL :
        InvolutiveRingTerm ->
        InvolutiveRingTerm
    data ClInvolutiveRingTerm
      (A : Set) : Set where
      sing :
        A -> ClInvolutiveRingTerm A
      *Cl :
        ClInvolutiveRingTerm A ->
        ClInvolutiveRingTerm A ->
        ClInvolutiveRingTerm A
      +Cl :
        ClInvolutiveRingTerm A ->
        ClInvolutiveRingTerm A ->
        ClInvolutiveRingTerm A
      1Cl : ClInvolutiveRingTerm A
      primCl :
        ClInvolutiveRingTerm A ->
        ClInvolutiveRingTerm A
      0Cl : ClInvolutiveRingTerm A
      negCl :
        ClInvolutiveRingTerm A ->
        ClInvolutiveRingTerm A
    data OpInvolutiveRingTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpInvolutiveRingTerm n
      *OL :
        OpInvolutiveRingTerm n ->
        OpInvolutiveRingTerm n ->
        OpInvolutiveRingTerm n
      +OL :
        OpInvolutiveRingTerm n ->
        OpInvolutiveRingTerm n ->
        OpInvolutiveRingTerm n
      1OL : OpInvolutiveRingTerm n
      primOL :
        OpInvolutiveRingTerm n ->
        OpInvolutiveRingTerm n
      0OL : OpInvolutiveRingTerm n
      negOL :
        OpInvolutiveRingTerm n ->
        OpInvolutiveRingTerm n
    data OpInvolutiveRingTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpInvolutiveRingTerm2 n A
      sing2 :
        A -> OpInvolutiveRingTerm2 n A
      *OL2 :
        OpInvolutiveRingTerm2 n A ->
        OpInvolutiveRingTerm2 n A ->
        OpInvolutiveRingTerm2 n A
      +OL2 :
        OpInvolutiveRingTerm2 n A ->
        OpInvolutiveRingTerm2 n A ->
        OpInvolutiveRingTerm2 n A
      1OL2 : OpInvolutiveRingTerm2 n A
      primOL2 :
        OpInvolutiveRingTerm2 n A ->
        OpInvolutiveRingTerm2 n A
      0OL2 : OpInvolutiveRingTerm2 n A
      negOL2 :
        OpInvolutiveRingTerm2 n A ->
        OpInvolutiveRingTerm2 n A
  
  module InvolutiveRingoid where
    record InvolutiveRingoid
      (A : Set) : Set where
      constructor InvolutiveRingoidC
      field
        prim : A -> A
        1 : A
        fixes_prim_1 : prim 1 == 1
        involutive_prim :
          (x : A) -> prim (prim x) == x
        * : A -> A -> A
        + : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        antidis_prim_+ :
          (x : A) (y : A) ->
          prim (+ x y) ==
            + (prim y) (prim x)
        antidis_prim_* :
          (x : A) (y : A) ->
          prim (* x y) ==
            * (prim y) (prim x)
    record InvolutiveRingoidSig
      (AS : Set) : Set where
      constructor InvolutiveRingoidSigSigC
      field
        primS : AS -> AS
        1S : AS
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record InvolutiveRingoidProd
      (AP : Set) : Set where
      constructor InvolutiveRingoidProdC
      field
        primP : Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        fixes_prim_1P : primP 1P == 1P
        involutive_primP :
          (xP : Prod AP AP) ->
          primP (primP xP) == xP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        antidis_prim_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (+P xP yP) ==
            +P (primP yP) (primP xP)
        antidis_prim_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (*P xP yP) ==
            *P (primP yP) (primP xP)
    record InvolutiveRingoidHom
      (A1 : Set) (A2 : Set)
      (In1 : InvolutiveRingoid A1)
      (In2 : InvolutiveRingoid A2) :
      Set where
      constructor InvolutiveRingoidHomC
      field
        hom : A1 -> A2
        pres-prim :
          (x1 : A1) ->
          hom (prim In1 x1) ==
            prim In2 (hom x1)
        pres-1 : hom (1 In1) == 1 In2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* In1 x1 x2) ==
            * In2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ In1 x1 x2) ==
            + In2 (hom x1) (hom x2)
    record InvolutiveRingoidRelInterp
      (A1 : Set) (A2 : Set)
      (In1 : InvolutiveRingoid A1)
      (In2 : InvolutiveRingoid A2) :
      Set where
      constructor InvolutiveRingoidRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim In1 x1)
            (prim In2 y1)
        interp-1 :
          interp (1 In1) (1 In2)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* In1 x1 x2)
            (* In2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ In1 x1 x2)
            (+ In2 y1 y2)
    data InvolutiveRingoidTerm
      : Set where
      primL :
        InvolutiveRingoidTerm ->
        InvolutiveRingoidTerm
      1L : InvolutiveRingoidTerm
      *L :
        InvolutiveRingoidTerm ->
        InvolutiveRingoidTerm ->
        InvolutiveRingoidTerm
      +L :
        InvolutiveRingoidTerm ->
        InvolutiveRingoidTerm ->
        InvolutiveRingoidTerm
    data ClInvolutiveRingoidTerm
      (A : Set) : Set where
      sing :
        A -> ClInvolutiveRingoidTerm A
      primCl :
        ClInvolutiveRingoidTerm A ->
        ClInvolutiveRingoidTerm A
      1Cl : ClInvolutiveRingoidTerm A
      *Cl :
        ClInvolutiveRingoidTerm A ->
        ClInvolutiveRingoidTerm A ->
        ClInvolutiveRingoidTerm A
      +Cl :
        ClInvolutiveRingoidTerm A ->
        ClInvolutiveRingoidTerm A ->
        ClInvolutiveRingoidTerm A
    data OpInvolutiveRingoidTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpInvolutiveRingoidTerm n
      primOL :
        OpInvolutiveRingoidTerm n ->
        OpInvolutiveRingoidTerm n
      1OL : OpInvolutiveRingoidTerm n
      *OL :
        OpInvolutiveRingoidTerm n ->
        OpInvolutiveRingoidTerm n ->
        OpInvolutiveRingoidTerm n
      +OL :
        OpInvolutiveRingoidTerm n ->
        OpInvolutiveRingoidTerm n ->
        OpInvolutiveRingoidTerm n
    data OpInvolutiveRingoidTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpInvolutiveRingoidTerm2 n A
      sing2 :
        A ->
        OpInvolutiveRingoidTerm2 n A
      primOL2 :
        OpInvolutiveRingoidTerm2 n A ->
        OpInvolutiveRingoidTerm2 n A
      1OL2 :
        OpInvolutiveRingoidTerm2 n A
      *OL2 :
        OpInvolutiveRingoidTerm2 n A ->
        OpInvolutiveRingoidTerm2 n A ->
        OpInvolutiveRingoidTerm2 n A
      +OL2 :
        OpInvolutiveRingoidTerm2 n A ->
        OpInvolutiveRingoidTerm2 n A ->
        OpInvolutiveRingoidTerm2 n A
  
  module InvolutiveRingoidSig where
    record InvolutiveRingoidSig
      (A : Set) : Set where
      constructor InvolutiveRingoidSigC
      field
        prim : A -> A
        * : A -> A -> A
        + : A -> A -> A
    record InvolutiveRingoidSigSig
      (AS : Set) : Set where
      constructor InvolutiveRingoidSigSigSigC
      field
        primS : AS -> AS
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record InvolutiveRingoidSigProd
      (AP : Set) : Set where
      constructor InvolutiveRingoidSigProdC
      field
        primP : Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record InvolutiveRingoidSigHom
      (A1 : Set) (A2 : Set)
      (In1 : InvolutiveRingoidSig A1)
      (In2 : InvolutiveRingoidSig
         A2) : Set where
      constructor InvolutiveRingoidSigHomC
      field
        hom : A1 -> A2
        pres-prim :
          (x1 : A1) ->
          hom (prim In1 x1) ==
            prim In2 (hom x1)
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* In1 x1 x2) ==
            * In2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ In1 x1 x2) ==
            + In2 (hom x1) (hom x2)
    record InvolutiveRingoidSigRelInterp
      (A1 : Set) (A2 : Set)
      (In1 : InvolutiveRingoidSig A1)
      (In2 : InvolutiveRingoidSig
         A2) : Set where
      constructor InvolutiveRingoidSigRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim In1 x1)
            (prim In2 y1)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* In1 x1 x2)
            (* In2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ In1 x1 x2)
            (+ In2 y1 y2)
    data InvolutiveRingoidSigTerm
      : Set where
      primL :
        InvolutiveRingoidSigTerm ->
        InvolutiveRingoidSigTerm
      *L :
        InvolutiveRingoidSigTerm ->
        InvolutiveRingoidSigTerm ->
        InvolutiveRingoidSigTerm
      +L :
        InvolutiveRingoidSigTerm ->
        InvolutiveRingoidSigTerm ->
        InvolutiveRingoidSigTerm
    data ClInvolutiveRingoidSigTerm
      (A : Set) : Set where
      sing :
        A ->
        ClInvolutiveRingoidSigTerm A
      primCl :
        ClInvolutiveRingoidSigTerm A ->
        ClInvolutiveRingoidSigTerm A
      *Cl :
        ClInvolutiveRingoidSigTerm A ->
        ClInvolutiveRingoidSigTerm A ->
        ClInvolutiveRingoidSigTerm A
      +Cl :
        ClInvolutiveRingoidSigTerm A ->
        ClInvolutiveRingoidSigTerm A ->
        ClInvolutiveRingoidSigTerm A
    data OpInvolutiveRingoidSigTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpInvolutiveRingoidSigTerm n
      primOL :
        OpInvolutiveRingoidSigTerm n ->
        OpInvolutiveRingoidSigTerm n
      *OL :
        OpInvolutiveRingoidSigTerm n ->
        OpInvolutiveRingoidSigTerm n ->
        OpInvolutiveRingoidSigTerm n
      +OL :
        OpInvolutiveRingoidSigTerm n ->
        OpInvolutiveRingoidSigTerm n ->
        OpInvolutiveRingoidSigTerm n
    data OpInvolutiveRingoidSigTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpInvolutiveRingoidSigTerm2 n A
      sing2 :
        A ->
        OpInvolutiveRingoidSigTerm2 n A
      primOL2 :
        OpInvolutiveRingoidSigTerm2 n
          A ->
        OpInvolutiveRingoidSigTerm2 n A
      *OL2 :
        OpInvolutiveRingoidSigTerm2 n
          A ->
        OpInvolutiveRingoidSigTerm2 n
          A ->
        OpInvolutiveRingoidSigTerm2 n A
      +OL2 :
        OpInvolutiveRingoidSigTerm2 n
          A ->
        OpInvolutiveRingoidSigTerm2 n
          A ->
        OpInvolutiveRingoidSigTerm2 n A
  
  module InvolutiveRingoidWithAntiDistrib where
    record InvolutiveRingoidWithAntiDistrib
      (A : Set) : Set where
      constructor InvolutiveRingoidWithAntiDistribC
      field
        * : A -> A -> A
        + : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        prim : A -> A
        antidis_prim_+ :
          (x : A) (y : A) ->
          prim (+ x y) ==
            + (prim y) (prim x)
        antidis_prim_* :
          (x : A) (y : A) ->
          prim (* x y) ==
            * (prim y) (prim x)
    record InvolutiveRingoidWithAntiDistribSig
      (AS : Set) : Set where
      constructor InvolutiveRingoidWithAntiDistribSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        primS : AS -> AS
    record InvolutiveRingoidWithAntiDistribProd
      (AP : Set) : Set where
      constructor InvolutiveRingoidWithAntiDistribProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        antidis_prim_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (+P xP yP) ==
            +P (primP yP) (primP xP)
        antidis_prim_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (*P xP yP) ==
            *P (primP yP) (primP xP)
    record InvolutiveRingoidWithAntiDistribHom
      (A1 : Set) (A2 : Set)
      (In1 : InvolutiveRingoidWithAntiDistrib
         A1)
      (In2 : InvolutiveRingoidWithAntiDistrib
         A2) : Set where
      constructor InvolutiveRingoidWithAntiDistribHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* In1 x1 x2) ==
            * In2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ In1 x1 x2) ==
            + In2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A1) ->
          hom (prim In1 x1) ==
            prim In2 (hom x1)
    record InvolutiveRingoidWithAntiDistribRelInterp
      (A1 : Set) (A2 : Set)
      (In1 : InvolutiveRingoidWithAntiDistrib
         A1)
      (In2 : InvolutiveRingoidWithAntiDistrib
         A2) : Set where
      constructor InvolutiveRingoidWithAntiDistribRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* In1 x1 x2)
            (* In2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ In1 x1 x2)
            (+ In2 y1 y2)
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim In1 x1)
            (prim In2 y1)
    data InvolutiveRingoidWithAntiDistribTerm
      : Set where
      *L :
        InvolutiveRingoidWithAntiDistribTerm ->
        InvolutiveRingoidWithAntiDistribTerm ->
        InvolutiveRingoidWithAntiDistribTerm
      +L :
        InvolutiveRingoidWithAntiDistribTerm ->
        InvolutiveRingoidWithAntiDistribTerm ->
        InvolutiveRingoidWithAntiDistribTerm
      primL :
        InvolutiveRingoidWithAntiDistribTerm ->
        InvolutiveRingoidWithAntiDistribTerm
    data ClInvolutiveRingoidWithAntiDistribTerm
      (A : Set) : Set where
      sing :
        A ->
        ClInvolutiveRingoidWithAntiDistribTerm
          A
      *Cl :
        ClInvolutiveRingoidWithAntiDistribTerm
          A ->
        ClInvolutiveRingoidWithAntiDistribTerm
          A ->
        ClInvolutiveRingoidWithAntiDistribTerm
          A
      +Cl :
        ClInvolutiveRingoidWithAntiDistribTerm
          A ->
        ClInvolutiveRingoidWithAntiDistribTerm
          A ->
        ClInvolutiveRingoidWithAntiDistribTerm
          A
      primCl :
        ClInvolutiveRingoidWithAntiDistribTerm
          A ->
        ClInvolutiveRingoidWithAntiDistribTerm
          A
    data OpInvolutiveRingoidWithAntiDistribTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpInvolutiveRingoidWithAntiDistribTerm
          n
      *OL :
        OpInvolutiveRingoidWithAntiDistribTerm
          n ->
        OpInvolutiveRingoidWithAntiDistribTerm
          n ->
        OpInvolutiveRingoidWithAntiDistribTerm
          n
      +OL :
        OpInvolutiveRingoidWithAntiDistribTerm
          n ->
        OpInvolutiveRingoidWithAntiDistribTerm
          n ->
        OpInvolutiveRingoidWithAntiDistribTerm
          n
      primOL :
        OpInvolutiveRingoidWithAntiDistribTerm
          n ->
        OpInvolutiveRingoidWithAntiDistribTerm
          n
    data OpInvolutiveRingoidWithAntiDistribTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpInvolutiveRingoidWithAntiDistribTerm2
          n
          A
      sing2 :
        A ->
        OpInvolutiveRingoidWithAntiDistribTerm2
          n
          A
      *OL2 :
        OpInvolutiveRingoidWithAntiDistribTerm2
          n
          A ->
        OpInvolutiveRingoidWithAntiDistribTerm2
          n
          A ->
        OpInvolutiveRingoidWithAntiDistribTerm2
          n
          A
      +OL2 :
        OpInvolutiveRingoidWithAntiDistribTerm2
          n
          A ->
        OpInvolutiveRingoidWithAntiDistribTerm2
          n
          A ->
        OpInvolutiveRingoidWithAntiDistribTerm2
          n
          A
      primOL2 :
        OpInvolutiveRingoidWithAntiDistribTerm2
          n
          A ->
        OpInvolutiveRingoidWithAntiDistribTerm2
          n
          A
  
  module InvolutiveSemigroup where
    record InvolutiveSemigroup
      (A : Set) : Set where
      constructor InvolutiveSemigroupC
      field
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        prim : A -> A
        involutive_prim :
          (x : A) -> prim (prim x) == x
        antidis_prim_op :
          (x : A) (y : A) ->
          prim (op x y) ==
            op (prim y) (prim x)
    record InvolutiveSemigroupSig
      (AS : Set) : Set where
      constructor InvolutiveSemigroupSigSigC
      field
        opS : AS -> AS -> AS
        primS : AS -> AS
    record InvolutiveSemigroupProd
      (AP : Set) : Set where
      constructor InvolutiveSemigroupProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        involutive_primP :
          (xP : Prod AP AP) ->
          primP (primP xP) == xP
        antidis_prim_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (opP xP yP) ==
            opP (primP yP) (primP xP)
    record InvolutiveSemigroupHom
      (A1 : Set) (A2 : Set)
      (In1 : InvolutiveSemigroup A1)
      (In2 : InvolutiveSemigroup A2) :
      Set where
      constructor InvolutiveSemigroupHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op In1 x1 x2) ==
            op In2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A1) ->
          hom (prim In1 x1) ==
            prim In2 (hom x1)
    record InvolutiveSemigroupRelInterp
      (A1 : Set) (A2 : Set)
      (In1 : InvolutiveSemigroup A1)
      (In2 : InvolutiveSemigroup A2) :
      Set where
      constructor InvolutiveSemigroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op In1 x1 x2)
            (op In2 y1 y2)
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim In1 x1)
            (prim In2 y1)
    data InvolutiveSemigroupTerm
      : Set where
      opL :
        InvolutiveSemigroupTerm ->
        InvolutiveSemigroupTerm ->
        InvolutiveSemigroupTerm
      primL :
        InvolutiveSemigroupTerm ->
        InvolutiveSemigroupTerm
    data ClInvolutiveSemigroupTerm
      (A : Set) : Set where
      sing :
        A -> ClInvolutiveSemigroupTerm A
      opCl :
        ClInvolutiveSemigroupTerm A ->
        ClInvolutiveSemigroupTerm A ->
        ClInvolutiveSemigroupTerm A
      primCl :
        ClInvolutiveSemigroupTerm A ->
        ClInvolutiveSemigroupTerm A
    data OpInvolutiveSemigroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpInvolutiveSemigroupTerm n
      opOL :
        OpInvolutiveSemigroupTerm n ->
        OpInvolutiveSemigroupTerm n ->
        OpInvolutiveSemigroupTerm n
      primOL :
        OpInvolutiveSemigroupTerm n ->
        OpInvolutiveSemigroupTerm n
    data OpInvolutiveSemigroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpInvolutiveSemigroupTerm2 n A
      sing2 :
        A ->
        OpInvolutiveSemigroupTerm2 n A
      opOL2 :
        OpInvolutiveSemigroupTerm2 n
          A ->
        OpInvolutiveSemigroupTerm2 n
          A ->
        OpInvolutiveSemigroupTerm2 n A
      primOL2 :
        OpInvolutiveSemigroupTerm2 n
          A ->
        OpInvolutiveSemigroupTerm2 n A
  
  module JacobianIdentity where
    record JacobianIdentity
      (A : Set) : Set where
      constructor JacobianIdentityC
      field
        0 : A
        + : A -> A -> A
        * : A -> A -> A
        jacobian_*_+ :
          (x : A) (y : A) (z : A) ->
          +
            (+ (* x (* y z)) (* y (* z x)))
            (* z (* x y)) == 0
    record JacobianIdentitySig
      (AS : Set) : Set where
      constructor JacobianIdentitySigSigC
      field
        0S : AS
        +S : AS -> AS -> AS
        *S : AS -> AS -> AS
    record JacobianIdentityProd
      (AP : Set) : Set where
      constructor JacobianIdentityProdC
      field
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        jacobian_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P
            (+P (*P xP (*P yP zP))
               (*P yP (*P zP xP)))
            (*P zP (*P xP yP)) == 0P
    record JacobianIdentityHom
      (A1 : Set) (A2 : Set)
      (Ja1 : JacobianIdentity A1)
      (Ja2 : JacobianIdentity A2) :
      Set where
      constructor JacobianIdentityHomC
      field
        hom : A1 -> A2
        pres-0 : hom (0 Ja1) == 0 Ja2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ja1 x1 x2) ==
            + Ja2 (hom x1) (hom x2)
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Ja1 x1 x2) ==
            * Ja2 (hom x1) (hom x2)
    record JacobianIdentityRelInterp
      (A1 : Set) (A2 : Set)
      (Ja1 : JacobianIdentity A1)
      (Ja2 : JacobianIdentity A2) :
      Set where
      constructor JacobianIdentityRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0 :
          interp (0 Ja1) (0 Ja2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ja1 x1 x2)
            (+ Ja2 y1 y2)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Ja1 x1 x2)
            (* Ja2 y1 y2)
    data JacobianIdentityTerm
      : Set where
      0L : JacobianIdentityTerm
      +L :
        JacobianIdentityTerm ->
        JacobianIdentityTerm ->
        JacobianIdentityTerm
      *L :
        JacobianIdentityTerm ->
        JacobianIdentityTerm ->
        JacobianIdentityTerm
    data ClJacobianIdentityTerm
      (A : Set) : Set where
      sing :
        A -> ClJacobianIdentityTerm A
      0Cl : ClJacobianIdentityTerm A
      +Cl :
        ClJacobianIdentityTerm A ->
        ClJacobianIdentityTerm A ->
        ClJacobianIdentityTerm A
      *Cl :
        ClJacobianIdentityTerm A ->
        ClJacobianIdentityTerm A ->
        ClJacobianIdentityTerm A
    data OpJacobianIdentityTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpJacobianIdentityTerm n
      0OL : OpJacobianIdentityTerm n
      +OL :
        OpJacobianIdentityTerm n ->
        OpJacobianIdentityTerm n ->
        OpJacobianIdentityTerm n
      *OL :
        OpJacobianIdentityTerm n ->
        OpJacobianIdentityTerm n ->
        OpJacobianIdentityTerm n
    data OpJacobianIdentityTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpJacobianIdentityTerm2 n A
      sing2 :
        A -> OpJacobianIdentityTerm2 n A
      0OL2 :
        OpJacobianIdentityTerm2 n A
      +OL2 :
        OpJacobianIdentityTerm2 n A ->
        OpJacobianIdentityTerm2 n A ->
        OpJacobianIdentityTerm2 n A
      *OL2 :
        OpJacobianIdentityTerm2 n A ->
        OpJacobianIdentityTerm2 n A ->
        OpJacobianIdentityTerm2 n A
  
  module JoinSemilattice where
    record JoinSemilattice
      (A : Set) : Set where
      constructor JoinSemilatticeC
      field
        + : A -> A -> A
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        idempotent_+ :
          (x : A) -> + x x == x
    record JoinSemilatticeSig
      (AS : Set) : Set where
      constructor JoinSemilatticeSigSigC
      field
        +S : AS -> AS -> AS
    record JoinSemilatticeProd
      (AP : Set) : Set where
      constructor JoinSemilatticeProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
    record JoinSemilatticeHom
      (A1 : Set) (A2 : Set)
      (Jo1 : JoinSemilattice A1)
      (Jo2 : JoinSemilattice A2) :
      Set where
      constructor JoinSemilatticeHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Jo1 x1 x2) ==
            + Jo2 (hom x1) (hom x2)
    record JoinSemilatticeRelInterp
      (A1 : Set) (A2 : Set)
      (Jo1 : JoinSemilattice A1)
      (Jo2 : JoinSemilattice A2) :
      Set where
      constructor JoinSemilatticeRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Jo1 x1 x2)
            (+ Jo2 y1 y2)
    data JoinSemilatticeTerm
      : Set where
      +L :
        JoinSemilatticeTerm ->
        JoinSemilatticeTerm ->
        JoinSemilatticeTerm
    data ClJoinSemilatticeTerm
      (A : Set) : Set where
      sing :
        A -> ClJoinSemilatticeTerm A
      +Cl :
        ClJoinSemilatticeTerm A ->
        ClJoinSemilatticeTerm A ->
        ClJoinSemilatticeTerm A
    data OpJoinSemilatticeTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpJoinSemilatticeTerm n
      +OL :
        OpJoinSemilatticeTerm n ->
        OpJoinSemilatticeTerm n ->
        OpJoinSemilatticeTerm n
    data OpJoinSemilatticeTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpJoinSemilatticeTerm2 n A
      sing2 :
        A -> OpJoinSemilatticeTerm2 n A
      +OL2 :
        OpJoinSemilatticeTerm2 n A ->
        OpJoinSemilatticeTerm2 n A ->
        OpJoinSemilatticeTerm2 n A
  
  module JoinSemilattice_RingoidSig where
    record JoinSemilattice_RingoidSig
      (A : Set) : Set where
      constructor JoinSemilattice_RingoidSigC
      field
        + : A -> A -> A
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        idempotent_+ :
          (x : A) -> + x x == x
        * : A -> A -> A
    record JoinSemilattice_RingoidSigSig
      (AS : Set) : Set where
      constructor JoinSemilattice_RingoidSigSigSigC
      field
        +S : AS -> AS -> AS
        *S : AS -> AS -> AS
    record JoinSemilattice_RingoidSigProd
      (AP : Set) : Set where
      constructor JoinSemilattice_RingoidSigProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
    record JoinSemilattice_RingoidSigHom
      (A1 : Set) (A2 : Set)
      (Jo1 : JoinSemilattice_RingoidSig
         A1)
      (Jo2 : JoinSemilattice_RingoidSig
         A2) : Set where
      constructor JoinSemilattice_RingoidSigHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Jo1 x1 x2) ==
            + Jo2 (hom x1) (hom x2)
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Jo1 x1 x2) ==
            * Jo2 (hom x1) (hom x2)
    record JoinSemilattice_RingoidSigRelInterp
      (A1 : Set) (A2 : Set)
      (Jo1 : JoinSemilattice_RingoidSig
         A1)
      (Jo2 : JoinSemilattice_RingoidSig
         A2) : Set where
      constructor JoinSemilattice_RingoidSigRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Jo1 x1 x2)
            (+ Jo2 y1 y2)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Jo1 x1 x2)
            (* Jo2 y1 y2)
    data JoinSemilattice_RingoidSigTerm
      : Set where
      +L :
        JoinSemilattice_RingoidSigTerm ->
        JoinSemilattice_RingoidSigTerm ->
        JoinSemilattice_RingoidSigTerm
      *L :
        JoinSemilattice_RingoidSigTerm ->
        JoinSemilattice_RingoidSigTerm ->
        JoinSemilattice_RingoidSigTerm
    data ClJoinSemilattice_RingoidSigTerm
      (A : Set) : Set where
      sing :
        A ->
        ClJoinSemilattice_RingoidSigTerm
          A
      +Cl :
        ClJoinSemilattice_RingoidSigTerm
          A ->
        ClJoinSemilattice_RingoidSigTerm
          A ->
        ClJoinSemilattice_RingoidSigTerm
          A
      *Cl :
        ClJoinSemilattice_RingoidSigTerm
          A ->
        ClJoinSemilattice_RingoidSigTerm
          A ->
        ClJoinSemilattice_RingoidSigTerm
          A
    data OpJoinSemilattice_RingoidSigTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpJoinSemilattice_RingoidSigTerm
          n
      +OL :
        OpJoinSemilattice_RingoidSigTerm
          n ->
        OpJoinSemilattice_RingoidSigTerm
          n ->
        OpJoinSemilattice_RingoidSigTerm
          n
      *OL :
        OpJoinSemilattice_RingoidSigTerm
          n ->
        OpJoinSemilattice_RingoidSigTerm
          n ->
        OpJoinSemilattice_RingoidSigTerm
          n
    data OpJoinSemilattice_RingoidSigTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpJoinSemilattice_RingoidSigTerm2
          n
          A
      sing2 :
        A ->
        OpJoinSemilattice_RingoidSigTerm2
          n
          A
      +OL2 :
        OpJoinSemilattice_RingoidSigTerm2
          n
          A ->
        OpJoinSemilattice_RingoidSigTerm2
          n
          A ->
        OpJoinSemilattice_RingoidSigTerm2
          n
          A
      *OL2 :
        OpJoinSemilattice_RingoidSigTerm2
          n
          A ->
        OpJoinSemilattice_RingoidSigTerm2
          n
          A ->
        OpJoinSemilattice_RingoidSigTerm2
          n
          A
  
  module Kei where
    record Kei (A : Set) : Set where
      constructor KeiC
      field
        |> : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        idempotent_|> :
          (x : A) -> |> x x == x
        rightSelfInverse_|> :
          (x : A) (y : A) ->
          |> (|> x y) y == x
    record KeiSig
      (AS : Set) : Set where
      constructor KeiSigSigC
      field
        |>S : AS -> AS -> AS
    record KeiProd
      (AP : Set) : Set where
      constructor KeiProdC
      field
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          |>P xP (|>P yP zP) ==
            |>P (|>P xP yP) (|>P xP zP)
        idempotent_|>P :
          (xP : Prod AP AP) ->
          |>P xP xP == xP
        rightSelfInverse_|>P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          |>P (|>P xP yP) yP == xP
    record KeiHom
      (A1 : Set) (A2 : Set)
      (Ke1 : Kei A1)
      (Ke2 : Kei A2) : Set where
      constructor KeiHomC
      field
        hom : A1 -> A2
        pres-|> :
          (x1 : A1) (x2 : A1) ->
          hom (|> Ke1 x1 x2) ==
            |> Ke2 (hom x1) (hom x2)
    record KeiRelInterp
      (A1 : Set) (A2 : Set)
      (Ke1 : Kei A1)
      (Ke2 : Kei A2) : Set where
      constructor KeiRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-|> :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (|> Ke1 x1 x2)
            (|> Ke2 y1 y2)
    data KeiTerm : Set where
      |>L :
        KeiTerm -> KeiTerm -> KeiTerm
    data ClKeiTerm
      (A : Set) : Set where
      sing : A -> ClKeiTerm A
      |>Cl :
        ClKeiTerm A ->
        ClKeiTerm A -> ClKeiTerm A
    data OpKeiTerm
      (n : Nat) : Set where
      v : Fin n -> OpKeiTerm n
      |>OL :
        OpKeiTerm n ->
        OpKeiTerm n -> OpKeiTerm n
    data OpKeiTerm2
      (n : Nat) (A : Set) : Set where
      v2 : Fin n -> OpKeiTerm2 n A
      sing2 : A -> OpKeiTerm2 n A
      |>OL2 :
        OpKeiTerm2 n A ->
        OpKeiTerm2 n A -> OpKeiTerm2 n A
  
  module Lattice where
    record Lattice
      (A : Set) : Set where
      constructor LatticeC
      field
        * : A -> A -> A
        + : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        idempotent_* :
          (x : A) -> * x x == x
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        idempotent_+ :
          (x : A) -> + x x == x
        leftAbsorp_*_+ :
          (x : A) (y : A) ->
          * x (+ x y) == x
        leftAbsorp_+_* :
          (x : A) (y : A) ->
          + x (* x y) == x
    record LatticeSig
      (AS : Set) : Set where
      constructor LatticeSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record LatticeProd
      (AP : Set) : Set where
      constructor LatticeProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
        leftAbsorp_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP (+P xP yP) == xP
        leftAbsorp_+_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP (*P xP yP) == xP
    record LatticeHom
      (A1 : Set) (A2 : Set)
      (La1 : Lattice A1)
      (La2 : Lattice A2) : Set where
      constructor LatticeHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* La1 x1 x2) ==
            * La2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ La1 x1 x2) ==
            + La2 (hom x1) (hom x2)
    record LatticeRelInterp
      (A1 : Set) (A2 : Set)
      (La1 : Lattice A1)
      (La2 : Lattice A2) : Set where
      constructor LatticeRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* La1 x1 x2)
            (* La2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ La1 x1 x2)
            (+ La2 y1 y2)
    data LatticeTerm : Set where
      *L :
        LatticeTerm ->
        LatticeTerm -> LatticeTerm
      +L :
        LatticeTerm ->
        LatticeTerm -> LatticeTerm
    data ClLatticeTerm
      (A : Set) : Set where
      sing : A -> ClLatticeTerm A
      *Cl :
        ClLatticeTerm A ->
        ClLatticeTerm A ->
        ClLatticeTerm A
      +Cl :
        ClLatticeTerm A ->
        ClLatticeTerm A ->
        ClLatticeTerm A
    data OpLatticeTerm
      (n : Nat) : Set where
      v : Fin n -> OpLatticeTerm n
      *OL :
        OpLatticeTerm n ->
        OpLatticeTerm n ->
        OpLatticeTerm n
      +OL :
        OpLatticeTerm n ->
        OpLatticeTerm n ->
        OpLatticeTerm n
    data OpLatticeTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpLatticeTerm2 n A
      sing2 : A -> OpLatticeTerm2 n A
      *OL2 :
        OpLatticeTerm2 n A ->
        OpLatticeTerm2 n A ->
        OpLatticeTerm2 n A
      +OL2 :
        OpLatticeTerm2 n A ->
        OpLatticeTerm2 n A ->
        OpLatticeTerm2 n A
  
  module Left0 where
    record Left0
      (A : Set) : Set where
      constructor Left0C
      field
        0 : A
        op : A -> A -> A
        leftZero_op_0 :
          (x : A) -> op 0 x == 0
    record Left0Sig
      (AS : Set) : Set where
      constructor Left0SigSigC
      field
        0S : AS
        opS : AS -> AS -> AS
    record Left0Prod
      (AP : Set) : Set where
      constructor Left0ProdC
      field
        0P : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftZero_op_0P :
          (xP : Prod AP AP) ->
          opP 0P xP == 0P
    record Left0Hom
      (A1 : Set) (A2 : Set)
      (Le1 : Left0 A1)
      (Le2 : Left0 A2) : Set where
      constructor Left0HomC
      field
        hom : A1 -> A2
        pres-0 : hom (0 Le1) == 0 Le2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Le1 x1 x2) ==
            op Le2 (hom x1) (hom x2)
    record Left0RelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : Left0 A1)
      (Le2 : Left0 A2) : Set where
      constructor Left0RelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0 :
          interp (0 Le1) (0 Le2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Le1 x1 x2)
            (op Le2 y1 y2)
    data Left0LTerm : Set where
      0L : Left0LTerm
      opL :
        Left0LTerm ->
        Left0LTerm -> Left0LTerm
    data ClLeft0ClTerm
      (A : Set) : Set where
      sing : A -> ClLeft0ClTerm A
      0Cl : ClLeft0ClTerm A
      opCl :
        ClLeft0ClTerm A ->
        ClLeft0ClTerm A ->
        ClLeft0ClTerm A
    data OpLeft0OLTerm
      (n : Nat) : Set where
      v : Fin n -> OpLeft0OLTerm n
      0OL : OpLeft0OLTerm n
      opOL :
        OpLeft0OLTerm n ->
        OpLeft0OLTerm n ->
        OpLeft0OLTerm n
    data OpLeft0OL2Term2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpLeft0OL2Term2 n A
      sing2 : A -> OpLeft0OL2Term2 n A
      0OL2 : OpLeft0OL2Term2 n A
      opOL2 :
        OpLeft0OL2Term2 n A ->
        OpLeft0OL2Term2 n A ->
        OpLeft0OL2Term2 n A
  
  module LeftAbsorption where
    record LeftAbsorption
      (A : Set) : Set where
      constructor LeftAbsorptionC
      field
        * : A -> A -> A
        + : A -> A -> A
        leftAbsorp_*_+ :
          (x : A) (y : A) ->
          * x (+ x y) == x
    record LeftAbsorptionSig
      (AS : Set) : Set where
      constructor LeftAbsorptionSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record LeftAbsorptionProd
      (AP : Set) : Set where
      constructor LeftAbsorptionProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftAbsorp_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP (+P xP yP) == xP
    record LeftAbsorptionHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftAbsorption A1)
      (Le2 : LeftAbsorption A2) :
      Set where
      constructor LeftAbsorptionHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Le1 x1 x2) ==
            * Le2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Le1 x1 x2) ==
            + Le2 (hom x1) (hom x2)
    record LeftAbsorptionRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftAbsorption A1)
      (Le2 : LeftAbsorption A2) :
      Set where
      constructor LeftAbsorptionRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Le1 x1 x2)
            (* Le2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Le1 x1 x2)
            (+ Le2 y1 y2)
    data LeftAbsorptionTerm
      : Set where
      *L :
        LeftAbsorptionTerm ->
        LeftAbsorptionTerm ->
        LeftAbsorptionTerm
      +L :
        LeftAbsorptionTerm ->
        LeftAbsorptionTerm ->
        LeftAbsorptionTerm
    data ClLeftAbsorptionTerm
      (A : Set) : Set where
      sing :
        A -> ClLeftAbsorptionTerm A
      *Cl :
        ClLeftAbsorptionTerm A ->
        ClLeftAbsorptionTerm A ->
        ClLeftAbsorptionTerm A
      +Cl :
        ClLeftAbsorptionTerm A ->
        ClLeftAbsorptionTerm A ->
        ClLeftAbsorptionTerm A
    data OpLeftAbsorptionTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpLeftAbsorptionTerm n
      *OL :
        OpLeftAbsorptionTerm n ->
        OpLeftAbsorptionTerm n ->
        OpLeftAbsorptionTerm n
      +OL :
        OpLeftAbsorptionTerm n ->
        OpLeftAbsorptionTerm n ->
        OpLeftAbsorptionTerm n
    data OpLeftAbsorptionTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpLeftAbsorptionTerm2 n A
      sing2 :
        A -> OpLeftAbsorptionTerm2 n A
      *OL2 :
        OpLeftAbsorptionTerm2 n A ->
        OpLeftAbsorptionTerm2 n A ->
        OpLeftAbsorptionTerm2 n A
      +OL2 :
        OpLeftAbsorptionTerm2 n A ->
        OpLeftAbsorptionTerm2 n A ->
        OpLeftAbsorptionTerm2 n A
  
  module LeftAbsorptionOp where
    record LeftAbsorptionOp
      (A : Set) : Set where
      constructor LeftAbsorptionOpC
      field
        * : A -> A -> A
        + : A -> A -> A
        leftAbsorp_+_* :
          (x : A) (y : A) ->
          + x (* x y) == x
    record LeftAbsorptionOpSig
      (AS : Set) : Set where
      constructor LeftAbsorptionOpSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record LeftAbsorptionOpProd
      (AP : Set) : Set where
      constructor LeftAbsorptionOpProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftAbsorp_+_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP (*P xP yP) == xP
    record LeftAbsorptionOpHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftAbsorptionOp A1)
      (Le2 : LeftAbsorptionOp A2) :
      Set where
      constructor LeftAbsorptionOpHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Le1 x1 x2) ==
            * Le2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Le1 x1 x2) ==
            + Le2 (hom x1) (hom x2)
    record LeftAbsorptionOpRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftAbsorptionOp A1)
      (Le2 : LeftAbsorptionOp A2) :
      Set where
      constructor LeftAbsorptionOpRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Le1 x1 x2)
            (* Le2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Le1 x1 x2)
            (+ Le2 y1 y2)
    data LeftAbsorptionOpTerm
      : Set where
      *L :
        LeftAbsorptionOpTerm ->
        LeftAbsorptionOpTerm ->
        LeftAbsorptionOpTerm
      +L :
        LeftAbsorptionOpTerm ->
        LeftAbsorptionOpTerm ->
        LeftAbsorptionOpTerm
    data ClLeftAbsorptionOpTerm
      (A : Set) : Set where
      sing :
        A -> ClLeftAbsorptionOpTerm A
      *Cl :
        ClLeftAbsorptionOpTerm A ->
        ClLeftAbsorptionOpTerm A ->
        ClLeftAbsorptionOpTerm A
      +Cl :
        ClLeftAbsorptionOpTerm A ->
        ClLeftAbsorptionOpTerm A ->
        ClLeftAbsorptionOpTerm A
    data OpLeftAbsorptionOpTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpLeftAbsorptionOpTerm n
      *OL :
        OpLeftAbsorptionOpTerm n ->
        OpLeftAbsorptionOpTerm n ->
        OpLeftAbsorptionOpTerm n
      +OL :
        OpLeftAbsorptionOpTerm n ->
        OpLeftAbsorptionOpTerm n ->
        OpLeftAbsorptionOpTerm n
    data OpLeftAbsorptionOpTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpLeftAbsorptionOpTerm2 n A
      sing2 :
        A -> OpLeftAbsorptionOpTerm2 n A
      *OL2 :
        OpLeftAbsorptionOpTerm2 n A ->
        OpLeftAbsorptionOpTerm2 n A ->
        OpLeftAbsorptionOpTerm2 n A
      +OL2 :
        OpLeftAbsorptionOpTerm2 n A ->
        OpLeftAbsorptionOpTerm2 n A ->
        OpLeftAbsorptionOpTerm2 n A
  
  module LeftBiMagma where
    record LeftBiMagma
      (A : Set) : Set where
      constructor LeftBiMagmaC
      field
        op : A -> A -> A
        linv : A -> A -> A
    record LeftBiMagmaSig
      (AS : Set) : Set where
      constructor LeftBiMagmaSigSigC
      field
        opS : AS -> AS -> AS
        linvS : AS -> AS -> AS
    record LeftBiMagmaProd
      (AP : Set) : Set where
      constructor LeftBiMagmaProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        linvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record LeftBiMagmaHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftBiMagma A1)
      (Le2 : LeftBiMagma A2) :
      Set where
      constructor LeftBiMagmaHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Le1 x1 x2) ==
            op Le2 (hom x1) (hom x2)
        pres-linv :
          (x1 : A1) (x2 : A1) ->
          hom (linv Le1 x1 x2) ==
            linv Le2 (hom x1) (hom x2)
    record LeftBiMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftBiMagma A1)
      (Le2 : LeftBiMagma A2) :
      Set where
      constructor LeftBiMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Le1 x1 x2)
            (op Le2 y1 y2)
        interp-linv :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (linv Le1 x1 x2)
            (linv Le2 y1 y2)
    data LeftBiMagmaTerm : Set where
      opL :
        LeftBiMagmaTerm ->
        LeftBiMagmaTerm ->
        LeftBiMagmaTerm
      linvL :
        LeftBiMagmaTerm ->
        LeftBiMagmaTerm ->
        LeftBiMagmaTerm
    data ClLeftBiMagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClLeftBiMagmaTerm A
      opCl :
        ClLeftBiMagmaTerm A ->
        ClLeftBiMagmaTerm A ->
        ClLeftBiMagmaTerm A
      linvCl :
        ClLeftBiMagmaTerm A ->
        ClLeftBiMagmaTerm A ->
        ClLeftBiMagmaTerm A
    data OpLeftBiMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpLeftBiMagmaTerm n
      opOL :
        OpLeftBiMagmaTerm n ->
        OpLeftBiMagmaTerm n ->
        OpLeftBiMagmaTerm n
      linvOL :
        OpLeftBiMagmaTerm n ->
        OpLeftBiMagmaTerm n ->
        OpLeftBiMagmaTerm n
    data OpLeftBiMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpLeftBiMagmaTerm2 n A
      sing2 :
        A -> OpLeftBiMagmaTerm2 n A
      opOL2 :
        OpLeftBiMagmaTerm2 n A ->
        OpLeftBiMagmaTerm2 n A ->
        OpLeftBiMagmaTerm2 n A
      linvOL2 :
        OpLeftBiMagmaTerm2 n A ->
        OpLeftBiMagmaTerm2 n A ->
        OpLeftBiMagmaTerm2 n A
  
  module LeftBinaryInverse where
    record LeftBinaryInverse
      (A : Set) : Set where
      constructor LeftBinaryInverseC
      field
        |> : A -> A -> A
        <| : A -> A -> A
        leftInverse :
          (x : A) (y : A) ->
          <| (|> x y) x == y
    record LeftBinaryInverseSig
      (AS : Set) : Set where
      constructor LeftBinaryInverseSigSigC
      field
        |>S : AS -> AS -> AS
        <|S : AS -> AS -> AS
    record LeftBinaryInverseProd
      (AP : Set) : Set where
      constructor LeftBinaryInverseProdC
      field
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftInverseP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          <|P (|>P xP yP) xP == yP
    record LeftBinaryInverseHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftBinaryInverse A1)
      (Le2 : LeftBinaryInverse A2) :
      Set where
      constructor LeftBinaryInverseHomC
      field
        hom : A1 -> A2
        pres-|> :
          (x1 : A1) (x2 : A1) ->
          hom (|> Le1 x1 x2) ==
            |> Le2 (hom x1) (hom x2)
        pres-<| :
          (x1 : A1) (x2 : A1) ->
          hom (<| Le1 x1 x2) ==
            <| Le2 (hom x1) (hom x2)
    record LeftBinaryInverseRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftBinaryInverse A1)
      (Le2 : LeftBinaryInverse A2) :
      Set where
      constructor LeftBinaryInverseRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-|> :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (|> Le1 x1 x2)
            (|> Le2 y1 y2)
        interp-<| :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (<| Le1 x1 x2)
            (<| Le2 y1 y2)
    data LeftBinaryInverseTerm
      : Set where
      |>L :
        LeftBinaryInverseTerm ->
        LeftBinaryInverseTerm ->
        LeftBinaryInverseTerm
      <|L :
        LeftBinaryInverseTerm ->
        LeftBinaryInverseTerm ->
        LeftBinaryInverseTerm
    data ClLeftBinaryInverseTerm
      (A : Set) : Set where
      sing :
        A -> ClLeftBinaryInverseTerm A
      |>Cl :
        ClLeftBinaryInverseTerm A ->
        ClLeftBinaryInverseTerm A ->
        ClLeftBinaryInverseTerm A
      <|Cl :
        ClLeftBinaryInverseTerm A ->
        ClLeftBinaryInverseTerm A ->
        ClLeftBinaryInverseTerm A
    data OpLeftBinaryInverseTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpLeftBinaryInverseTerm n
      |>OL :
        OpLeftBinaryInverseTerm n ->
        OpLeftBinaryInverseTerm n ->
        OpLeftBinaryInverseTerm n
      <|OL :
        OpLeftBinaryInverseTerm n ->
        OpLeftBinaryInverseTerm n ->
        OpLeftBinaryInverseTerm n
    data OpLeftBinaryInverseTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpLeftBinaryInverseTerm2 n A
      sing2 :
        A ->
        OpLeftBinaryInverseTerm2 n A
      |>OL2 :
        OpLeftBinaryInverseTerm2 n A ->
        OpLeftBinaryInverseTerm2 n A ->
        OpLeftBinaryInverseTerm2 n A
      <|OL2 :
        OpLeftBinaryInverseTerm2 n A ->
        OpLeftBinaryInverseTerm2 n A ->
        OpLeftBinaryInverseTerm2 n A
  
  module LeftCancellative where
    record LeftCancellative
      (A : Set) : Set where
      constructor LeftCancellativeC
      field
        op : A -> A -> A
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
    record LeftCancellativeSig
      (AS : Set) : Set where
      constructor LeftCancellativeSigSigC
      field
        opS : AS -> AS -> AS
        linvS : AS -> AS -> AS
    record LeftCancellativeProd
      (AP : Set) : Set where
      constructor LeftCancellativeProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        linvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (linvP xP yP) == yP
    record LeftCancellativeHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftCancellative A1)
      (Le2 : LeftCancellative A2) :
      Set where
      constructor LeftCancellativeHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Le1 x1 x2) ==
            op Le2 (hom x1) (hom x2)
        pres-linv :
          (x1 : A1) (x2 : A1) ->
          hom (linv Le1 x1 x2) ==
            linv Le2 (hom x1) (hom x2)
    record LeftCancellativeRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftCancellative A1)
      (Le2 : LeftCancellative A2) :
      Set where
      constructor LeftCancellativeRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Le1 x1 x2)
            (op Le2 y1 y2)
        interp-linv :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (linv Le1 x1 x2)
            (linv Le2 y1 y2)
    data LeftCancellativeTerm
      : Set where
      opL :
        LeftCancellativeTerm ->
        LeftCancellativeTerm ->
        LeftCancellativeTerm
      linvL :
        LeftCancellativeTerm ->
        LeftCancellativeTerm ->
        LeftCancellativeTerm
    data ClLeftCancellativeTerm
      (A : Set) : Set where
      sing :
        A -> ClLeftCancellativeTerm A
      opCl :
        ClLeftCancellativeTerm A ->
        ClLeftCancellativeTerm A ->
        ClLeftCancellativeTerm A
      linvCl :
        ClLeftCancellativeTerm A ->
        ClLeftCancellativeTerm A ->
        ClLeftCancellativeTerm A
    data OpLeftCancellativeTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpLeftCancellativeTerm n
      opOL :
        OpLeftCancellativeTerm n ->
        OpLeftCancellativeTerm n ->
        OpLeftCancellativeTerm n
      linvOL :
        OpLeftCancellativeTerm n ->
        OpLeftCancellativeTerm n ->
        OpLeftCancellativeTerm n
    data OpLeftCancellativeTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpLeftCancellativeTerm2 n A
      sing2 :
        A -> OpLeftCancellativeTerm2 n A
      opOL2 :
        OpLeftCancellativeTerm2 n A ->
        OpLeftCancellativeTerm2 n A ->
        OpLeftCancellativeTerm2 n A
      linvOL2 :
        OpLeftCancellativeTerm2 n A ->
        OpLeftCancellativeTerm2 n A ->
        OpLeftCancellativeTerm2 n A
  
  module LeftCancellativeMagma where
    record LeftCancellativeMagma
      (A : Set) : Set where
      constructor LeftCancellativeMagmaC
      field
        op : A -> A -> A
        leftCancellative :
          (x : A) (y : A) (z : A) ->
          op z x == op z y -> x == y
    record LeftCancellativeMagmaSig
      (AS : Set) : Set where
      constructor LeftCancellativeMagmaSigSigC
      field
        opS : AS -> AS -> AS
    record LeftCancellativeMagmaProd
      (AP : Set) : Set where
      constructor LeftCancellativeMagmaProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP zP xP == opP zP yP ->
          xP == yP
    record LeftCancellativeMagmaHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftCancellativeMagma A1)
      (Le2 : LeftCancellativeMagma
         A2) : Set where
      constructor LeftCancellativeMagmaHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Le1 x1 x2) ==
            op Le2 (hom x1) (hom x2)
    record LeftCancellativeMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftCancellativeMagma A1)
      (Le2 : LeftCancellativeMagma
         A2) : Set where
      constructor LeftCancellativeMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Le1 x1 x2)
            (op Le2 y1 y2)
    data LeftCancellativeMagmaTerm
      : Set where
      opL :
        LeftCancellativeMagmaTerm ->
        LeftCancellativeMagmaTerm ->
        LeftCancellativeMagmaTerm
    data ClLeftCancellativeMagmaTerm
      (A : Set) : Set where
      sing :
        A ->
        ClLeftCancellativeMagmaTerm A
      opCl :
        ClLeftCancellativeMagmaTerm A ->
        ClLeftCancellativeMagmaTerm A ->
        ClLeftCancellativeMagmaTerm A
    data OpLeftCancellativeMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpLeftCancellativeMagmaTerm n
      opOL :
        OpLeftCancellativeMagmaTerm n ->
        OpLeftCancellativeMagmaTerm n ->
        OpLeftCancellativeMagmaTerm n
    data OpLeftCancellativeMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpLeftCancellativeMagmaTerm2 n A
      sing2 :
        A ->
        OpLeftCancellativeMagmaTerm2 n A
      opOL2 :
        OpLeftCancellativeMagmaTerm2 n
          A ->
        OpLeftCancellativeMagmaTerm2 n
          A ->
        OpLeftCancellativeMagmaTerm2 n A
  
  module LeftCancellativeOp where
    record LeftCancellativeOp
      (A : Set) : Set where
      constructor LeftCancellativeOpC
      field
        op : A -> A -> A
        linv : A -> A -> A
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
    record LeftCancellativeOpSig
      (AS : Set) : Set where
      constructor LeftCancellativeOpSigSigC
      field
        opS : AS -> AS -> AS
        linvS : AS -> AS -> AS
    record LeftCancellativeOpProd
      (AP : Set) : Set where
      constructor LeftCancellativeOpProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        linvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lefCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          linvP xP (opP xP yP) == yP
    record LeftCancellativeOpHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftCancellativeOp A1)
      (Le2 : LeftCancellativeOp A2) :
      Set where
      constructor LeftCancellativeOpHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Le1 x1 x2) ==
            op Le2 (hom x1) (hom x2)
        pres-linv :
          (x1 : A1) (x2 : A1) ->
          hom (linv Le1 x1 x2) ==
            linv Le2 (hom x1) (hom x2)
    record LeftCancellativeOpRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftCancellativeOp A1)
      (Le2 : LeftCancellativeOp A2) :
      Set where
      constructor LeftCancellativeOpRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Le1 x1 x2)
            (op Le2 y1 y2)
        interp-linv :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (linv Le1 x1 x2)
            (linv Le2 y1 y2)
    data LeftCancellativeOpTerm
      : Set where
      opL :
        LeftCancellativeOpTerm ->
        LeftCancellativeOpTerm ->
        LeftCancellativeOpTerm
      linvL :
        LeftCancellativeOpTerm ->
        LeftCancellativeOpTerm ->
        LeftCancellativeOpTerm
    data ClLeftCancellativeOpTerm
      (A : Set) : Set where
      sing :
        A -> ClLeftCancellativeOpTerm A
      opCl :
        ClLeftCancellativeOpTerm A ->
        ClLeftCancellativeOpTerm A ->
        ClLeftCancellativeOpTerm A
      linvCl :
        ClLeftCancellativeOpTerm A ->
        ClLeftCancellativeOpTerm A ->
        ClLeftCancellativeOpTerm A
    data OpLeftCancellativeOpTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpLeftCancellativeOpTerm n
      opOL :
        OpLeftCancellativeOpTerm n ->
        OpLeftCancellativeOpTerm n ->
        OpLeftCancellativeOpTerm n
      linvOL :
        OpLeftCancellativeOpTerm n ->
        OpLeftCancellativeOpTerm n ->
        OpLeftCancellativeOpTerm n
    data OpLeftCancellativeOpTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpLeftCancellativeOpTerm2 n A
      sing2 :
        A ->
        OpLeftCancellativeOpTerm2 n A
      opOL2 :
        OpLeftCancellativeOpTerm2 n A ->
        OpLeftCancellativeOpTerm2 n A ->
        OpLeftCancellativeOpTerm2 n A
      linvOL2 :
        OpLeftCancellativeOpTerm2 n A ->
        OpLeftCancellativeOpTerm2 n A ->
        OpLeftCancellativeOpTerm2 n A
  
  module LeftCancellativeSemigroup where
    record LeftCancellativeSemigroup
      (A : Set) : Set where
      constructor LeftCancellativeSemigroupC
      field
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        leftCancellative :
          (x : A) (y : A) (z : A) ->
          op z x == op z y -> x == y
    record LeftCancellativeSemigroupSig
      (AS : Set) : Set where
      constructor LeftCancellativeSemigroupSigSigC
      field
        opS : AS -> AS -> AS
    record LeftCancellativeSemigroupProd
      (AP : Set) : Set where
      constructor LeftCancellativeSemigroupProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        leftCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP zP xP == opP zP yP ->
          xP == yP
    record LeftCancellativeSemigroupHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftCancellativeSemigroup
         A1)
      (Le2 : LeftCancellativeSemigroup
         A2) : Set where
      constructor LeftCancellativeSemigroupHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Le1 x1 x2) ==
            op Le2 (hom x1) (hom x2)
    record LeftCancellativeSemigroupRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftCancellativeSemigroup
         A1)
      (Le2 : LeftCancellativeSemigroup
         A2) : Set where
      constructor LeftCancellativeSemigroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Le1 x1 x2)
            (op Le2 y1 y2)
    data LeftCancellativeSemigroupTerm
      : Set where
      opL :
        LeftCancellativeSemigroupTerm ->
        LeftCancellativeSemigroupTerm ->
        LeftCancellativeSemigroupTerm
    data ClLeftCancellativeSemigroupTerm
      (A : Set) : Set where
      sing :
        A ->
        ClLeftCancellativeSemigroupTerm
          A
      opCl :
        ClLeftCancellativeSemigroupTerm
          A ->
        ClLeftCancellativeSemigroupTerm
          A ->
        ClLeftCancellativeSemigroupTerm
          A
    data OpLeftCancellativeSemigroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpLeftCancellativeSemigroupTerm
          n
      opOL :
        OpLeftCancellativeSemigroupTerm
          n ->
        OpLeftCancellativeSemigroupTerm
          n ->
        OpLeftCancellativeSemigroupTerm
          n
    data OpLeftCancellativeSemigroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpLeftCancellativeSemigroupTerm2
          n
          A
      sing2 :
        A ->
        OpLeftCancellativeSemigroupTerm2
          n
          A
      opOL2 :
        OpLeftCancellativeSemigroupTerm2
          n
          A ->
        OpLeftCancellativeSemigroupTerm2
          n
          A ->
        OpLeftCancellativeSemigroupTerm2
          n
          A
  
  module LeftDistributiveMagma where
    record LeftDistributiveMagma
      (A : Set) : Set where
      constructor LeftDistributiveMagmaC
      field
        op : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          op x (op y z) ==
            op (op x y) (op x z)
    record LeftDistributiveMagmaSig
      (AS : Set) : Set where
      constructor LeftDistributiveMagmaSigSigC
      field
        opS : AS -> AS -> AS
    record LeftDistributiveMagmaProd
      (AP : Set) : Set where
      constructor LeftDistributiveMagmaProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP xP (opP yP zP) ==
            opP (opP xP yP) (opP xP zP)
    record LeftDistributiveMagmaHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftDistributiveMagma A1)
      (Le2 : LeftDistributiveMagma
         A2) : Set where
      constructor LeftDistributiveMagmaHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Le1 x1 x2) ==
            op Le2 (hom x1) (hom x2)
    record LeftDistributiveMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftDistributiveMagma A1)
      (Le2 : LeftDistributiveMagma
         A2) : Set where
      constructor LeftDistributiveMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Le1 x1 x2)
            (op Le2 y1 y2)
    data LeftDistributiveMagmaTerm
      : Set where
      opL :
        LeftDistributiveMagmaTerm ->
        LeftDistributiveMagmaTerm ->
        LeftDistributiveMagmaTerm
    data ClLeftDistributiveMagmaTerm
      (A : Set) : Set where
      sing :
        A ->
        ClLeftDistributiveMagmaTerm A
      opCl :
        ClLeftDistributiveMagmaTerm A ->
        ClLeftDistributiveMagmaTerm A ->
        ClLeftDistributiveMagmaTerm A
    data OpLeftDistributiveMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpLeftDistributiveMagmaTerm n
      opOL :
        OpLeftDistributiveMagmaTerm n ->
        OpLeftDistributiveMagmaTerm n ->
        OpLeftDistributiveMagmaTerm n
    data OpLeftDistributiveMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpLeftDistributiveMagmaTerm2 n A
      sing2 :
        A ->
        OpLeftDistributiveMagmaTerm2 n A
      opOL2 :
        OpLeftDistributiveMagmaTerm2 n
          A ->
        OpLeftDistributiveMagmaTerm2 n
          A ->
        OpLeftDistributiveMagmaTerm2 n A
  
  module LeftIdempotence where
    record LeftIdempotence
      (A : Set) : Set where
      constructor LeftIdempotenceC
      field
        |> : A -> A -> A
        idempotent_|> :
          (x : A) -> |> x x == x
    record LeftIdempotenceSig
      (AS : Set) : Set where
      constructor LeftIdempotenceSigSigC
      field
        |>S : AS -> AS -> AS
    record LeftIdempotenceProd
      (AP : Set) : Set where
      constructor LeftIdempotenceProdC
      field
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        idempotent_|>P :
          (xP : Prod AP AP) ->
          |>P xP xP == xP
    record LeftIdempotenceHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftIdempotence A1)
      (Le2 : LeftIdempotence A2) :
      Set where
      constructor LeftIdempotenceHomC
      field
        hom : A1 -> A2
        pres-|> :
          (x1 : A1) (x2 : A1) ->
          hom (|> Le1 x1 x2) ==
            |> Le2 (hom x1) (hom x2)
    record LeftIdempotenceRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftIdempotence A1)
      (Le2 : LeftIdempotence A2) :
      Set where
      constructor LeftIdempotenceRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-|> :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (|> Le1 x1 x2)
            (|> Le2 y1 y2)
    data LeftIdempotenceTerm
      : Set where
      |>L :
        LeftIdempotenceTerm ->
        LeftIdempotenceTerm ->
        LeftIdempotenceTerm
    data ClLeftIdempotenceTerm
      (A : Set) : Set where
      sing :
        A -> ClLeftIdempotenceTerm A
      |>Cl :
        ClLeftIdempotenceTerm A ->
        ClLeftIdempotenceTerm A ->
        ClLeftIdempotenceTerm A
    data OpLeftIdempotenceTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpLeftIdempotenceTerm n
      |>OL :
        OpLeftIdempotenceTerm n ->
        OpLeftIdempotenceTerm n ->
        OpLeftIdempotenceTerm n
    data OpLeftIdempotenceTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpLeftIdempotenceTerm2 n A
      sing2 :
        A -> OpLeftIdempotenceTerm2 n A
      |>OL2 :
        OpLeftIdempotenceTerm2 n A ->
        OpLeftIdempotenceTerm2 n A ->
        OpLeftIdempotenceTerm2 n A
  
  module LeftInverse where
    record LeftInverse
      (A : Set) : Set where
      constructor LeftInverseC
      field
        inv : A -> A
        e : A
        op : A -> A -> A
        leftInverse_inv_op_e :
          (x : A) -> op x (inv x) == e
    record LeftInverseSig
      (AS : Set) : Set where
      constructor LeftInverseSigSigC
      field
        invS : AS -> AS
        eS : AS
        opS : AS -> AS -> AS
    record LeftInverseProd
      (AP : Set) : Set where
      constructor LeftInverseProdC
      field
        invP : Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP xP (invP xP) == eP
    record LeftInverseHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftInverse A1)
      (Le2 : LeftInverse A2) :
      Set where
      constructor LeftInverseHomC
      field
        hom : A1 -> A2
        pres-inv :
          (x1 : A1) ->
          hom (inv Le1 x1) ==
            inv Le2 (hom x1)
        pres-e : hom (e Le1) == e Le2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Le1 x1 x2) ==
            op Le2 (hom x1) (hom x2)
    record LeftInverseRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftInverse A1)
      (Le2 : LeftInverse A2) :
      Set where
      constructor LeftInverseRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-inv :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (inv Le1 x1) (inv Le2 y1)
        interp-e :
          interp (e Le1) (e Le2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Le1 x1 x2)
            (op Le2 y1 y2)
    data LeftInverseLTerm
      : Set where
      invL :
        LeftInverseLTerm ->
        LeftInverseLTerm
      eL : LeftInverseLTerm
      opL :
        LeftInverseLTerm ->
        LeftInverseLTerm ->
        LeftInverseLTerm
    data ClLeftInverseClTerm
      (A : Set) : Set where
      sing :
        A -> ClLeftInverseClTerm A
      invCl :
        ClLeftInverseClTerm A ->
        ClLeftInverseClTerm A
      eCl : ClLeftInverseClTerm A
      opCl :
        ClLeftInverseClTerm A ->
        ClLeftInverseClTerm A ->
        ClLeftInverseClTerm A
    data OpLeftInverseOLTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpLeftInverseOLTerm n
      invOL :
        OpLeftInverseOLTerm n ->
        OpLeftInverseOLTerm n
      eOL : OpLeftInverseOLTerm n
      opOL :
        OpLeftInverseOLTerm n ->
        OpLeftInverseOLTerm n ->
        OpLeftInverseOLTerm n
    data OpLeftInverseOL2Term2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpLeftInverseOL2Term2 n A
      sing2 :
        A -> OpLeftInverseOL2Term2 n A
      invOL2 :
        OpLeftInverseOL2Term2 n A ->
        OpLeftInverseOL2Term2 n A
      eOL2 : OpLeftInverseOL2Term2 n A
      opOL2 :
        OpLeftInverseOL2Term2 n A ->
        OpLeftInverseOL2Term2 n A ->
        OpLeftInverseOL2Term2 n A
  
  module LeftInverseMagma where
    record LeftInverseMagma
      (A : Set) : Set where
      constructor LeftInverseMagmaC
      field
        linv : A -> A -> A
    record LeftInverseMagmaSig
      (AS : Set) : Set where
      constructor LeftInverseMagmaSigSigC
      field
        linvS : AS -> AS -> AS
    record LeftInverseMagmaProd
      (AP : Set) : Set where
      constructor LeftInverseMagmaProdC
      field
        linvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record LeftInverseMagmaHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftInverseMagma A1)
      (Le2 : LeftInverseMagma A2) :
      Set where
      constructor LeftInverseMagmaHomC
      field
        hom : A1 -> A2
        pres-linv :
          (x1 : A1) (x2 : A1) ->
          hom (linv Le1 x1 x2) ==
            linv Le2 (hom x1) (hom x2)
    record LeftInverseMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftInverseMagma A1)
      (Le2 : LeftInverseMagma A2) :
      Set where
      constructor LeftInverseMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-linv :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (linv Le1 x1 x2)
            (linv Le2 y1 y2)
    data LeftInverseMagmaTerm
      : Set where
      linvL :
        LeftInverseMagmaTerm ->
        LeftInverseMagmaTerm ->
        LeftInverseMagmaTerm
    data ClLeftInverseMagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClLeftInverseMagmaTerm A
      linvCl :
        ClLeftInverseMagmaTerm A ->
        ClLeftInverseMagmaTerm A ->
        ClLeftInverseMagmaTerm A
    data OpLeftInverseMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpLeftInverseMagmaTerm n
      linvOL :
        OpLeftInverseMagmaTerm n ->
        OpLeftInverseMagmaTerm n ->
        OpLeftInverseMagmaTerm n
    data OpLeftInverseMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpLeftInverseMagmaTerm2 n A
      sing2 :
        A -> OpLeftInverseMagmaTerm2 n A
      linvOL2 :
        OpLeftInverseMagmaTerm2 n A ->
        OpLeftInverseMagmaTerm2 n A ->
        OpLeftInverseMagmaTerm2 n A
  
  module LeftLoop where
    record LeftLoop
      (A : Set) : Set where
      constructor LeftLoopC
      field
        op : A -> A -> A
        e : A
        runit_e : (x : A) -> op x e == x
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
    record LeftLoopSig
      (AS : Set) : Set where
      constructor LeftLoopSigSigC
      field
        opS : AS -> AS -> AS
        eS : AS
        linvS : AS -> AS -> AS
    record LeftLoopProd
      (AP : Set) : Set where
      constructor LeftLoopProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        linvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        leftCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (linvP xP yP) == yP
        lefCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          linvP xP (opP xP yP) == yP
    record LeftLoopHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftLoop A1)
      (Le2 : LeftLoop A2) : Set where
      constructor LeftLoopHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Le1 x1 x2) ==
            op Le2 (hom x1) (hom x2)
        pres-e : hom (e Le1) == e Le2
        pres-linv :
          (x1 : A1) (x2 : A1) ->
          hom (linv Le1 x1 x2) ==
            linv Le2 (hom x1) (hom x2)
    record LeftLoopRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftLoop A1)
      (Le2 : LeftLoop A2) : Set where
      constructor LeftLoopRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Le1 x1 x2)
            (op Le2 y1 y2)
        interp-e :
          interp (e Le1) (e Le2)
        interp-linv :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (linv Le1 x1 x2)
            (linv Le2 y1 y2)
    data LeftLoopLTerm : Set where
      opL :
        LeftLoopLTerm ->
        LeftLoopLTerm -> LeftLoopLTerm
      eL : LeftLoopLTerm
      linvL :
        LeftLoopLTerm ->
        LeftLoopLTerm -> LeftLoopLTerm
    data ClLeftLoopClTerm
      (A : Set) : Set where
      sing : A -> ClLeftLoopClTerm A
      opCl :
        ClLeftLoopClTerm A ->
        ClLeftLoopClTerm A ->
        ClLeftLoopClTerm A
      eCl : ClLeftLoopClTerm A
      linvCl :
        ClLeftLoopClTerm A ->
        ClLeftLoopClTerm A ->
        ClLeftLoopClTerm A
    data OpLeftLoopOLTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpLeftLoopOLTerm n
      opOL :
        OpLeftLoopOLTerm n ->
        OpLeftLoopOLTerm n ->
        OpLeftLoopOLTerm n
      eOL : OpLeftLoopOLTerm n
      linvOL :
        OpLeftLoopOLTerm n ->
        OpLeftLoopOLTerm n ->
        OpLeftLoopOLTerm n
    data OpLeftLoopOL2Term2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpLeftLoopOL2Term2 n A
      sing2 :
        A -> OpLeftLoopOL2Term2 n A
      opOL2 :
        OpLeftLoopOL2Term2 n A ->
        OpLeftLoopOL2Term2 n A ->
        OpLeftLoopOL2Term2 n A
      eOL2 : OpLeftLoopOL2Term2 n A
      linvOL2 :
        OpLeftLoopOL2Term2 n A ->
        OpLeftLoopOL2Term2 n A ->
        OpLeftLoopOL2Term2 n A
  
  module LeftMonoid where
    record LeftMonoid
      (A : Set) : Set where
      constructor LeftMonoidC
      field
        op : A -> A -> A
        e : A
        lunit_e : (x : A) -> op e x == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
    record LeftMonoidSig
      (AS : Set) : Set where
      constructor LeftMonoidSigSigC
      field
        opS : AS -> AS -> AS
        eS : AS
    record LeftMonoidProd
      (AP : Set) : Set where
      constructor LeftMonoidProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
    record LeftMonoidHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftMonoid A1)
      (Le2 : LeftMonoid A2) :
      Set where
      constructor LeftMonoidHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Le1 x1 x2) ==
            op Le2 (hom x1) (hom x2)
        pres-e : hom (e Le1) == e Le2
    record LeftMonoidRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftMonoid A1)
      (Le2 : LeftMonoid A2) :
      Set where
      constructor LeftMonoidRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Le1 x1 x2)
            (op Le2 y1 y2)
        interp-e :
          interp (e Le1) (e Le2)
    data LeftMonoidTerm : Set where
      opL :
        LeftMonoidTerm ->
        LeftMonoidTerm -> LeftMonoidTerm
      eL : LeftMonoidTerm
    data ClLeftMonoidTerm
      (A : Set) : Set where
      sing : A -> ClLeftMonoidTerm A
      opCl :
        ClLeftMonoidTerm A ->
        ClLeftMonoidTerm A ->
        ClLeftMonoidTerm A
      eCl : ClLeftMonoidTerm A
    data OpLeftMonoidTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpLeftMonoidTerm n
      opOL :
        OpLeftMonoidTerm n ->
        OpLeftMonoidTerm n ->
        OpLeftMonoidTerm n
      eOL : OpLeftMonoidTerm n
    data OpLeftMonoidTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpLeftMonoidTerm2 n A
      sing2 :
        A -> OpLeftMonoidTerm2 n A
      opOL2 :
        OpLeftMonoidTerm2 n A ->
        OpLeftMonoidTerm2 n A ->
        OpLeftMonoidTerm2 n A
      eOL2 : OpLeftMonoidTerm2 n A
  
  module LeftPreSemiring where
    record LeftPreSemiring
      (A : Set) : Set where
      constructor LeftPreSemiringC
      field
        * : A -> A -> A
        + : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
    record LeftPreSemiringSig
      (AS : Set) : Set where
      constructor LeftPreSemiringSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record LeftPreSemiringProd
      (AP : Set) : Set where
      constructor LeftPreSemiringProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
    record LeftPreSemiringHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftPreSemiring A1)
      (Le2 : LeftPreSemiring A2) :
      Set where
      constructor LeftPreSemiringHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Le1 x1 x2) ==
            * Le2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Le1 x1 x2) ==
            + Le2 (hom x1) (hom x2)
    record LeftPreSemiringRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftPreSemiring A1)
      (Le2 : LeftPreSemiring A2) :
      Set where
      constructor LeftPreSemiringRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Le1 x1 x2)
            (* Le2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Le1 x1 x2)
            (+ Le2 y1 y2)
    data LeftPreSemiringTerm
      : Set where
      *L :
        LeftPreSemiringTerm ->
        LeftPreSemiringTerm ->
        LeftPreSemiringTerm
      +L :
        LeftPreSemiringTerm ->
        LeftPreSemiringTerm ->
        LeftPreSemiringTerm
    data ClLeftPreSemiringTerm
      (A : Set) : Set where
      sing :
        A -> ClLeftPreSemiringTerm A
      *Cl :
        ClLeftPreSemiringTerm A ->
        ClLeftPreSemiringTerm A ->
        ClLeftPreSemiringTerm A
      +Cl :
        ClLeftPreSemiringTerm A ->
        ClLeftPreSemiringTerm A ->
        ClLeftPreSemiringTerm A
    data OpLeftPreSemiringTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpLeftPreSemiringTerm n
      *OL :
        OpLeftPreSemiringTerm n ->
        OpLeftPreSemiringTerm n ->
        OpLeftPreSemiringTerm n
      +OL :
        OpLeftPreSemiringTerm n ->
        OpLeftPreSemiringTerm n ->
        OpLeftPreSemiringTerm n
    data OpLeftPreSemiringTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpLeftPreSemiringTerm2 n A
      sing2 :
        A -> OpLeftPreSemiringTerm2 n A
      *OL2 :
        OpLeftPreSemiringTerm2 n A ->
        OpLeftPreSemiringTerm2 n A ->
        OpLeftPreSemiringTerm2 n A
      +OL2 :
        OpLeftPreSemiringTerm2 n A ->
        OpLeftPreSemiringTerm2 n A ->
        OpLeftPreSemiringTerm2 n A
  
  module LeftQuasiGroup where
    record LeftQuasiGroup
      (A : Set) : Set where
      constructor LeftQuasiGroupC
      field
        op : A -> A -> A
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
    record LeftQuasiGroupSig
      (AS : Set) : Set where
      constructor LeftQuasiGroupSigSigC
      field
        opS : AS -> AS -> AS
        linvS : AS -> AS -> AS
    record LeftQuasiGroupProd
      (AP : Set) : Set where
      constructor LeftQuasiGroupProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        linvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (linvP xP yP) == yP
        lefCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          linvP xP (opP xP yP) == yP
    record LeftQuasiGroupHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftQuasiGroup A1)
      (Le2 : LeftQuasiGroup A2) :
      Set where
      constructor LeftQuasiGroupHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Le1 x1 x2) ==
            op Le2 (hom x1) (hom x2)
        pres-linv :
          (x1 : A1) (x2 : A1) ->
          hom (linv Le1 x1 x2) ==
            linv Le2 (hom x1) (hom x2)
    record LeftQuasiGroupRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftQuasiGroup A1)
      (Le2 : LeftQuasiGroup A2) :
      Set where
      constructor LeftQuasiGroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Le1 x1 x2)
            (op Le2 y1 y2)
        interp-linv :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (linv Le1 x1 x2)
            (linv Le2 y1 y2)
    data LeftQuasiGroupTerm
      : Set where
      opL :
        LeftQuasiGroupTerm ->
        LeftQuasiGroupTerm ->
        LeftQuasiGroupTerm
      linvL :
        LeftQuasiGroupTerm ->
        LeftQuasiGroupTerm ->
        LeftQuasiGroupTerm
    data ClLeftQuasiGroupTerm
      (A : Set) : Set where
      sing :
        A -> ClLeftQuasiGroupTerm A
      opCl :
        ClLeftQuasiGroupTerm A ->
        ClLeftQuasiGroupTerm A ->
        ClLeftQuasiGroupTerm A
      linvCl :
        ClLeftQuasiGroupTerm A ->
        ClLeftQuasiGroupTerm A ->
        ClLeftQuasiGroupTerm A
    data OpLeftQuasiGroupTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpLeftQuasiGroupTerm n
      opOL :
        OpLeftQuasiGroupTerm n ->
        OpLeftQuasiGroupTerm n ->
        OpLeftQuasiGroupTerm n
      linvOL :
        OpLeftQuasiGroupTerm n ->
        OpLeftQuasiGroupTerm n ->
        OpLeftQuasiGroupTerm n
    data OpLeftQuasiGroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpLeftQuasiGroupTerm2 n A
      sing2 :
        A -> OpLeftQuasiGroupTerm2 n A
      opOL2 :
        OpLeftQuasiGroupTerm2 n A ->
        OpLeftQuasiGroupTerm2 n A ->
        OpLeftQuasiGroupTerm2 n A
      linvOL2 :
        OpLeftQuasiGroupTerm2 n A ->
        OpLeftQuasiGroupTerm2 n A ->
        OpLeftQuasiGroupTerm2 n A
  
  module LeftRack where
    record LeftRack
      (A : Set) : Set where
      constructor LeftRackC
      field
        |> : A -> A -> A
        <| : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
    record LeftRackSig
      (AS : Set) : Set where
      constructor LeftRackSigSigC
      field
        |>S : AS -> AS -> AS
        <|S : AS -> AS -> AS
    record LeftRackProd
      (AP : Set) : Set where
      constructor LeftRackProdC
      field
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          |>P xP (|>P yP zP) ==
            |>P (|>P xP yP) (|>P xP zP)
    record LeftRackHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftRack A1)
      (Le2 : LeftRack A2) : Set where
      constructor LeftRackHomC
      field
        hom : A1 -> A2
        pres-|> :
          (x1 : A1) (x2 : A1) ->
          hom (|> Le1 x1 x2) ==
            |> Le2 (hom x1) (hom x2)
        pres-<| :
          (x1 : A1) (x2 : A1) ->
          hom (<| Le1 x1 x2) ==
            <| Le2 (hom x1) (hom x2)
    record LeftRackRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftRack A1)
      (Le2 : LeftRack A2) : Set where
      constructor LeftRackRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-|> :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (|> Le1 x1 x2)
            (|> Le2 y1 y2)
        interp-<| :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (<| Le1 x1 x2)
            (<| Le2 y1 y2)
    data LeftRackTerm : Set where
      |>L :
        LeftRackTerm ->
        LeftRackTerm -> LeftRackTerm
      <|L :
        LeftRackTerm ->
        LeftRackTerm -> LeftRackTerm
    data ClLeftRackTerm
      (A : Set) : Set where
      sing : A -> ClLeftRackTerm A
      |>Cl :
        ClLeftRackTerm A ->
        ClLeftRackTerm A ->
        ClLeftRackTerm A
      <|Cl :
        ClLeftRackTerm A ->
        ClLeftRackTerm A ->
        ClLeftRackTerm A
    data OpLeftRackTerm
      (n : Nat) : Set where
      v : Fin n -> OpLeftRackTerm n
      |>OL :
        OpLeftRackTerm n ->
        OpLeftRackTerm n ->
        OpLeftRackTerm n
      <|OL :
        OpLeftRackTerm n ->
        OpLeftRackTerm n ->
        OpLeftRackTerm n
    data OpLeftRackTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpLeftRackTerm2 n A
      sing2 : A -> OpLeftRackTerm2 n A
      |>OL2 :
        OpLeftRackTerm2 n A ->
        OpLeftRackTerm2 n A ->
        OpLeftRackTerm2 n A
      <|OL2 :
        OpLeftRackTerm2 n A ->
        OpLeftRackTerm2 n A ->
        OpLeftRackTerm2 n A
  
  module LeftRingoid where
    record LeftRingoid
      (A : Set) : Set where
      constructor LeftRingoidC
      field
        * : A -> A -> A
        + : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
    record LeftRingoidSig
      (AS : Set) : Set where
      constructor LeftRingoidSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record LeftRingoidProd
      (AP : Set) : Set where
      constructor LeftRingoidProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
    record LeftRingoidHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftRingoid A1)
      (Le2 : LeftRingoid A2) :
      Set where
      constructor LeftRingoidHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Le1 x1 x2) ==
            * Le2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Le1 x1 x2) ==
            + Le2 (hom x1) (hom x2)
    record LeftRingoidRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftRingoid A1)
      (Le2 : LeftRingoid A2) :
      Set where
      constructor LeftRingoidRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Le1 x1 x2)
            (* Le2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Le1 x1 x2)
            (+ Le2 y1 y2)
    data LeftRingoidTerm : Set where
      *L :
        LeftRingoidTerm ->
        LeftRingoidTerm ->
        LeftRingoidTerm
      +L :
        LeftRingoidTerm ->
        LeftRingoidTerm ->
        LeftRingoidTerm
    data ClLeftRingoidTerm
      (A : Set) : Set where
      sing :
        A -> ClLeftRingoidTerm A
      *Cl :
        ClLeftRingoidTerm A ->
        ClLeftRingoidTerm A ->
        ClLeftRingoidTerm A
      +Cl :
        ClLeftRingoidTerm A ->
        ClLeftRingoidTerm A ->
        ClLeftRingoidTerm A
    data OpLeftRingoidTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpLeftRingoidTerm n
      *OL :
        OpLeftRingoidTerm n ->
        OpLeftRingoidTerm n ->
        OpLeftRingoidTerm n
      +OL :
        OpLeftRingoidTerm n ->
        OpLeftRingoidTerm n ->
        OpLeftRingoidTerm n
    data OpLeftRingoidTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpLeftRingoidTerm2 n A
      sing2 :
        A -> OpLeftRingoidTerm2 n A
      *OL2 :
        OpLeftRingoidTerm2 n A ->
        OpLeftRingoidTerm2 n A ->
        OpLeftRingoidTerm2 n A
      +OL2 :
        OpLeftRingoidTerm2 n A ->
        OpLeftRingoidTerm2 n A ->
        OpLeftRingoidTerm2 n A
  
  module LeftShelf where
    record LeftShelf
      (A : Set) : Set where
      constructor LeftShelfC
      field
        |> : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
    record LeftShelfSig
      (AS : Set) : Set where
      constructor LeftShelfSigSigC
      field
        |>S : AS -> AS -> AS
    record LeftShelfProd
      (AP : Set) : Set where
      constructor LeftShelfProdC
      field
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          |>P xP (|>P yP zP) ==
            |>P (|>P xP yP) (|>P xP zP)
    record LeftShelfHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftShelf A1)
      (Le2 : LeftShelf A2) : Set where
      constructor LeftShelfHomC
      field
        hom : A1 -> A2
        pres-|> :
          (x1 : A1) (x2 : A1) ->
          hom (|> Le1 x1 x2) ==
            |> Le2 (hom x1) (hom x2)
    record LeftShelfRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftShelf A1)
      (Le2 : LeftShelf A2) : Set where
      constructor LeftShelfRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-|> :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (|> Le1 x1 x2)
            (|> Le2 y1 y2)
    data LeftShelfTerm : Set where
      |>L :
        LeftShelfTerm ->
        LeftShelfTerm -> LeftShelfTerm
    data ClLeftShelfTerm
      (A : Set) : Set where
      sing : A -> ClLeftShelfTerm A
      |>Cl :
        ClLeftShelfTerm A ->
        ClLeftShelfTerm A ->
        ClLeftShelfTerm A
    data OpLeftShelfTerm
      (n : Nat) : Set where
      v : Fin n -> OpLeftShelfTerm n
      |>OL :
        OpLeftShelfTerm n ->
        OpLeftShelfTerm n ->
        OpLeftShelfTerm n
    data OpLeftShelfTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpLeftShelfTerm2 n A
      sing2 :
        A -> OpLeftShelfTerm2 n A
      |>OL2 :
        OpLeftShelfTerm2 n A ->
        OpLeftShelfTerm2 n A ->
        OpLeftShelfTerm2 n A
  
  module LeftShelfSig where
    record LeftShelfSig
      (A : Set) : Set where
      constructor LeftShelfSigC
      field
        |> : A -> A -> A
    record LeftShelfSigSig
      (AS : Set) : Set where
      constructor LeftShelfSigSigSigC
      field
        |>S : AS -> AS -> AS
    record LeftShelfSigProd
      (AP : Set) : Set where
      constructor LeftShelfSigProdC
      field
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record LeftShelfSigHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftShelfSig A1)
      (Le2 : LeftShelfSig A2) :
      Set where
      constructor LeftShelfSigHomC
      field
        hom : A1 -> A2
        pres-|> :
          (x1 : A1) (x2 : A1) ->
          hom (|> Le1 x1 x2) ==
            |> Le2 (hom x1) (hom x2)
    record LeftShelfSigRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftShelfSig A1)
      (Le2 : LeftShelfSig A2) :
      Set where
      constructor LeftShelfSigRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-|> :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (|> Le1 x1 x2)
            (|> Le2 y1 y2)
    data LeftShelfSigTerm
      : Set where
      |>L :
        LeftShelfSigTerm ->
        LeftShelfSigTerm ->
        LeftShelfSigTerm
    data ClLeftShelfSigTerm
      (A : Set) : Set where
      sing :
        A -> ClLeftShelfSigTerm A
      |>Cl :
        ClLeftShelfSigTerm A ->
        ClLeftShelfSigTerm A ->
        ClLeftShelfSigTerm A
    data OpLeftShelfSigTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpLeftShelfSigTerm n
      |>OL :
        OpLeftShelfSigTerm n ->
        OpLeftShelfSigTerm n ->
        OpLeftShelfSigTerm n
    data OpLeftShelfSigTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpLeftShelfSigTerm2 n A
      sing2 :
        A -> OpLeftShelfSigTerm2 n A
      |>OL2 :
        OpLeftShelfSigTerm2 n A ->
        OpLeftShelfSigTerm2 n A ->
        OpLeftShelfSigTerm2 n A
  
  module LeftSpindle where
    record LeftSpindle
      (A : Set) : Set where
      constructor LeftSpindleC
      field
        |> : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        idempotent_|> :
          (x : A) -> |> x x == x
    record LeftSpindleSig
      (AS : Set) : Set where
      constructor LeftSpindleSigSigC
      field
        |>S : AS -> AS -> AS
    record LeftSpindleProd
      (AP : Set) : Set where
      constructor LeftSpindleProdC
      field
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          |>P xP (|>P yP zP) ==
            |>P (|>P xP yP) (|>P xP zP)
        idempotent_|>P :
          (xP : Prod AP AP) ->
          |>P xP xP == xP
    record LeftSpindleHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftSpindle A1)
      (Le2 : LeftSpindle A2) :
      Set where
      constructor LeftSpindleHomC
      field
        hom : A1 -> A2
        pres-|> :
          (x1 : A1) (x2 : A1) ->
          hom (|> Le1 x1 x2) ==
            |> Le2 (hom x1) (hom x2)
    record LeftSpindleRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftSpindle A1)
      (Le2 : LeftSpindle A2) :
      Set where
      constructor LeftSpindleRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-|> :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (|> Le1 x1 x2)
            (|> Le2 y1 y2)
    data LeftSpindleTerm : Set where
      |>L :
        LeftSpindleTerm ->
        LeftSpindleTerm ->
        LeftSpindleTerm
    data ClLeftSpindleTerm
      (A : Set) : Set where
      sing :
        A -> ClLeftSpindleTerm A
      |>Cl :
        ClLeftSpindleTerm A ->
        ClLeftSpindleTerm A ->
        ClLeftSpindleTerm A
    data OpLeftSpindleTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpLeftSpindleTerm n
      |>OL :
        OpLeftSpindleTerm n ->
        OpLeftSpindleTerm n ->
        OpLeftSpindleTerm n
    data OpLeftSpindleTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpLeftSpindleTerm2 n A
      sing2 :
        A -> OpLeftSpindleTerm2 n A
      |>OL2 :
        OpLeftSpindleTerm2 n A ->
        OpLeftSpindleTerm2 n A ->
        OpLeftSpindleTerm2 n A
  
  module LeftSpindle_Shelf where
    record LeftSpindle_Shelf
      (A : Set) : Set where
      constructor LeftSpindle_ShelfC
      field
        |> : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        idempotent_|> :
          (x : A) -> |> x x == x
        <| : A -> A -> A
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
    record LeftSpindle_ShelfSig
      (AS : Set) : Set where
      constructor LeftSpindle_ShelfSigSigC
      field
        |>S : AS -> AS -> AS
        <|S : AS -> AS -> AS
    record LeftSpindle_ShelfProd
      (AP : Set) : Set where
      constructor LeftSpindle_ShelfProdC
      field
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          |>P xP (|>P yP zP) ==
            |>P (|>P xP yP) (|>P xP zP)
        idempotent_|>P :
          (xP : Prod AP AP) ->
          |>P xP xP == xP
        rightDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          <|P (<|P yP zP) xP ==
            <|P (<|P yP xP) (<|P zP xP)
    record LeftSpindle_ShelfHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftSpindle_Shelf A1)
      (Le2 : LeftSpindle_Shelf A2) :
      Set where
      constructor LeftSpindle_ShelfHomC
      field
        hom : A1 -> A2
        pres-|> :
          (x1 : A1) (x2 : A1) ->
          hom (|> Le1 x1 x2) ==
            |> Le2 (hom x1) (hom x2)
        pres-<| :
          (x1 : A1) (x2 : A1) ->
          hom (<| Le1 x1 x2) ==
            <| Le2 (hom x1) (hom x2)
    record LeftSpindle_ShelfRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftSpindle_Shelf A1)
      (Le2 : LeftSpindle_Shelf A2) :
      Set where
      constructor LeftSpindle_ShelfRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-|> :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (|> Le1 x1 x2)
            (|> Le2 y1 y2)
        interp-<| :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (<| Le1 x1 x2)
            (<| Le2 y1 y2)
    data LeftSpindle_ShelfTerm
      : Set where
      |>L :
        LeftSpindle_ShelfTerm ->
        LeftSpindle_ShelfTerm ->
        LeftSpindle_ShelfTerm
      <|L :
        LeftSpindle_ShelfTerm ->
        LeftSpindle_ShelfTerm ->
        LeftSpindle_ShelfTerm
    data ClLeftSpindle_ShelfTerm
      (A : Set) : Set where
      sing :
        A -> ClLeftSpindle_ShelfTerm A
      |>Cl :
        ClLeftSpindle_ShelfTerm A ->
        ClLeftSpindle_ShelfTerm A ->
        ClLeftSpindle_ShelfTerm A
      <|Cl :
        ClLeftSpindle_ShelfTerm A ->
        ClLeftSpindle_ShelfTerm A ->
        ClLeftSpindle_ShelfTerm A
    data OpLeftSpindle_ShelfTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpLeftSpindle_ShelfTerm n
      |>OL :
        OpLeftSpindle_ShelfTerm n ->
        OpLeftSpindle_ShelfTerm n ->
        OpLeftSpindle_ShelfTerm n
      <|OL :
        OpLeftSpindle_ShelfTerm n ->
        OpLeftSpindle_ShelfTerm n ->
        OpLeftSpindle_ShelfTerm n
    data OpLeftSpindle_ShelfTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpLeftSpindle_ShelfTerm2 n A
      sing2 :
        A ->
        OpLeftSpindle_ShelfTerm2 n A
      |>OL2 :
        OpLeftSpindle_ShelfTerm2 n A ->
        OpLeftSpindle_ShelfTerm2 n A ->
        OpLeftSpindle_ShelfTerm2 n A
      <|OL2 :
        OpLeftSpindle_ShelfTerm2 n A ->
        OpLeftSpindle_ShelfTerm2 n A ->
        OpLeftSpindle_ShelfTerm2 n A
  
  module LeftSpindle_ShelfSig where
    record LeftSpindle_ShelfSig
      (A : Set) : Set where
      constructor LeftSpindle_ShelfSigC
      field
        |> : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        idempotent_|> :
          (x : A) -> |> x x == x
        <| : A -> A -> A
    record LeftSpindle_ShelfSigSig
      (AS : Set) : Set where
      constructor LeftSpindle_ShelfSigSigSigC
      field
        |>S : AS -> AS -> AS
        <|S : AS -> AS -> AS
    record LeftSpindle_ShelfSigProd
      (AP : Set) : Set where
      constructor LeftSpindle_ShelfSigProdC
      field
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          |>P xP (|>P yP zP) ==
            |>P (|>P xP yP) (|>P xP zP)
        idempotent_|>P :
          (xP : Prod AP AP) ->
          |>P xP xP == xP
    record LeftSpindle_ShelfSigHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftSpindle_ShelfSig A1)
      (Le2 : LeftSpindle_ShelfSig
         A2) : Set where
      constructor LeftSpindle_ShelfSigHomC
      field
        hom : A1 -> A2
        pres-|> :
          (x1 : A1) (x2 : A1) ->
          hom (|> Le1 x1 x2) ==
            |> Le2 (hom x1) (hom x2)
        pres-<| :
          (x1 : A1) (x2 : A1) ->
          hom (<| Le1 x1 x2) ==
            <| Le2 (hom x1) (hom x2)
    record LeftSpindle_ShelfSigRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftSpindle_ShelfSig A1)
      (Le2 : LeftSpindle_ShelfSig
         A2) : Set where
      constructor LeftSpindle_ShelfSigRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-|> :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (|> Le1 x1 x2)
            (|> Le2 y1 y2)
        interp-<| :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (<| Le1 x1 x2)
            (<| Le2 y1 y2)
    data LeftSpindle_ShelfSigTerm
      : Set where
      |>L :
        LeftSpindle_ShelfSigTerm ->
        LeftSpindle_ShelfSigTerm ->
        LeftSpindle_ShelfSigTerm
      <|L :
        LeftSpindle_ShelfSigTerm ->
        LeftSpindle_ShelfSigTerm ->
        LeftSpindle_ShelfSigTerm
    data ClLeftSpindle_ShelfSigTerm
      (A : Set) : Set where
      sing :
        A ->
        ClLeftSpindle_ShelfSigTerm A
      |>Cl :
        ClLeftSpindle_ShelfSigTerm A ->
        ClLeftSpindle_ShelfSigTerm A ->
        ClLeftSpindle_ShelfSigTerm A
      <|Cl :
        ClLeftSpindle_ShelfSigTerm A ->
        ClLeftSpindle_ShelfSigTerm A ->
        ClLeftSpindle_ShelfSigTerm A
    data OpLeftSpindle_ShelfSigTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpLeftSpindle_ShelfSigTerm n
      |>OL :
        OpLeftSpindle_ShelfSigTerm n ->
        OpLeftSpindle_ShelfSigTerm n ->
        OpLeftSpindle_ShelfSigTerm n
      <|OL :
        OpLeftSpindle_ShelfSigTerm n ->
        OpLeftSpindle_ShelfSigTerm n ->
        OpLeftSpindle_ShelfSigTerm n
    data OpLeftSpindle_ShelfSigTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpLeftSpindle_ShelfSigTerm2 n A
      sing2 :
        A ->
        OpLeftSpindle_ShelfSigTerm2 n A
      |>OL2 :
        OpLeftSpindle_ShelfSigTerm2 n
          A ->
        OpLeftSpindle_ShelfSigTerm2 n
          A ->
        OpLeftSpindle_ShelfSigTerm2 n A
      <|OL2 :
        OpLeftSpindle_ShelfSigTerm2 n
          A ->
        OpLeftSpindle_ShelfSigTerm2 n
          A ->
        OpLeftSpindle_ShelfSigTerm2 n A
  
  module LeftUnital where
    record LeftUnital
      (A : Set) : Set where
      constructor LeftUnitalC
      field
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
    record LeftUnitalSig
      (AS : Set) : Set where
      constructor LeftUnitalSigSigC
      field
        eS : AS
        opS : AS -> AS -> AS
    record LeftUnitalProd
      (AP : Set) : Set where
      constructor LeftUnitalProdC
      field
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
    record LeftUnitalHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftUnital A1)
      (Le2 : LeftUnital A2) :
      Set where
      constructor LeftUnitalHomC
      field
        hom : A1 -> A2
        pres-e : hom (e Le1) == e Le2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Le1 x1 x2) ==
            op Le2 (hom x1) (hom x2)
    record LeftUnitalRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftUnital A1)
      (Le2 : LeftUnital A2) :
      Set where
      constructor LeftUnitalRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-e :
          interp (e Le1) (e Le2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Le1 x1 x2)
            (op Le2 y1 y2)
    data LeftUnitalTerm : Set where
      eL : LeftUnitalTerm
      opL :
        LeftUnitalTerm ->
        LeftUnitalTerm -> LeftUnitalTerm
    data ClLeftUnitalTerm
      (A : Set) : Set where
      sing : A -> ClLeftUnitalTerm A
      eCl : ClLeftUnitalTerm A
      opCl :
        ClLeftUnitalTerm A ->
        ClLeftUnitalTerm A ->
        ClLeftUnitalTerm A
    data OpLeftUnitalTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpLeftUnitalTerm n
      eOL : OpLeftUnitalTerm n
      opOL :
        OpLeftUnitalTerm n ->
        OpLeftUnitalTerm n ->
        OpLeftUnitalTerm n
    data OpLeftUnitalTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpLeftUnitalTerm2 n A
      sing2 :
        A -> OpLeftUnitalTerm2 n A
      eOL2 : OpLeftUnitalTerm2 n A
      opOL2 :
        OpLeftUnitalTerm2 n A ->
        OpLeftUnitalTerm2 n A ->
        OpLeftUnitalTerm2 n A
  
  module LeftZero where
    record LeftZero
      (A : Set) : Set where
      constructor LeftZeroC
      field
        e : A
        op : A -> A -> A
        leftZero_op_e :
          (x : A) -> op e x == e
    record LeftZeroSig
      (AS : Set) : Set where
      constructor LeftZeroSigSigC
      field
        eS : AS
        opS : AS -> AS -> AS
    record LeftZeroProd
      (AP : Set) : Set where
      constructor LeftZeroProdC
      field
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftZero_op_eP :
          (xP : Prod AP AP) ->
          opP eP xP == eP
    record LeftZeroHom
      (A1 : Set) (A2 : Set)
      (Le1 : LeftZero A1)
      (Le2 : LeftZero A2) : Set where
      constructor LeftZeroHomC
      field
        hom : A1 -> A2
        pres-e : hom (e Le1) == e Le2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Le1 x1 x2) ==
            op Le2 (hom x1) (hom x2)
    record LeftZeroRelInterp
      (A1 : Set) (A2 : Set)
      (Le1 : LeftZero A1)
      (Le2 : LeftZero A2) : Set where
      constructor LeftZeroRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-e :
          interp (e Le1) (e Le2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Le1 x1 x2)
            (op Le2 y1 y2)
    data LeftZeroTerm : Set where
      eL : LeftZeroTerm
      opL :
        LeftZeroTerm ->
        LeftZeroTerm -> LeftZeroTerm
    data ClLeftZeroTerm
      (A : Set) : Set where
      sing : A -> ClLeftZeroTerm A
      eCl : ClLeftZeroTerm A
      opCl :
        ClLeftZeroTerm A ->
        ClLeftZeroTerm A ->
        ClLeftZeroTerm A
    data OpLeftZeroTerm
      (n : Nat) : Set where
      v : Fin n -> OpLeftZeroTerm n
      eOL : OpLeftZeroTerm n
      opOL :
        OpLeftZeroTerm n ->
        OpLeftZeroTerm n ->
        OpLeftZeroTerm n
    data OpLeftZeroTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpLeftZeroTerm2 n A
      sing2 : A -> OpLeftZeroTerm2 n A
      eOL2 : OpLeftZeroTerm2 n A
      opOL2 :
        OpLeftZeroTerm2 n A ->
        OpLeftZeroTerm2 n A ->
        OpLeftZeroTerm2 n A
  
  module LieRing where
    record LieRing
      (A : Set) : Set where
      constructor LieRingC
      field
        0 : A
        + : A -> A -> A
        * : A -> A -> A
        jacobian_*_+ :
          (x : A) (y : A) (z : A) ->
          +
            (+ (* x (* y z)) (* y (* z x)))
            (* z (* x y)) == 0
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
        antiCommutative :
          (x : A) (y : A) ->
          * x y == neg (* y x)
    record LieRingSig
      (AS : Set) : Set where
      constructor LieRingSigSigC
      field
        0S : AS
        +S : AS -> AS -> AS
        *S : AS -> AS -> AS
        negS : AS -> AS
        1S : AS
    record LieRingProd
      (AP : Set) : Set where
      constructor LieRingProdC
      field
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        negP : Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        jacobian_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P
            (+P (*P xP (*P yP zP))
               (*P yP (*P zP xP)))
            (*P zP (*P xP yP)) == 0P
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        leftInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P xP (negP xP) == 0P
        rightInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P (negP xP) xP == 0P
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        leftZero_op_0P :
          (xP : Prod AP AP) ->
          *P 0P xP == 0P
        rightZero_op_0P :
          (xP : Prod AP AP) ->
          *P xP 0P == 0P
        antiCommutativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == negP (*P yP xP)
    record LieRingHom
      (A1 : Set) (A2 : Set)
      (Li1 : LieRing A1)
      (Li2 : LieRing A2) : Set where
      constructor LieRingHomC
      field
        hom : A1 -> A2
        pres-0 : hom (0 Li1) == 0 Li2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Li1 x1 x2) ==
            + Li2 (hom x1) (hom x2)
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Li1 x1 x2) ==
            * Li2 (hom x1) (hom x2)
        pres-neg :
          (x1 : A1) ->
          hom (neg Li1 x1) ==
            neg Li2 (hom x1)
        pres-1 : hom (1 Li1) == 1 Li2
    record LieRingRelInterp
      (A1 : Set) (A2 : Set)
      (Li1 : LieRing A1)
      (Li2 : LieRing A2) : Set where
      constructor LieRingRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0 :
          interp (0 Li1) (0 Li2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Li1 x1 x2)
            (+ Li2 y1 y2)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Li1 x1 x2)
            (* Li2 y1 y2)
        interp-neg :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (neg Li1 x1) (neg Li2 y1)
        interp-1 :
          interp (1 Li1) (1 Li2)
    data LieRingTerm : Set where
      0L : LieRingTerm
      +L :
        LieRingTerm ->
        LieRingTerm -> LieRingTerm
      *L :
        LieRingTerm ->
        LieRingTerm -> LieRingTerm
      negL :
        LieRingTerm -> LieRingTerm
      1L : LieRingTerm
    data ClLieRingTerm
      (A : Set) : Set where
      sing : A -> ClLieRingTerm A
      0Cl : ClLieRingTerm A
      +Cl :
        ClLieRingTerm A ->
        ClLieRingTerm A ->
        ClLieRingTerm A
      *Cl :
        ClLieRingTerm A ->
        ClLieRingTerm A ->
        ClLieRingTerm A
      negCl :
        ClLieRingTerm A ->
        ClLieRingTerm A
      1Cl : ClLieRingTerm A
    data OpLieRingTerm
      (n : Nat) : Set where
      v : Fin n -> OpLieRingTerm n
      0OL : OpLieRingTerm n
      +OL :
        OpLieRingTerm n ->
        OpLieRingTerm n ->
        OpLieRingTerm n
      *OL :
        OpLieRingTerm n ->
        OpLieRingTerm n ->
        OpLieRingTerm n
      negOL :
        OpLieRingTerm n ->
        OpLieRingTerm n
      1OL : OpLieRingTerm n
    data OpLieRingTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpLieRingTerm2 n A
      sing2 : A -> OpLieRingTerm2 n A
      0OL2 : OpLieRingTerm2 n A
      +OL2 :
        OpLieRingTerm2 n A ->
        OpLieRingTerm2 n A ->
        OpLieRingTerm2 n A
      *OL2 :
        OpLieRingTerm2 n A ->
        OpLieRingTerm2 n A ->
        OpLieRingTerm2 n A
      negOL2 :
        OpLieRingTerm2 n A ->
        OpLieRingTerm2 n A
      1OL2 : OpLieRingTerm2 n A
  
  module Loop where
    record Loop
      (A : Set) : Set where
      constructor LoopC
      field
        op : A -> A -> A
        e : A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
        rinv : A -> A -> A
        rightCancel :
          (x : A) (y : A) ->
          op (rinv y x) x == y
        rightCancelOp :
          (x : A) (y : A) ->
          rinv (op y x) x == y
    record LoopSig
      (AS : Set) : Set where
      constructor LoopSigSigC
      field
        opS : AS -> AS -> AS
        eS : AS
        linvS : AS -> AS -> AS
        rinvS : AS -> AS -> AS
    record LoopProd
      (AP : Set) : Set where
      constructor LoopProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        linvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rinvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        leftCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (linvP xP yP) == yP
        lefCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          linvP xP (opP xP yP) == yP
        rightCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP (rinvP yP xP) xP == yP
        rightCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          rinvP (opP yP xP) xP == yP
    record LoopHom
      (A1 : Set) (A2 : Set)
      (Lo1 : Loop A1)
      (Lo2 : Loop A2) : Set where
      constructor LoopHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Lo1 x1 x2) ==
            op Lo2 (hom x1) (hom x2)
        pres-e : hom (e Lo1) == e Lo2
        pres-linv :
          (x1 : A1) (x2 : A1) ->
          hom (linv Lo1 x1 x2) ==
            linv Lo2 (hom x1) (hom x2)
        pres-rinv :
          (x1 : A1) (x2 : A1) ->
          hom (rinv Lo1 x1 x2) ==
            rinv Lo2 (hom x1) (hom x2)
    record LoopRelInterp
      (A1 : Set) (A2 : Set)
      (Lo1 : Loop A1)
      (Lo2 : Loop A2) : Set where
      constructor LoopRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Lo1 x1 x2)
            (op Lo2 y1 y2)
        interp-e :
          interp (e Lo1) (e Lo2)
        interp-linv :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (linv Lo1 x1 x2)
            (linv Lo2 y1 y2)
        interp-rinv :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (rinv Lo1 x1 x2)
            (rinv Lo2 y1 y2)
    data LoopLTerm : Set where
      opL :
        LoopLTerm ->
        LoopLTerm -> LoopLTerm
      eL : LoopLTerm
      linvL :
        LoopLTerm ->
        LoopLTerm -> LoopLTerm
      rinvL :
        LoopLTerm ->
        LoopLTerm -> LoopLTerm
    data ClLoopClTerm
      (A : Set) : Set where
      sing : A -> ClLoopClTerm A
      opCl :
        ClLoopClTerm A ->
        ClLoopClTerm A -> ClLoopClTerm A
      eCl : ClLoopClTerm A
      linvCl :
        ClLoopClTerm A ->
        ClLoopClTerm A -> ClLoopClTerm A
      rinvCl :
        ClLoopClTerm A ->
        ClLoopClTerm A -> ClLoopClTerm A
    data OpLoopOLTerm
      (n : Nat) : Set where
      v : Fin n -> OpLoopOLTerm n
      opOL :
        OpLoopOLTerm n ->
        OpLoopOLTerm n -> OpLoopOLTerm n
      eOL : OpLoopOLTerm n
      linvOL :
        OpLoopOLTerm n ->
        OpLoopOLTerm n -> OpLoopOLTerm n
      rinvOL :
        OpLoopOLTerm n ->
        OpLoopOLTerm n -> OpLoopOLTerm n
    data OpLoopOL2Term2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpLoopOL2Term2 n A
      sing2 : A -> OpLoopOL2Term2 n A
      opOL2 :
        OpLoopOL2Term2 n A ->
        OpLoopOL2Term2 n A ->
        OpLoopOL2Term2 n A
      eOL2 : OpLoopOL2Term2 n A
      linvOL2 :
        OpLoopOL2Term2 n A ->
        OpLoopOL2Term2 n A ->
        OpLoopOL2Term2 n A
      rinvOL2 :
        OpLoopOL2Term2 n A ->
        OpLoopOL2Term2 n A ->
        OpLoopOL2Term2 n A
  
  module Magma where
    record Magma
      (A : Set) : Set where
      constructor MagmaC
      field
        op : A -> A -> A
    record MagmaSig
      (AS : Set) : Set where
      constructor MagmaSigSigC
      field
        opS : AS -> AS -> AS
    record MagmaProd
      (AP : Set) : Set where
      constructor MagmaProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record MagmaHom
      (A1 : Set) (A2 : Set)
      (Ma1 : Magma A1)
      (Ma2 : Magma A2) : Set where
      constructor MagmaHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ma1 x1 x2) ==
            op Ma2 (hom x1) (hom x2)
    record MagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Ma1 : Magma A1)
      (Ma2 : Magma A2) : Set where
      constructor MagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ma1 x1 x2)
            (op Ma2 y1 y2)
    data MagmaTerm : Set where
      opL :
        MagmaTerm ->
        MagmaTerm -> MagmaTerm
    data ClMagmaTerm
      (A : Set) : Set where
      sing : A -> ClMagmaTerm A
      opCl :
        ClMagmaTerm A ->
        ClMagmaTerm A -> ClMagmaTerm A
    data OpMagmaTerm
      (n : Nat) : Set where
      v : Fin n -> OpMagmaTerm n
      opOL :
        OpMagmaTerm n ->
        OpMagmaTerm n -> OpMagmaTerm n
    data OpMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 : Fin n -> OpMagmaTerm2 n A
      sing2 : A -> OpMagmaTerm2 n A
      opOL2 :
        OpMagmaTerm2 n A ->
        OpMagmaTerm2 n A ->
        OpMagmaTerm2 n A
  
  module MedialMagma where
    record MedialMagma
      (A : Set) : Set where
      constructor MedialMagmaC
      field
        op : A -> A -> A
        mediates :
          (w : A) (x : A) (y : A)
          (z : A) ->
          op (op x y) (op z w) ==
            op (op x z) (op y w)
    record MedialMagmaSig
      (AS : Set) : Set where
      constructor MedialMagmaSigSigC
      field
        opS : AS -> AS -> AS
    record MedialMagmaProd
      (AP : Set) : Set where
      constructor MedialMagmaProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        mediatesP :
          (wP : Prod AP AP)
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) (opP zP wP) ==
            opP (opP xP zP) (opP yP wP)
    record MedialMagmaHom
      (A1 : Set) (A2 : Set)
      (Me1 : MedialMagma A1)
      (Me2 : MedialMagma A2) :
      Set where
      constructor MedialMagmaHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Me1 x1 x2) ==
            op Me2 (hom x1) (hom x2)
    record MedialMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Me1 : MedialMagma A1)
      (Me2 : MedialMagma A2) :
      Set where
      constructor MedialMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Me1 x1 x2)
            (op Me2 y1 y2)
    data MedialMagmaTerm : Set where
      opL :
        MedialMagmaTerm ->
        MedialMagmaTerm ->
        MedialMagmaTerm
    data ClMedialMagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClMedialMagmaTerm A
      opCl :
        ClMedialMagmaTerm A ->
        ClMedialMagmaTerm A ->
        ClMedialMagmaTerm A
    data OpMedialMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpMedialMagmaTerm n
      opOL :
        OpMedialMagmaTerm n ->
        OpMedialMagmaTerm n ->
        OpMedialMagmaTerm n
    data OpMedialMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpMedialMagmaTerm2 n A
      sing2 :
        A -> OpMedialMagmaTerm2 n A
      opOL2 :
        OpMedialMagmaTerm2 n A ->
        OpMedialMagmaTerm2 n A ->
        OpMedialMagmaTerm2 n A
  
  module MedialQuasiGroup where
    record MedialQuasiGroup
      (A : Set) : Set where
      constructor MedialQuasiGroupC
      field
        op : A -> A -> A
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
        rinv : A -> A -> A
        rightCancel :
          (x : A) (y : A) ->
          op (rinv y x) x == y
        rightCancelOp :
          (x : A) (y : A) ->
          rinv (op y x) x == y
        mediates :
          (w : A) (x : A) (y : A)
          (z : A) ->
          op (op x y) (op z w) ==
            op (op x z) (op y w)
    record MedialQuasiGroupSig
      (AS : Set) : Set where
      constructor MedialQuasiGroupSigSigC
      field
        opS : AS -> AS -> AS
        linvS : AS -> AS -> AS
        rinvS : AS -> AS -> AS
    record MedialQuasiGroupProd
      (AP : Set) : Set where
      constructor MedialQuasiGroupProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        linvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rinvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (linvP xP yP) == yP
        lefCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          linvP xP (opP xP yP) == yP
        rightCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP (rinvP yP xP) xP == yP
        rightCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          rinvP (opP yP xP) xP == yP
        mediatesP :
          (wP : Prod AP AP)
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) (opP zP wP) ==
            opP (opP xP zP) (opP yP wP)
    record MedialQuasiGroupHom
      (A1 : Set) (A2 : Set)
      (Me1 : MedialQuasiGroup A1)
      (Me2 : MedialQuasiGroup A2) :
      Set where
      constructor MedialQuasiGroupHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Me1 x1 x2) ==
            op Me2 (hom x1) (hom x2)
        pres-linv :
          (x1 : A1) (x2 : A1) ->
          hom (linv Me1 x1 x2) ==
            linv Me2 (hom x1) (hom x2)
        pres-rinv :
          (x1 : A1) (x2 : A1) ->
          hom (rinv Me1 x1 x2) ==
            rinv Me2 (hom x1) (hom x2)
    record MedialQuasiGroupRelInterp
      (A1 : Set) (A2 : Set)
      (Me1 : MedialQuasiGroup A1)
      (Me2 : MedialQuasiGroup A2) :
      Set where
      constructor MedialQuasiGroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Me1 x1 x2)
            (op Me2 y1 y2)
        interp-linv :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (linv Me1 x1 x2)
            (linv Me2 y1 y2)
        interp-rinv :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (rinv Me1 x1 x2)
            (rinv Me2 y1 y2)
    data MedialQuasiGroupTerm
      : Set where
      opL :
        MedialQuasiGroupTerm ->
        MedialQuasiGroupTerm ->
        MedialQuasiGroupTerm
      linvL :
        MedialQuasiGroupTerm ->
        MedialQuasiGroupTerm ->
        MedialQuasiGroupTerm
      rinvL :
        MedialQuasiGroupTerm ->
        MedialQuasiGroupTerm ->
        MedialQuasiGroupTerm
    data ClMedialQuasiGroupTerm
      (A : Set) : Set where
      sing :
        A -> ClMedialQuasiGroupTerm A
      opCl :
        ClMedialQuasiGroupTerm A ->
        ClMedialQuasiGroupTerm A ->
        ClMedialQuasiGroupTerm A
      linvCl :
        ClMedialQuasiGroupTerm A ->
        ClMedialQuasiGroupTerm A ->
        ClMedialQuasiGroupTerm A
      rinvCl :
        ClMedialQuasiGroupTerm A ->
        ClMedialQuasiGroupTerm A ->
        ClMedialQuasiGroupTerm A
    data OpMedialQuasiGroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpMedialQuasiGroupTerm n
      opOL :
        OpMedialQuasiGroupTerm n ->
        OpMedialQuasiGroupTerm n ->
        OpMedialQuasiGroupTerm n
      linvOL :
        OpMedialQuasiGroupTerm n ->
        OpMedialQuasiGroupTerm n ->
        OpMedialQuasiGroupTerm n
      rinvOL :
        OpMedialQuasiGroupTerm n ->
        OpMedialQuasiGroupTerm n ->
        OpMedialQuasiGroupTerm n
    data OpMedialQuasiGroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpMedialQuasiGroupTerm2 n A
      sing2 :
        A -> OpMedialQuasiGroupTerm2 n A
      opOL2 :
        OpMedialQuasiGroupTerm2 n A ->
        OpMedialQuasiGroupTerm2 n A ->
        OpMedialQuasiGroupTerm2 n A
      linvOL2 :
        OpMedialQuasiGroupTerm2 n A ->
        OpMedialQuasiGroupTerm2 n A ->
        OpMedialQuasiGroupTerm2 n A
      rinvOL2 :
        OpMedialQuasiGroupTerm2 n A ->
        OpMedialQuasiGroupTerm2 n A ->
        OpMedialQuasiGroupTerm2 n A
  
  module MeetSemilattice where
    record MeetSemilattice
      (A : Set) : Set where
      constructor MeetSemilatticeC
      field
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        idempotent_op :
          (x : A) -> op x x == x
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
    record MeetSemilatticeSig
      (AS : Set) : Set where
      constructor MeetSemilatticeSigSigC
      field
        opS : AS -> AS -> AS
    record MeetSemilatticeProd
      (AP : Set) : Set where
      constructor MeetSemilatticeProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        idempotent_opP :
          (xP : Prod AP AP) ->
          opP xP xP == xP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
    record MeetSemilatticeHom
      (A1 : Set) (A2 : Set)
      (Me1 : MeetSemilattice A1)
      (Me2 : MeetSemilattice A2) :
      Set where
      constructor MeetSemilatticeHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Me1 x1 x2) ==
            op Me2 (hom x1) (hom x2)
    record MeetSemilatticeRelInterp
      (A1 : Set) (A2 : Set)
      (Me1 : MeetSemilattice A1)
      (Me2 : MeetSemilattice A2) :
      Set where
      constructor MeetSemilatticeRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Me1 x1 x2)
            (op Me2 y1 y2)
    data MeetSemilatticeTerm
      : Set where
      opL :
        MeetSemilatticeTerm ->
        MeetSemilatticeTerm ->
        MeetSemilatticeTerm
    data ClMeetSemilatticeTerm
      (A : Set) : Set where
      sing :
        A -> ClMeetSemilatticeTerm A
      opCl :
        ClMeetSemilatticeTerm A ->
        ClMeetSemilatticeTerm A ->
        ClMeetSemilatticeTerm A
    data OpMeetSemilatticeTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpMeetSemilatticeTerm n
      opOL :
        OpMeetSemilatticeTerm n ->
        OpMeetSemilatticeTerm n ->
        OpMeetSemilatticeTerm n
    data OpMeetSemilatticeTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpMeetSemilatticeTerm2 n A
      sing2 :
        A -> OpMeetSemilatticeTerm2 n A
      opOL2 :
        OpMeetSemilatticeTerm2 n A ->
        OpMeetSemilatticeTerm2 n A ->
        OpMeetSemilatticeTerm2 n A
  
  module MiddleAbsorption where
    record MiddleAbsorption
      (A : Set) : Set where
      constructor MiddleAbsorptionC
      field
        op : A -> A -> A
        middleAbsorb_* :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x z
    record MiddleAbsorptionSig
      (AS : Set) : Set where
      constructor MiddleAbsorptionSigSigC
      field
        opS : AS -> AS -> AS
    record MiddleAbsorptionProd
      (AP : Set) : Set where
      constructor MiddleAbsorptionProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        middleAbsorb_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP == opP xP zP
    record MiddleAbsorptionHom
      (A1 : Set) (A2 : Set)
      (Mi1 : MiddleAbsorption A1)
      (Mi2 : MiddleAbsorption A2) :
      Set where
      constructor MiddleAbsorptionHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Mi1 x1 x2) ==
            op Mi2 (hom x1) (hom x2)
    record MiddleAbsorptionRelInterp
      (A1 : Set) (A2 : Set)
      (Mi1 : MiddleAbsorption A1)
      (Mi2 : MiddleAbsorption A2) :
      Set where
      constructor MiddleAbsorptionRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Mi1 x1 x2)
            (op Mi2 y1 y2)
    data MiddleAbsorptionTerm
      : Set where
      opL :
        MiddleAbsorptionTerm ->
        MiddleAbsorptionTerm ->
        MiddleAbsorptionTerm
    data ClMiddleAbsorptionTerm
      (A : Set) : Set where
      sing :
        A -> ClMiddleAbsorptionTerm A
      opCl :
        ClMiddleAbsorptionTerm A ->
        ClMiddleAbsorptionTerm A ->
        ClMiddleAbsorptionTerm A
    data OpMiddleAbsorptionTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpMiddleAbsorptionTerm n
      opOL :
        OpMiddleAbsorptionTerm n ->
        OpMiddleAbsorptionTerm n ->
        OpMiddleAbsorptionTerm n
    data OpMiddleAbsorptionTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpMiddleAbsorptionTerm2 n A
      sing2 :
        A -> OpMiddleAbsorptionTerm2 n A
      opOL2 :
        OpMiddleAbsorptionTerm2 n A ->
        OpMiddleAbsorptionTerm2 n A ->
        OpMiddleAbsorptionTerm2 n A
  
  module MiddleCommute where
    record MiddleCommute
      (A : Set) : Set where
      constructor MiddleCommuteC
      field
        op : A -> A -> A
        middleCommute_* :
          (x : A) (y : A) (z : A) ->
          op (op (op x y) z) x ==
            op (op (op x z) y) x
    record MiddleCommuteSig
      (AS : Set) : Set where
      constructor MiddleCommuteSigSigC
      field
        opS : AS -> AS -> AS
    record MiddleCommuteProd
      (AP : Set) : Set where
      constructor MiddleCommuteProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        middleCommute_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP (opP xP yP) zP) xP ==
            opP (opP (opP xP zP) yP) xP
    record MiddleCommuteHom
      (A1 : Set) (A2 : Set)
      (Mi1 : MiddleCommute A1)
      (Mi2 : MiddleCommute A2) :
      Set where
      constructor MiddleCommuteHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Mi1 x1 x2) ==
            op Mi2 (hom x1) (hom x2)
    record MiddleCommuteRelInterp
      (A1 : Set) (A2 : Set)
      (Mi1 : MiddleCommute A1)
      (Mi2 : MiddleCommute A2) :
      Set where
      constructor MiddleCommuteRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Mi1 x1 x2)
            (op Mi2 y1 y2)
    data MiddleCommuteTerm
      : Set where
      opL :
        MiddleCommuteTerm ->
        MiddleCommuteTerm ->
        MiddleCommuteTerm
    data ClMiddleCommuteTerm
      (A : Set) : Set where
      sing :
        A -> ClMiddleCommuteTerm A
      opCl :
        ClMiddleCommuteTerm A ->
        ClMiddleCommuteTerm A ->
        ClMiddleCommuteTerm A
    data OpMiddleCommuteTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpMiddleCommuteTerm n
      opOL :
        OpMiddleCommuteTerm n ->
        OpMiddleCommuteTerm n ->
        OpMiddleCommuteTerm n
    data OpMiddleCommuteTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpMiddleCommuteTerm2 n A
      sing2 :
        A -> OpMiddleCommuteTerm2 n A
      opOL2 :
        OpMiddleCommuteTerm2 n A ->
        OpMiddleCommuteTerm2 n A ->
        OpMiddleCommuteTerm2 n A
  
  module ModularLattice where
    record ModularLattice
      (A : Set) : Set where
      constructor ModularLatticeC
      field
        * : A -> A -> A
        + : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        idempotent_* :
          (x : A) -> * x x == x
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        idempotent_+ :
          (x : A) -> + x x == x
        leftAbsorp_*_+ :
          (x : A) (y : A) ->
          * x (+ x y) == x
        leftAbsorp_+_* :
          (x : A) (y : A) ->
          + x (* x y) == x
        leftModular_*_+ :
          (x : A) (y : A) (z : A) ->
          + (* x y) (* x z) ==
            * x (+ y (* x z))
    record ModularLatticeSig
      (AS : Set) : Set where
      constructor ModularLatticeSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record ModularLatticeProd
      (AP : Set) : Set where
      constructor ModularLatticeProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        idempotent_+P :
          (xP : Prod AP AP) ->
          +P xP xP == xP
        leftAbsorp_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP (+P xP yP) == xP
        leftAbsorp_+_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP (*P xP yP) == xP
        leftModular_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (*P xP yP) (*P xP zP) ==
            *P xP (+P yP (*P xP zP))
    record ModularLatticeHom
      (A1 : Set) (A2 : Set)
      (Mo1 : ModularLattice A1)
      (Mo2 : ModularLattice A2) :
      Set where
      constructor ModularLatticeHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Mo1 x1 x2) ==
            * Mo2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Mo1 x1 x2) ==
            + Mo2 (hom x1) (hom x2)
    record ModularLatticeRelInterp
      (A1 : Set) (A2 : Set)
      (Mo1 : ModularLattice A1)
      (Mo2 : ModularLattice A2) :
      Set where
      constructor ModularLatticeRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Mo1 x1 x2)
            (* Mo2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Mo1 x1 x2)
            (+ Mo2 y1 y2)
    data ModularLatticeTerm
      : Set where
      *L :
        ModularLatticeTerm ->
        ModularLatticeTerm ->
        ModularLatticeTerm
      +L :
        ModularLatticeTerm ->
        ModularLatticeTerm ->
        ModularLatticeTerm
    data ClModularLatticeTerm
      (A : Set) : Set where
      sing :
        A -> ClModularLatticeTerm A
      *Cl :
        ClModularLatticeTerm A ->
        ClModularLatticeTerm A ->
        ClModularLatticeTerm A
      +Cl :
        ClModularLatticeTerm A ->
        ClModularLatticeTerm A ->
        ClModularLatticeTerm A
    data OpModularLatticeTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpModularLatticeTerm n
      *OL :
        OpModularLatticeTerm n ->
        OpModularLatticeTerm n ->
        OpModularLatticeTerm n
      +OL :
        OpModularLatticeTerm n ->
        OpModularLatticeTerm n ->
        OpModularLatticeTerm n
    data OpModularLatticeTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpModularLatticeTerm2 n A
      sing2 :
        A -> OpModularLatticeTerm2 n A
      *OL2 :
        OpModularLatticeTerm2 n A ->
        OpModularLatticeTerm2 n A ->
        OpModularLatticeTerm2 n A
      +OL2 :
        OpModularLatticeTerm2 n A ->
        OpModularLatticeTerm2 n A ->
        OpModularLatticeTerm2 n A
  
  module Modularity where
    record Modularity
      (A : Set) : Set where
      constructor ModularityC
      field
        * : A -> A -> A
        + : A -> A -> A
        leftModular_*_+ :
          (x : A) (y : A) (z : A) ->
          + (* x y) (* x z) ==
            * x (+ y (* x z))
    record ModularitySig
      (AS : Set) : Set where
      constructor ModularitySigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record ModularityProd
      (AP : Set) : Set where
      constructor ModularityProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftModular_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (*P xP yP) (*P xP zP) ==
            *P xP (+P yP (*P xP zP))
    record ModularityHom
      (A1 : Set) (A2 : Set)
      (Mo1 : Modularity A1)
      (Mo2 : Modularity A2) :
      Set where
      constructor ModularityHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Mo1 x1 x2) ==
            * Mo2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Mo1 x1 x2) ==
            + Mo2 (hom x1) (hom x2)
    record ModularityRelInterp
      (A1 : Set) (A2 : Set)
      (Mo1 : Modularity A1)
      (Mo2 : Modularity A2) :
      Set where
      constructor ModularityRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Mo1 x1 x2)
            (* Mo2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Mo1 x1 x2)
            (+ Mo2 y1 y2)
    data ModularityTerm : Set where
      *L :
        ModularityTerm ->
        ModularityTerm -> ModularityTerm
      +L :
        ModularityTerm ->
        ModularityTerm -> ModularityTerm
    data ClModularityTerm
      (A : Set) : Set where
      sing : A -> ClModularityTerm A
      *Cl :
        ClModularityTerm A ->
        ClModularityTerm A ->
        ClModularityTerm A
      +Cl :
        ClModularityTerm A ->
        ClModularityTerm A ->
        ClModularityTerm A
    data OpModularityTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpModularityTerm n
      *OL :
        OpModularityTerm n ->
        OpModularityTerm n ->
        OpModularityTerm n
      +OL :
        OpModularityTerm n ->
        OpModularityTerm n ->
        OpModularityTerm n
    data OpModularityTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpModularityTerm2 n A
      sing2 :
        A -> OpModularityTerm2 n A
      *OL2 :
        OpModularityTerm2 n A ->
        OpModularityTerm2 n A ->
        OpModularityTerm2 n A
      +OL2 :
        OpModularityTerm2 n A ->
        OpModularityTerm2 n A ->
        OpModularityTerm2 n A
  
  module Monoid where
    record Monoid
      (A : Set) : Set where
      constructor MonoidC
      field
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
    record MonoidSig
      (AS : Set) : Set where
      constructor MonoidSigSigC
      field
        eS : AS
        opS : AS -> AS -> AS
    record MonoidProd
      (AP : Set) : Set where
      constructor MonoidProdC
      field
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
    record MonoidHom
      (A1 : Set) (A2 : Set)
      (Mo1 : Monoid A1)
      (Mo2 : Monoid A2) : Set where
      constructor MonoidHomC
      field
        hom : A1 -> A2
        pres-e : hom (e Mo1) == e Mo2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Mo1 x1 x2) ==
            op Mo2 (hom x1) (hom x2)
    record MonoidRelInterp
      (A1 : Set) (A2 : Set)
      (Mo1 : Monoid A1)
      (Mo2 : Monoid A2) : Set where
      constructor MonoidRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-e :
          interp (e Mo1) (e Mo2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Mo1 x1 x2)
            (op Mo2 y1 y2)
    data MonoidTerm : Set where
      eL : MonoidTerm
      opL :
        MonoidTerm ->
        MonoidTerm -> MonoidTerm
    data ClMonoidTerm
      (A : Set) : Set where
      sing : A -> ClMonoidTerm A
      eCl : ClMonoidTerm A
      opCl :
        ClMonoidTerm A ->
        ClMonoidTerm A -> ClMonoidTerm A
    data OpMonoidTerm
      (n : Nat) : Set where
      v : Fin n -> OpMonoidTerm n
      eOL : OpMonoidTerm n
      opOL :
        OpMonoidTerm n ->
        OpMonoidTerm n -> OpMonoidTerm n
    data OpMonoidTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpMonoidTerm2 n A
      sing2 : A -> OpMonoidTerm2 n A
      eOL2 : OpMonoidTerm2 n A
      opOL2 :
        OpMonoidTerm2 n A ->
        OpMonoidTerm2 n A ->
        OpMonoidTerm2 n A
  
  module Monoid1 where
    record Monoid1
      (A : Set) : Set where
      constructor Monoid1C
      field
        1 : A
        op : A -> A -> A
        lunit_1 : (x : A) -> op 1 x == x
        runit_1 : (x : A) -> op x 1 == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
    record Monoid1Sig
      (AS : Set) : Set where
      constructor Monoid1SigSigC
      field
        1S : AS
        opS : AS -> AS -> AS
    record Monoid1Prod
      (AP : Set) : Set where
      constructor Monoid1ProdC
      field
        1P : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_1P :
          (xP : Prod AP AP) ->
          opP 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          opP xP 1P == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
    record Monoid1Hom
      (A1 : Set) (A2 : Set)
      (Mo1 : Monoid1 A1)
      (Mo2 : Monoid1 A2) : Set where
      constructor Monoid1HomC
      field
        hom : A1 -> A2
        pres-1 : hom (1 Mo1) == 1 Mo2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Mo1 x1 x2) ==
            op Mo2 (hom x1) (hom x2)
    record Monoid1RelInterp
      (A1 : Set) (A2 : Set)
      (Mo1 : Monoid1 A1)
      (Mo2 : Monoid1 A2) : Set where
      constructor Monoid1RelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-1 :
          interp (1 Mo1) (1 Mo2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Mo1 x1 x2)
            (op Mo2 y1 y2)
    data Monoid1LTerm : Set where
      1L : Monoid1LTerm
      opL :
        Monoid1LTerm ->
        Monoid1LTerm -> Monoid1LTerm
    data ClMonoid1ClTerm
      (A : Set) : Set where
      sing : A -> ClMonoid1ClTerm A
      1Cl : ClMonoid1ClTerm A
      opCl :
        ClMonoid1ClTerm A ->
        ClMonoid1ClTerm A ->
        ClMonoid1ClTerm A
    data OpMonoid1OLTerm
      (n : Nat) : Set where
      v : Fin n -> OpMonoid1OLTerm n
      1OL : OpMonoid1OLTerm n
      opOL :
        OpMonoid1OLTerm n ->
        OpMonoid1OLTerm n ->
        OpMonoid1OLTerm n
    data OpMonoid1OL2Term2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpMonoid1OL2Term2 n A
      sing2 :
        A -> OpMonoid1OL2Term2 n A
      1OL2 : OpMonoid1OL2Term2 n A
      opOL2 :
        OpMonoid1OL2Term2 n A ->
        OpMonoid1OL2Term2 n A ->
        OpMonoid1OL2Term2 n A
  
  module MoufangIdentity where
    record MoufangIdentity
      (A : Set) : Set where
      constructor MoufangIdentityC
      field
        op : A -> A -> A
        moufangId :
          (x : A) (y : A) (z : A) ->
          op (op z x) (op y z) ==
            op (op z (op x y)) z
    record MoufangIdentitySig
      (AS : Set) : Set where
      constructor MoufangIdentitySigSigC
      field
        opS : AS -> AS -> AS
    record MoufangIdentityProd
      (AP : Set) : Set where
      constructor MoufangIdentityProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        moufangIdP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP zP xP) (opP yP zP) ==
            opP (opP zP (opP xP yP)) zP
    record MoufangIdentityHom
      (A1 : Set) (A2 : Set)
      (Mo1 : MoufangIdentity A1)
      (Mo2 : MoufangIdentity A2) :
      Set where
      constructor MoufangIdentityHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Mo1 x1 x2) ==
            op Mo2 (hom x1) (hom x2)
    record MoufangIdentityRelInterp
      (A1 : Set) (A2 : Set)
      (Mo1 : MoufangIdentity A1)
      (Mo2 : MoufangIdentity A2) :
      Set where
      constructor MoufangIdentityRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Mo1 x1 x2)
            (op Mo2 y1 y2)
    data MoufangIdentityTerm
      : Set where
      opL :
        MoufangIdentityTerm ->
        MoufangIdentityTerm ->
        MoufangIdentityTerm
    data ClMoufangIdentityTerm
      (A : Set) : Set where
      sing :
        A -> ClMoufangIdentityTerm A
      opCl :
        ClMoufangIdentityTerm A ->
        ClMoufangIdentityTerm A ->
        ClMoufangIdentityTerm A
    data OpMoufangIdentityTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpMoufangIdentityTerm n
      opOL :
        OpMoufangIdentityTerm n ->
        OpMoufangIdentityTerm n ->
        OpMoufangIdentityTerm n
    data OpMoufangIdentityTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpMoufangIdentityTerm2 n A
      sing2 :
        A -> OpMoufangIdentityTerm2 n A
      opOL2 :
        OpMoufangIdentityTerm2 n A ->
        OpMoufangIdentityTerm2 n A ->
        OpMoufangIdentityTerm2 n A
  
  module MoufangLaw where
    record MoufangLaw
      (A : Set) : Set where
      constructor MoufangLawC
      field
        op : A -> A -> A
        moufangLaw :
          (e : A) (x : A) (y : A)
          (z : A) ->
          op y e == y ->
          op (op (op x y) z) x ==
            op x (op y (op (op e z) x))
    record MoufangLawSig
      (AS : Set) : Set where
      constructor MoufangLawSigSigC
      field
        opS : AS -> AS -> AS
    record MoufangLawProd
      (AP : Set) : Set where
      constructor MoufangLawProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        moufangLawP :
          (eP : Prod AP AP)
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP yP eP == yP ->
          opP (opP (opP xP yP) zP) xP ==
            opP xP
              (opP yP (opP (opP eP zP) xP))
    record MoufangLawHom
      (A1 : Set) (A2 : Set)
      (Mo1 : MoufangLaw A1)
      (Mo2 : MoufangLaw A2) :
      Set where
      constructor MoufangLawHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Mo1 x1 x2) ==
            op Mo2 (hom x1) (hom x2)
    record MoufangLawRelInterp
      (A1 : Set) (A2 : Set)
      (Mo1 : MoufangLaw A1)
      (Mo2 : MoufangLaw A2) :
      Set where
      constructor MoufangLawRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Mo1 x1 x2)
            (op Mo2 y1 y2)
    data MoufangLawTerm : Set where
      opL :
        MoufangLawTerm ->
        MoufangLawTerm -> MoufangLawTerm
    data ClMoufangLawTerm
      (A : Set) : Set where
      sing : A -> ClMoufangLawTerm A
      opCl :
        ClMoufangLawTerm A ->
        ClMoufangLawTerm A ->
        ClMoufangLawTerm A
    data OpMoufangLawTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpMoufangLawTerm n
      opOL :
        OpMoufangLawTerm n ->
        OpMoufangLawTerm n ->
        OpMoufangLawTerm n
    data OpMoufangLawTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpMoufangLawTerm2 n A
      sing2 :
        A -> OpMoufangLawTerm2 n A
      opOL2 :
        OpMoufangLawTerm2 n A ->
        OpMoufangLawTerm2 n A ->
        OpMoufangLawTerm2 n A
  
  module MoufangLoop where
    record MoufangLoop
      (A : Set) : Set where
      constructor MoufangLoopC
      field
        op : A -> A -> A
        e : A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
        rinv : A -> A -> A
        rightCancel :
          (x : A) (y : A) ->
          op (rinv y x) x == y
        rightCancelOp :
          (x : A) (y : A) ->
          rinv (op y x) x == y
        moufangId :
          (x : A) (y : A) (z : A) ->
          op (op z x) (op y z) ==
            op (op z (op x y)) z
    record MoufangLoopSig
      (AS : Set) : Set where
      constructor MoufangLoopSigSigC
      field
        opS : AS -> AS -> AS
        eS : AS
        linvS : AS -> AS -> AS
        rinvS : AS -> AS -> AS
    record MoufangLoopProd
      (AP : Set) : Set where
      constructor MoufangLoopProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        linvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rinvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        leftCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (linvP xP yP) == yP
        lefCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          linvP xP (opP xP yP) == yP
        rightCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP (rinvP yP xP) xP == yP
        rightCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          rinvP (opP yP xP) xP == yP
        moufangIdP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP zP xP) (opP yP zP) ==
            opP (opP zP (opP xP yP)) zP
    record MoufangLoopHom
      (A1 : Set) (A2 : Set)
      (Mo1 : MoufangLoop A1)
      (Mo2 : MoufangLoop A2) :
      Set where
      constructor MoufangLoopHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Mo1 x1 x2) ==
            op Mo2 (hom x1) (hom x2)
        pres-e : hom (e Mo1) == e Mo2
        pres-linv :
          (x1 : A1) (x2 : A1) ->
          hom (linv Mo1 x1 x2) ==
            linv Mo2 (hom x1) (hom x2)
        pres-rinv :
          (x1 : A1) (x2 : A1) ->
          hom (rinv Mo1 x1 x2) ==
            rinv Mo2 (hom x1) (hom x2)
    record MoufangLoopRelInterp
      (A1 : Set) (A2 : Set)
      (Mo1 : MoufangLoop A1)
      (Mo2 : MoufangLoop A2) :
      Set where
      constructor MoufangLoopRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Mo1 x1 x2)
            (op Mo2 y1 y2)
        interp-e :
          interp (e Mo1) (e Mo2)
        interp-linv :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (linv Mo1 x1 x2)
            (linv Mo2 y1 y2)
        interp-rinv :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (rinv Mo1 x1 x2)
            (rinv Mo2 y1 y2)
    data MoufangLoopLTerm
      : Set where
      opL :
        MoufangLoopLTerm ->
        MoufangLoopLTerm ->
        MoufangLoopLTerm
      eL : MoufangLoopLTerm
      linvL :
        MoufangLoopLTerm ->
        MoufangLoopLTerm ->
        MoufangLoopLTerm
      rinvL :
        MoufangLoopLTerm ->
        MoufangLoopLTerm ->
        MoufangLoopLTerm
    data ClMoufangLoopClTerm
      (A : Set) : Set where
      sing :
        A -> ClMoufangLoopClTerm A
      opCl :
        ClMoufangLoopClTerm A ->
        ClMoufangLoopClTerm A ->
        ClMoufangLoopClTerm A
      eCl : ClMoufangLoopClTerm A
      linvCl :
        ClMoufangLoopClTerm A ->
        ClMoufangLoopClTerm A ->
        ClMoufangLoopClTerm A
      rinvCl :
        ClMoufangLoopClTerm A ->
        ClMoufangLoopClTerm A ->
        ClMoufangLoopClTerm A
    data OpMoufangLoopOLTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpMoufangLoopOLTerm n
      opOL :
        OpMoufangLoopOLTerm n ->
        OpMoufangLoopOLTerm n ->
        OpMoufangLoopOLTerm n
      eOL : OpMoufangLoopOLTerm n
      linvOL :
        OpMoufangLoopOLTerm n ->
        OpMoufangLoopOLTerm n ->
        OpMoufangLoopOLTerm n
      rinvOL :
        OpMoufangLoopOLTerm n ->
        OpMoufangLoopOLTerm n ->
        OpMoufangLoopOLTerm n
    data OpMoufangLoopOL2Term2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpMoufangLoopOL2Term2 n A
      sing2 :
        A -> OpMoufangLoopOL2Term2 n A
      opOL2 :
        OpMoufangLoopOL2Term2 n A ->
        OpMoufangLoopOL2Term2 n A ->
        OpMoufangLoopOL2Term2 n A
      eOL2 : OpMoufangLoopOL2Term2 n A
      linvOL2 :
        OpMoufangLoopOL2Term2 n A ->
        OpMoufangLoopOL2Term2 n A ->
        OpMoufangLoopOL2Term2 n A
      rinvOL2 :
        OpMoufangLoopOL2Term2 n A ->
        OpMoufangLoopOL2Term2 n A ->
        OpMoufangLoopOL2Term2 n A
  
  module MoufangQuasiGroup where
    record MoufangQuasiGroup
      (A : Set) : Set where
      constructor MoufangQuasiGroupC
      field
        op : A -> A -> A
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
        rinv : A -> A -> A
        rightCancel :
          (x : A) (y : A) ->
          op (rinv y x) x == y
        rightCancelOp :
          (x : A) (y : A) ->
          rinv (op y x) x == y
        moufangLaw :
          (e : A) (x : A) (y : A)
          (z : A) ->
          op y e == y ->
          op (op (op x y) z) x ==
            op x (op y (op (op e z) x))
    record MoufangQuasiGroupSig
      (AS : Set) : Set where
      constructor MoufangQuasiGroupSigSigC
      field
        opS : AS -> AS -> AS
        linvS : AS -> AS -> AS
        rinvS : AS -> AS -> AS
    record MoufangQuasiGroupProd
      (AP : Set) : Set where
      constructor MoufangQuasiGroupProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        linvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rinvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (linvP xP yP) == yP
        lefCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          linvP xP (opP xP yP) == yP
        rightCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP (rinvP yP xP) xP == yP
        rightCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          rinvP (opP yP xP) xP == yP
        moufangLawP :
          (eP : Prod AP AP)
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP yP eP == yP ->
          opP (opP (opP xP yP) zP) xP ==
            opP xP
              (opP yP (opP (opP eP zP) xP))
    record MoufangQuasiGroupHom
      (A1 : Set) (A2 : Set)
      (Mo1 : MoufangQuasiGroup A1)
      (Mo2 : MoufangQuasiGroup A2) :
      Set where
      constructor MoufangQuasiGroupHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Mo1 x1 x2) ==
            op Mo2 (hom x1) (hom x2)
        pres-linv :
          (x1 : A1) (x2 : A1) ->
          hom (linv Mo1 x1 x2) ==
            linv Mo2 (hom x1) (hom x2)
        pres-rinv :
          (x1 : A1) (x2 : A1) ->
          hom (rinv Mo1 x1 x2) ==
            rinv Mo2 (hom x1) (hom x2)
    record MoufangQuasiGroupRelInterp
      (A1 : Set) (A2 : Set)
      (Mo1 : MoufangQuasiGroup A1)
      (Mo2 : MoufangQuasiGroup A2) :
      Set where
      constructor MoufangQuasiGroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Mo1 x1 x2)
            (op Mo2 y1 y2)
        interp-linv :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (linv Mo1 x1 x2)
            (linv Mo2 y1 y2)
        interp-rinv :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (rinv Mo1 x1 x2)
            (rinv Mo2 y1 y2)
    data MoufangQuasiGroupTerm
      : Set where
      opL :
        MoufangQuasiGroupTerm ->
        MoufangQuasiGroupTerm ->
        MoufangQuasiGroupTerm
      linvL :
        MoufangQuasiGroupTerm ->
        MoufangQuasiGroupTerm ->
        MoufangQuasiGroupTerm
      rinvL :
        MoufangQuasiGroupTerm ->
        MoufangQuasiGroupTerm ->
        MoufangQuasiGroupTerm
    data ClMoufangQuasiGroupTerm
      (A : Set) : Set where
      sing :
        A -> ClMoufangQuasiGroupTerm A
      opCl :
        ClMoufangQuasiGroupTerm A ->
        ClMoufangQuasiGroupTerm A ->
        ClMoufangQuasiGroupTerm A
      linvCl :
        ClMoufangQuasiGroupTerm A ->
        ClMoufangQuasiGroupTerm A ->
        ClMoufangQuasiGroupTerm A
      rinvCl :
        ClMoufangQuasiGroupTerm A ->
        ClMoufangQuasiGroupTerm A ->
        ClMoufangQuasiGroupTerm A
    data OpMoufangQuasiGroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpMoufangQuasiGroupTerm n
      opOL :
        OpMoufangQuasiGroupTerm n ->
        OpMoufangQuasiGroupTerm n ->
        OpMoufangQuasiGroupTerm n
      linvOL :
        OpMoufangQuasiGroupTerm n ->
        OpMoufangQuasiGroupTerm n ->
        OpMoufangQuasiGroupTerm n
      rinvOL :
        OpMoufangQuasiGroupTerm n ->
        OpMoufangQuasiGroupTerm n ->
        OpMoufangQuasiGroupTerm n
    data OpMoufangQuasiGroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpMoufangQuasiGroupTerm2 n A
      sing2 :
        A ->
        OpMoufangQuasiGroupTerm2 n A
      opOL2 :
        OpMoufangQuasiGroupTerm2 n A ->
        OpMoufangQuasiGroupTerm2 n A ->
        OpMoufangQuasiGroupTerm2 n A
      linvOL2 :
        OpMoufangQuasiGroupTerm2 n A ->
        OpMoufangQuasiGroupTerm2 n A ->
        OpMoufangQuasiGroupTerm2 n A
      rinvOL2 :
        OpMoufangQuasiGroupTerm2 n A ->
        OpMoufangQuasiGroupTerm2 n A ->
        OpMoufangQuasiGroupTerm2 n A
  
  module MultCommutativeMonoid where
    record MultCommutativeMonoid
      (A : Set) : Set where
      constructor MultCommutativeMonoidC
      field
        1 : A
        * : A -> A -> A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
    record MultCommutativeMonoidSig
      (AS : Set) : Set where
      constructor MultCommutativeMonoidSigSigC
      field
        1S : AS
        *S : AS -> AS -> AS
    record MultCommutativeMonoidProd
      (AP : Set) : Set where
      constructor MultCommutativeMonoidProdC
      field
        1P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
    record MultCommutativeMonoidHom
      (A1 : Set) (A2 : Set)
      (Mu1 : MultCommutativeMonoid A1)
      (Mu2 : MultCommutativeMonoid
         A2) : Set where
      constructor MultCommutativeMonoidHomC
      field
        hom : A1 -> A2
        pres-1 : hom (1 Mu1) == 1 Mu2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Mu1 x1 x2) ==
            * Mu2 (hom x1) (hom x2)
    record MultCommutativeMonoidRelInterp
      (A1 : Set) (A2 : Set)
      (Mu1 : MultCommutativeMonoid A1)
      (Mu2 : MultCommutativeMonoid
         A2) : Set where
      constructor MultCommutativeMonoidRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-1 :
          interp (1 Mu1) (1 Mu2)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Mu1 x1 x2)
            (* Mu2 y1 y2)
    data MultCommutativeMonoidTerm
      : Set where
      1L : MultCommutativeMonoidTerm
      *L :
        MultCommutativeMonoidTerm ->
        MultCommutativeMonoidTerm ->
        MultCommutativeMonoidTerm
    data ClMultCommutativeMonoidTerm
      (A : Set) : Set where
      sing :
        A ->
        ClMultCommutativeMonoidTerm A
      1Cl :
        ClMultCommutativeMonoidTerm A
      *Cl :
        ClMultCommutativeMonoidTerm A ->
        ClMultCommutativeMonoidTerm A ->
        ClMultCommutativeMonoidTerm A
    data OpMultCommutativeMonoidTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpMultCommutativeMonoidTerm n
      1OL :
        OpMultCommutativeMonoidTerm n
      *OL :
        OpMultCommutativeMonoidTerm n ->
        OpMultCommutativeMonoidTerm n ->
        OpMultCommutativeMonoidTerm n
    data OpMultCommutativeMonoidTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpMultCommutativeMonoidTerm2 n A
      sing2 :
        A ->
        OpMultCommutativeMonoidTerm2 n A
      1OL2 :
        OpMultCommutativeMonoidTerm2 n A
      *OL2 :
        OpMultCommutativeMonoidTerm2 n
          A ->
        OpMultCommutativeMonoidTerm2 n
          A ->
        OpMultCommutativeMonoidTerm2 n A
  
  module MultCommutativeSemigroup where
    record MultCommutativeSemigroup
      (A : Set) : Set where
      constructor MultCommutativeSemigroupC
      field
        * : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
    record MultCommutativeSemigroupSig
      (AS : Set) : Set where
      constructor MultCommutativeSemigroupSigSigC
      field
        *S : AS -> AS -> AS
    record MultCommutativeSemigroupProd
      (AP : Set) : Set where
      constructor MultCommutativeSemigroupProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
    record MultCommutativeSemigroupHom
      (A1 : Set) (A2 : Set)
      (Mu1 : MultCommutativeSemigroup
         A1)
      (Mu2 : MultCommutativeSemigroup
         A2) : Set where
      constructor MultCommutativeSemigroupHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Mu1 x1 x2) ==
            * Mu2 (hom x1) (hom x2)
    record MultCommutativeSemigroupRelInterp
      (A1 : Set) (A2 : Set)
      (Mu1 : MultCommutativeSemigroup
         A1)
      (Mu2 : MultCommutativeSemigroup
         A2) : Set where
      constructor MultCommutativeSemigroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Mu1 x1 x2)
            (* Mu2 y1 y2)
    data MultCommutativeSemigroupTerm
      : Set where
      *L :
        MultCommutativeSemigroupTerm ->
        MultCommutativeSemigroupTerm ->
        MultCommutativeSemigroupTerm
    data ClMultCommutativeSemigroupTerm
      (A : Set) : Set where
      sing :
        A ->
        ClMultCommutativeSemigroupTerm A
      *Cl :
        ClMultCommutativeSemigroupTerm
          A ->
        ClMultCommutativeSemigroupTerm
          A ->
        ClMultCommutativeSemigroupTerm A
    data OpMultCommutativeSemigroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpMultCommutativeSemigroupTerm n
      *OL :
        OpMultCommutativeSemigroupTerm
          n ->
        OpMultCommutativeSemigroupTerm
          n ->
        OpMultCommutativeSemigroupTerm n
    data OpMultCommutativeSemigroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpMultCommutativeSemigroupTerm2
          n
          A
      sing2 :
        A ->
        OpMultCommutativeSemigroupTerm2
          n
          A
      *OL2 :
        OpMultCommutativeSemigroupTerm2
          n
          A ->
        OpMultCommutativeSemigroupTerm2
          n
          A ->
        OpMultCommutativeSemigroupTerm2
          n
          A
  
  module MultGroup where
    record MultGroup
      (A : Set) : Set where
      constructor MultGroupC
      field
        1 : A
        * : A -> A -> A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        inv : A -> A
        leftInverse_inv_op_1 :
          (x : A) -> * x (inv x) == 1
        rightInverse_inv_op_1 :
          (x : A) -> * (inv x) x == 1
    record MultGroupSig
      (AS : Set) : Set where
      constructor MultGroupSigSigC
      field
        1S : AS
        *S : AS -> AS -> AS
        invS : AS -> AS
    record MultGroupProd
      (AP : Set) : Set where
      constructor MultGroupProdC
      field
        1P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        invP : Prod AP AP -> Prod AP AP
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftInverse_inv_op_1P :
          (xP : Prod AP AP) ->
          *P xP (invP xP) == 1P
        rightInverse_inv_op_1P :
          (xP : Prod AP AP) ->
          *P (invP xP) xP == 1P
    record MultGroupHom
      (A1 : Set) (A2 : Set)
      (Mu1 : MultGroup A1)
      (Mu2 : MultGroup A2) : Set where
      constructor MultGroupHomC
      field
        hom : A1 -> A2
        pres-1 : hom (1 Mu1) == 1 Mu2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Mu1 x1 x2) ==
            * Mu2 (hom x1) (hom x2)
        pres-inv :
          (x1 : A1) ->
          hom (inv Mu1 x1) ==
            inv Mu2 (hom x1)
    record MultGroupRelInterp
      (A1 : Set) (A2 : Set)
      (Mu1 : MultGroup A1)
      (Mu2 : MultGroup A2) : Set where
      constructor MultGroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-1 :
          interp (1 Mu1) (1 Mu2)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Mu1 x1 x2)
            (* Mu2 y1 y2)
        interp-inv :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (inv Mu1 x1) (inv Mu2 y1)
    data MultGroupTerm : Set where
      1L : MultGroupTerm
      *L :
        MultGroupTerm ->
        MultGroupTerm -> MultGroupTerm
      invL :
        MultGroupTerm -> MultGroupTerm
    data ClMultGroupTerm
      (A : Set) : Set where
      sing : A -> ClMultGroupTerm A
      1Cl : ClMultGroupTerm A
      *Cl :
        ClMultGroupTerm A ->
        ClMultGroupTerm A ->
        ClMultGroupTerm A
      invCl :
        ClMultGroupTerm A ->
        ClMultGroupTerm A
    data OpMultGroupTerm
      (n : Nat) : Set where
      v : Fin n -> OpMultGroupTerm n
      1OL : OpMultGroupTerm n
      *OL :
        OpMultGroupTerm n ->
        OpMultGroupTerm n ->
        OpMultGroupTerm n
      invOL :
        OpMultGroupTerm n ->
        OpMultGroupTerm n
    data OpMultGroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpMultGroupTerm2 n A
      sing2 :
        A -> OpMultGroupTerm2 n A
      1OL2 : OpMultGroupTerm2 n A
      *OL2 :
        OpMultGroupTerm2 n A ->
        OpMultGroupTerm2 n A ->
        OpMultGroupTerm2 n A
      invOL2 :
        OpMultGroupTerm2 n A ->
        OpMultGroupTerm2 n A
  
  module MultMagma where
    record MultMagma
      (A : Set) : Set where
      constructor MultMagmaC
      field
        * : A -> A -> A
    record MultMagmaSig
      (AS : Set) : Set where
      constructor MultMagmaSigSigC
      field
        *S : AS -> AS -> AS
    record MultMagmaProd
      (AP : Set) : Set where
      constructor MultMagmaProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record MultMagmaHom
      (A1 : Set) (A2 : Set)
      (Mu1 : MultMagma A1)
      (Mu2 : MultMagma A2) : Set where
      constructor MultMagmaHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Mu1 x1 x2) ==
            * Mu2 (hom x1) (hom x2)
    record MultMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Mu1 : MultMagma A1)
      (Mu2 : MultMagma A2) : Set where
      constructor MultMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Mu1 x1 x2)
            (* Mu2 y1 y2)
    data MultMagmaTerm : Set where
      *L :
        MultMagmaTerm ->
        MultMagmaTerm -> MultMagmaTerm
    data ClMultMagmaTerm
      (A : Set) : Set where
      sing : A -> ClMultMagmaTerm A
      *Cl :
        ClMultMagmaTerm A ->
        ClMultMagmaTerm A ->
        ClMultMagmaTerm A
    data OpMultMagmaTerm
      (n : Nat) : Set where
      v : Fin n -> OpMultMagmaTerm n
      *OL :
        OpMultMagmaTerm n ->
        OpMultMagmaTerm n ->
        OpMultMagmaTerm n
    data OpMultMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpMultMagmaTerm2 n A
      sing2 :
        A -> OpMultMagmaTerm2 n A
      *OL2 :
        OpMultMagmaTerm2 n A ->
        OpMultMagmaTerm2 n A ->
        OpMultMagmaTerm2 n A
  
  module MultMeetSemilattice where
    record MultMeetSemilattice
      (A : Set) : Set where
      constructor MultMeetSemilatticeC
      field
        * : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        idempotent_* :
          (x : A) -> * x x == x
    record MultMeetSemilatticeSig
      (AS : Set) : Set where
      constructor MultMeetSemilatticeSigSigC
      field
        *S : AS -> AS -> AS
    record MultMeetSemilatticeProd
      (AP : Set) : Set where
      constructor MultMeetSemilatticeProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
    record MultMeetSemilatticeHom
      (A1 : Set) (A2 : Set)
      (Mu1 : MultMeetSemilattice A1)
      (Mu2 : MultMeetSemilattice A2) :
      Set where
      constructor MultMeetSemilatticeHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Mu1 x1 x2) ==
            * Mu2 (hom x1) (hom x2)
    record MultMeetSemilatticeRelInterp
      (A1 : Set) (A2 : Set)
      (Mu1 : MultMeetSemilattice A1)
      (Mu2 : MultMeetSemilattice A2) :
      Set where
      constructor MultMeetSemilatticeRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Mu1 x1 x2)
            (* Mu2 y1 y2)
    data MultMeetSemilatticeTerm
      : Set where
      *L :
        MultMeetSemilatticeTerm ->
        MultMeetSemilatticeTerm ->
        MultMeetSemilatticeTerm
    data ClMultMeetSemilatticeTerm
      (A : Set) : Set where
      sing :
        A -> ClMultMeetSemilatticeTerm A
      *Cl :
        ClMultMeetSemilatticeTerm A ->
        ClMultMeetSemilatticeTerm A ->
        ClMultMeetSemilatticeTerm A
    data OpMultMeetSemilatticeTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpMultMeetSemilatticeTerm n
      *OL :
        OpMultMeetSemilatticeTerm n ->
        OpMultMeetSemilatticeTerm n ->
        OpMultMeetSemilatticeTerm n
    data OpMultMeetSemilatticeTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpMultMeetSemilatticeTerm2 n A
      sing2 :
        A ->
        OpMultMeetSemilatticeTerm2 n A
      *OL2 :
        OpMultMeetSemilatticeTerm2 n
          A ->
        OpMultMeetSemilatticeTerm2 n
          A ->
        OpMultMeetSemilatticeTerm2 n A
  
  module MultMonoid where
    record MultMonoid
      (A : Set) : Set where
      constructor MultMonoidC
      field
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
    record MultMonoidSig
      (AS : Set) : Set where
      constructor MultMonoidSigSigC
      field
        *S : AS -> AS -> AS
        1S : AS
    record MultMonoidProd
      (AP : Set) : Set where
      constructor MultMonoidProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
    record MultMonoidHom
      (A1 : Set) (A2 : Set)
      (Mu1 : MultMonoid A1)
      (Mu2 : MultMonoid A2) :
      Set where
      constructor MultMonoidHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Mu1 x1 x2) ==
            * Mu2 (hom x1) (hom x2)
        pres-1 : hom (1 Mu1) == 1 Mu2
    record MultMonoidRelInterp
      (A1 : Set) (A2 : Set)
      (Mu1 : MultMonoid A1)
      (Mu2 : MultMonoid A2) :
      Set where
      constructor MultMonoidRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Mu1 x1 x2)
            (* Mu2 y1 y2)
        interp-1 :
          interp (1 Mu1) (1 Mu2)
    data MultMonoidTerm : Set where
      *L :
        MultMonoidTerm ->
        MultMonoidTerm -> MultMonoidTerm
      1L : MultMonoidTerm
    data ClMultMonoidTerm
      (A : Set) : Set where
      sing : A -> ClMultMonoidTerm A
      *Cl :
        ClMultMonoidTerm A ->
        ClMultMonoidTerm A ->
        ClMultMonoidTerm A
      1Cl : ClMultMonoidTerm A
    data OpMultMonoidTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpMultMonoidTerm n
      *OL :
        OpMultMonoidTerm n ->
        OpMultMonoidTerm n ->
        OpMultMonoidTerm n
      1OL : OpMultMonoidTerm n
    data OpMultMonoidTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpMultMonoidTerm2 n A
      sing2 :
        A -> OpMultMonoidTerm2 n A
      *OL2 :
        OpMultMonoidTerm2 n A ->
        OpMultMonoidTerm2 n A ->
        OpMultMonoidTerm2 n A
      1OL2 : OpMultMonoidTerm2 n A
  
  module MultPointedMagma where
    record MultPointedMagma
      (A : Set) : Set where
      constructor MultPointedMagmaC
      field
        1 : A
        * : A -> A -> A
    record MultPointedMagmaSig
      (AS : Set) : Set where
      constructor MultPointedMagmaSigSigC
      field
        1S : AS
        *S : AS -> AS -> AS
    record MultPointedMagmaProd
      (AP : Set) : Set where
      constructor MultPointedMagmaProdC
      field
        1P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record MultPointedMagmaHom
      (A1 : Set) (A2 : Set)
      (Mu1 : MultPointedMagma A1)
      (Mu2 : MultPointedMagma A2) :
      Set where
      constructor MultPointedMagmaHomC
      field
        hom : A1 -> A2
        pres-1 : hom (1 Mu1) == 1 Mu2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Mu1 x1 x2) ==
            * Mu2 (hom x1) (hom x2)
    record MultPointedMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Mu1 : MultPointedMagma A1)
      (Mu2 : MultPointedMagma A2) :
      Set where
      constructor MultPointedMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-1 :
          interp (1 Mu1) (1 Mu2)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Mu1 x1 x2)
            (* Mu2 y1 y2)
    data MultPointedMagmaTerm
      : Set where
      1L : MultPointedMagmaTerm
      *L :
        MultPointedMagmaTerm ->
        MultPointedMagmaTerm ->
        MultPointedMagmaTerm
    data ClMultPointedMagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClMultPointedMagmaTerm A
      1Cl : ClMultPointedMagmaTerm A
      *Cl :
        ClMultPointedMagmaTerm A ->
        ClMultPointedMagmaTerm A ->
        ClMultPointedMagmaTerm A
    data OpMultPointedMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpMultPointedMagmaTerm n
      1OL : OpMultPointedMagmaTerm n
      *OL :
        OpMultPointedMagmaTerm n ->
        OpMultPointedMagmaTerm n ->
        OpMultPointedMagmaTerm n
    data OpMultPointedMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpMultPointedMagmaTerm2 n A
      sing2 :
        A -> OpMultPointedMagmaTerm2 n A
      1OL2 :
        OpMultPointedMagmaTerm2 n A
      *OL2 :
        OpMultPointedMagmaTerm2 n A ->
        OpMultPointedMagmaTerm2 n A ->
        OpMultPointedMagmaTerm2 n A
  
  module MultPointedSemigroup where
    record MultPointedSemigroup
      (A : Set) : Set where
      constructor MultPointedSemigroupC
      field
        1 : A
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
    record MultPointedSemigroupSig
      (AS : Set) : Set where
      constructor MultPointedSemigroupSigSigC
      field
        1S : AS
        *S : AS -> AS -> AS
    record MultPointedSemigroupProd
      (AP : Set) : Set where
      constructor MultPointedSemigroupProdC
      field
        1P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
    record MultPointedSemigroupHom
      (A1 : Set) (A2 : Set)
      (Mu1 : MultPointedSemigroup A1)
      (Mu2 : MultPointedSemigroup
         A2) : Set where
      constructor MultPointedSemigroupHomC
      field
        hom : A1 -> A2
        pres-1 : hom (1 Mu1) == 1 Mu2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Mu1 x1 x2) ==
            * Mu2 (hom x1) (hom x2)
    record MultPointedSemigroupRelInterp
      (A1 : Set) (A2 : Set)
      (Mu1 : MultPointedSemigroup A1)
      (Mu2 : MultPointedSemigroup
         A2) : Set where
      constructor MultPointedSemigroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-1 :
          interp (1 Mu1) (1 Mu2)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Mu1 x1 x2)
            (* Mu2 y1 y2)
    data MultPointedSemigroupTerm
      : Set where
      1L : MultPointedSemigroupTerm
      *L :
        MultPointedSemigroupTerm ->
        MultPointedSemigroupTerm ->
        MultPointedSemigroupTerm
    data ClMultPointedSemigroupTerm
      (A : Set) : Set where
      sing :
        A ->
        ClMultPointedSemigroupTerm A
      1Cl :
        ClMultPointedSemigroupTerm A
      *Cl :
        ClMultPointedSemigroupTerm A ->
        ClMultPointedSemigroupTerm A ->
        ClMultPointedSemigroupTerm A
    data OpMultPointedSemigroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpMultPointedSemigroupTerm n
      1OL :
        OpMultPointedSemigroupTerm n
      *OL :
        OpMultPointedSemigroupTerm n ->
        OpMultPointedSemigroupTerm n ->
        OpMultPointedSemigroupTerm n
    data OpMultPointedSemigroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpMultPointedSemigroupTerm2 n A
      sing2 :
        A ->
        OpMultPointedSemigroupTerm2 n A
      1OL2 :
        OpMultPointedSemigroupTerm2 n A
      *OL2 :
        OpMultPointedSemigroupTerm2 n
          A ->
        OpMultPointedSemigroupTerm2 n
          A ->
        OpMultPointedSemigroupTerm2 n A
  
  module MultSemigroup where
    record MultSemigroup
      (A : Set) : Set where
      constructor MultSemigroupC
      field
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
    record MultSemigroupSig
      (AS : Set) : Set where
      constructor MultSemigroupSigSigC
      field
        *S : AS -> AS -> AS
    record MultSemigroupProd
      (AP : Set) : Set where
      constructor MultSemigroupProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
    record MultSemigroupHom
      (A1 : Set) (A2 : Set)
      (Mu1 : MultSemigroup A1)
      (Mu2 : MultSemigroup A2) :
      Set where
      constructor MultSemigroupHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Mu1 x1 x2) ==
            * Mu2 (hom x1) (hom x2)
    record MultSemigroupRelInterp
      (A1 : Set) (A2 : Set)
      (Mu1 : MultSemigroup A1)
      (Mu2 : MultSemigroup A2) :
      Set where
      constructor MultSemigroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Mu1 x1 x2)
            (* Mu2 y1 y2)
    data MultSemigroupTerm
      : Set where
      *L :
        MultSemigroupTerm ->
        MultSemigroupTerm ->
        MultSemigroupTerm
    data ClMultSemigroupTerm
      (A : Set) : Set where
      sing :
        A -> ClMultSemigroupTerm A
      *Cl :
        ClMultSemigroupTerm A ->
        ClMultSemigroupTerm A ->
        ClMultSemigroupTerm A
    data OpMultSemigroupTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpMultSemigroupTerm n
      *OL :
        OpMultSemigroupTerm n ->
        OpMultSemigroupTerm n ->
        OpMultSemigroupTerm n
    data OpMultSemigroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpMultSemigroupTerm2 n A
      sing2 :
        A -> OpMultSemigroupTerm2 n A
      *OL2 :
        OpMultSemigroupTerm2 n A ->
        OpMultSemigroupTerm2 n A ->
        OpMultSemigroupTerm2 n A
  
  module MultSemilattice_RingoidSig where
    record MultSemilattice_RingoidSig
      (A : Set) : Set where
      constructor MultSemilattice_RingoidSigC
      field
        * : A -> A -> A
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        idempotent_* :
          (x : A) -> * x x == x
        + : A -> A -> A
    record MultSemilattice_RingoidSigSig
      (AS : Set) : Set where
      constructor MultSemilattice_RingoidSigSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record MultSemilattice_RingoidSigProd
      (AP : Set) : Set where
      constructor MultSemilattice_RingoidSigProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        idempotent_*P :
          (xP : Prod AP AP) ->
          *P xP xP == xP
    record MultSemilattice_RingoidSigHom
      (A1 : Set) (A2 : Set)
      (Mu1 : MultSemilattice_RingoidSig
         A1)
      (Mu2 : MultSemilattice_RingoidSig
         A2) : Set where
      constructor MultSemilattice_RingoidSigHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Mu1 x1 x2) ==
            * Mu2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Mu1 x1 x2) ==
            + Mu2 (hom x1) (hom x2)
    record MultSemilattice_RingoidSigRelInterp
      (A1 : Set) (A2 : Set)
      (Mu1 : MultSemilattice_RingoidSig
         A1)
      (Mu2 : MultSemilattice_RingoidSig
         A2) : Set where
      constructor MultSemilattice_RingoidSigRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Mu1 x1 x2)
            (* Mu2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Mu1 x1 x2)
            (+ Mu2 y1 y2)
    data MultSemilattice_RingoidSigTerm
      : Set where
      *L :
        MultSemilattice_RingoidSigTerm ->
        MultSemilattice_RingoidSigTerm ->
        MultSemilattice_RingoidSigTerm
      +L :
        MultSemilattice_RingoidSigTerm ->
        MultSemilattice_RingoidSigTerm ->
        MultSemilattice_RingoidSigTerm
    data ClMultSemilattice_RingoidSigTerm
      (A : Set) : Set where
      sing :
        A ->
        ClMultSemilattice_RingoidSigTerm
          A
      *Cl :
        ClMultSemilattice_RingoidSigTerm
          A ->
        ClMultSemilattice_RingoidSigTerm
          A ->
        ClMultSemilattice_RingoidSigTerm
          A
      +Cl :
        ClMultSemilattice_RingoidSigTerm
          A ->
        ClMultSemilattice_RingoidSigTerm
          A ->
        ClMultSemilattice_RingoidSigTerm
          A
    data OpMultSemilattice_RingoidSigTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpMultSemilattice_RingoidSigTerm
          n
      *OL :
        OpMultSemilattice_RingoidSigTerm
          n ->
        OpMultSemilattice_RingoidSigTerm
          n ->
        OpMultSemilattice_RingoidSigTerm
          n
      +OL :
        OpMultSemilattice_RingoidSigTerm
          n ->
        OpMultSemilattice_RingoidSigTerm
          n ->
        OpMultSemilattice_RingoidSigTerm
          n
    data OpMultSemilattice_RingoidSigTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpMultSemilattice_RingoidSigTerm2
          n
          A
      sing2 :
        A ->
        OpMultSemilattice_RingoidSigTerm2
          n
          A
      *OL2 :
        OpMultSemilattice_RingoidSigTerm2
          n
          A ->
        OpMultSemilattice_RingoidSigTerm2
          n
          A ->
        OpMultSemilattice_RingoidSigTerm2
          n
          A
      +OL2 :
        OpMultSemilattice_RingoidSigTerm2
          n
          A ->
        OpMultSemilattice_RingoidSigTerm2
          n
          A ->
        OpMultSemilattice_RingoidSigTerm2
          n
          A
  
  module MultUnaryAntiDistribution where
    record MultUnaryAntiDistribution
      (A : Set) : Set where
      constructor MultUnaryAntiDistributionC
      field
        prim : A -> A
        * : A -> A -> A
        antidis_prim_* :
          (x : A) (y : A) ->
          prim (* x y) ==
            * (prim y) (prim x)
    record MultUnaryAntiDistributionSig
      (AS : Set) : Set where
      constructor MultUnaryAntiDistributionSigSigC
      field
        primS : AS -> AS
        *S : AS -> AS -> AS
    record MultUnaryAntiDistributionProd
      (AP : Set) : Set where
      constructor MultUnaryAntiDistributionProdC
      field
        primP : Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        antidis_prim_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (*P xP yP) ==
            *P (primP yP) (primP xP)
    record MultUnaryAntiDistributionHom
      (A1 : Set) (A2 : Set)
      (Mu1 : MultUnaryAntiDistribution
         A1)
      (Mu2 : MultUnaryAntiDistribution
         A2) : Set where
      constructor MultUnaryAntiDistributionHomC
      field
        hom : A1 -> A2
        pres-prim :
          (x1 : A1) ->
          hom (prim Mu1 x1) ==
            prim Mu2 (hom x1)
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Mu1 x1 x2) ==
            * Mu2 (hom x1) (hom x2)
    record MultUnaryAntiDistributionRelInterp
      (A1 : Set) (A2 : Set)
      (Mu1 : MultUnaryAntiDistribution
         A1)
      (Mu2 : MultUnaryAntiDistribution
         A2) : Set where
      constructor MultUnaryAntiDistributionRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim Mu1 x1)
            (prim Mu2 y1)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Mu1 x1 x2)
            (* Mu2 y1 y2)
    data MultUnaryAntiDistributionTerm
      : Set where
      primL :
        MultUnaryAntiDistributionTerm ->
        MultUnaryAntiDistributionTerm
      *L :
        MultUnaryAntiDistributionTerm ->
        MultUnaryAntiDistributionTerm ->
        MultUnaryAntiDistributionTerm
    data ClMultUnaryAntiDistributionTerm
      (A : Set) : Set where
      sing :
        A ->
        ClMultUnaryAntiDistributionTerm
          A
      primCl :
        ClMultUnaryAntiDistributionTerm
          A ->
        ClMultUnaryAntiDistributionTerm
          A
      *Cl :
        ClMultUnaryAntiDistributionTerm
          A ->
        ClMultUnaryAntiDistributionTerm
          A ->
        ClMultUnaryAntiDistributionTerm
          A
    data OpMultUnaryAntiDistributionTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpMultUnaryAntiDistributionTerm
          n
      primOL :
        OpMultUnaryAntiDistributionTerm
          n ->
        OpMultUnaryAntiDistributionTerm
          n
      *OL :
        OpMultUnaryAntiDistributionTerm
          n ->
        OpMultUnaryAntiDistributionTerm
          n ->
        OpMultUnaryAntiDistributionTerm
          n
    data OpMultUnaryAntiDistributionTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpMultUnaryAntiDistributionTerm2
          n
          A
      sing2 :
        A ->
        OpMultUnaryAntiDistributionTerm2
          n
          A
      primOL2 :
        OpMultUnaryAntiDistributionTerm2
          n
          A ->
        OpMultUnaryAntiDistributionTerm2
          n
          A
      *OL2 :
        OpMultUnaryAntiDistributionTerm2
          n
          A ->
        OpMultUnaryAntiDistributionTerm2
          n
          A ->
        OpMultUnaryAntiDistributionTerm2
          n
          A
  
  module MultUnital where
    record MultUnital
      (A : Set) : Set where
      constructor MultUnitalC
      field
        1 : A
        * : A -> A -> A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
    record MultUnitalSig
      (AS : Set) : Set where
      constructor MultUnitalSigSigC
      field
        1S : AS
        *S : AS -> AS -> AS
    record MultUnitalProd
      (AP : Set) : Set where
      constructor MultUnitalProdC
      field
        1P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
    record MultUnitalHom
      (A1 : Set) (A2 : Set)
      (Mu1 : MultUnital A1)
      (Mu2 : MultUnital A2) :
      Set where
      constructor MultUnitalHomC
      field
        hom : A1 -> A2
        pres-1 : hom (1 Mu1) == 1 Mu2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Mu1 x1 x2) ==
            * Mu2 (hom x1) (hom x2)
    record MultUnitalRelInterp
      (A1 : Set) (A2 : Set)
      (Mu1 : MultUnital A1)
      (Mu2 : MultUnital A2) :
      Set where
      constructor MultUnitalRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-1 :
          interp (1 Mu1) (1 Mu2)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Mu1 x1 x2)
            (* Mu2 y1 y2)
    data MultUnitalTerm : Set where
      1L : MultUnitalTerm
      *L :
        MultUnitalTerm ->
        MultUnitalTerm -> MultUnitalTerm
    data ClMultUnitalTerm
      (A : Set) : Set where
      sing : A -> ClMultUnitalTerm A
      1Cl : ClMultUnitalTerm A
      *Cl :
        ClMultUnitalTerm A ->
        ClMultUnitalTerm A ->
        ClMultUnitalTerm A
    data OpMultUnitalTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpMultUnitalTerm n
      1OL : OpMultUnitalTerm n
      *OL :
        OpMultUnitalTerm n ->
        OpMultUnitalTerm n ->
        OpMultUnitalTerm n
    data OpMultUnitalTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpMultUnitalTerm2 n A
      sing2 :
        A -> OpMultUnitalTerm2 n A
      1OL2 : OpMultUnitalTerm2 n A
      *OL2 :
        OpMultUnitalTerm2 n A ->
        OpMultUnitalTerm2 n A ->
        OpMultUnitalTerm2 n A
  
  module NearRing where
    record NearRing
      (A : Set) : Set where
      constructor NearRingC
      field
        * : A -> A -> A
        + : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record NearRingSig
      (AS : Set) : Set where
      constructor NearRingSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        0S : AS
        negS : AS -> AS
    record NearRingProd
      (AP : Set) : Set where
      constructor NearRingProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        negP : Prod AP AP -> Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        leftInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P xP (negP xP) == 0P
        rightInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P (negP xP) xP == 0P
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record NearRingHom
      (A1 : Set) (A2 : Set)
      (Ne1 : NearRing A1)
      (Ne2 : NearRing A2) : Set where
      constructor NearRingHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Ne1 x1 x2) ==
            * Ne2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ne1 x1 x2) ==
            + Ne2 (hom x1) (hom x2)
        pres-0 : hom (0 Ne1) == 0 Ne2
        pres-neg :
          (x1 : A1) ->
          hom (neg Ne1 x1) ==
            neg Ne2 (hom x1)
    record NearRingRelInterp
      (A1 : Set) (A2 : Set)
      (Ne1 : NearRing A1)
      (Ne2 : NearRing A2) : Set where
      constructor NearRingRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Ne1 x1 x2)
            (* Ne2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ne1 x1 x2)
            (+ Ne2 y1 y2)
        interp-0 :
          interp (0 Ne1) (0 Ne2)
        interp-neg :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (neg Ne1 x1) (neg Ne2 y1)
    data NearRingTerm : Set where
      *L :
        NearRingTerm ->
        NearRingTerm -> NearRingTerm
      +L :
        NearRingTerm ->
        NearRingTerm -> NearRingTerm
      0L : NearRingTerm
      negL :
        NearRingTerm -> NearRingTerm
    data ClNearRingTerm
      (A : Set) : Set where
      sing : A -> ClNearRingTerm A
      *Cl :
        ClNearRingTerm A ->
        ClNearRingTerm A ->
        ClNearRingTerm A
      +Cl :
        ClNearRingTerm A ->
        ClNearRingTerm A ->
        ClNearRingTerm A
      0Cl : ClNearRingTerm A
      negCl :
        ClNearRingTerm A ->
        ClNearRingTerm A
    data OpNearRingTerm
      (n : Nat) : Set where
      v : Fin n -> OpNearRingTerm n
      *OL :
        OpNearRingTerm n ->
        OpNearRingTerm n ->
        OpNearRingTerm n
      +OL :
        OpNearRingTerm n ->
        OpNearRingTerm n ->
        OpNearRingTerm n
      0OL : OpNearRingTerm n
      negOL :
        OpNearRingTerm n ->
        OpNearRingTerm n
    data OpNearRingTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpNearRingTerm2 n A
      sing2 : A -> OpNearRingTerm2 n A
      *OL2 :
        OpNearRingTerm2 n A ->
        OpNearRingTerm2 n A ->
        OpNearRingTerm2 n A
      +OL2 :
        OpNearRingTerm2 n A ->
        OpNearRingTerm2 n A ->
        OpNearRingTerm2 n A
      0OL2 : OpNearRingTerm2 n A
      negOL2 :
        OpNearRingTerm2 n A ->
        OpNearRingTerm2 n A
  
  module NearSemiring where
    record NearSemiring
      (A : Set) : Set where
      constructor NearSemiringC
      field
        * : A -> A -> A
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record NearSemiringSig
      (AS : Set) : Set where
      constructor NearSemiringSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record NearSemiringProd
      (AP : Set) : Set where
      constructor NearSemiringProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record NearSemiringHom
      (A1 : Set) (A2 : Set)
      (Ne1 : NearSemiring A1)
      (Ne2 : NearSemiring A2) :
      Set where
      constructor NearSemiringHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Ne1 x1 x2) ==
            * Ne2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ne1 x1 x2) ==
            + Ne2 (hom x1) (hom x2)
    record NearSemiringRelInterp
      (A1 : Set) (A2 : Set)
      (Ne1 : NearSemiring A1)
      (Ne2 : NearSemiring A2) :
      Set where
      constructor NearSemiringRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Ne1 x1 x2)
            (* Ne2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ne1 x1 x2)
            (+ Ne2 y1 y2)
    data NearSemiringTerm
      : Set where
      *L :
        NearSemiringTerm ->
        NearSemiringTerm ->
        NearSemiringTerm
      +L :
        NearSemiringTerm ->
        NearSemiringTerm ->
        NearSemiringTerm
    data ClNearSemiringTerm
      (A : Set) : Set where
      sing :
        A -> ClNearSemiringTerm A
      *Cl :
        ClNearSemiringTerm A ->
        ClNearSemiringTerm A ->
        ClNearSemiringTerm A
      +Cl :
        ClNearSemiringTerm A ->
        ClNearSemiringTerm A ->
        ClNearSemiringTerm A
    data OpNearSemiringTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpNearSemiringTerm n
      *OL :
        OpNearSemiringTerm n ->
        OpNearSemiringTerm n ->
        OpNearSemiringTerm n
      +OL :
        OpNearSemiringTerm n ->
        OpNearSemiringTerm n ->
        OpNearSemiringTerm n
    data OpNearSemiringTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpNearSemiringTerm2 n A
      sing2 :
        A -> OpNearSemiringTerm2 n A
      *OL2 :
        OpNearSemiringTerm2 n A ->
        OpNearSemiringTerm2 n A ->
        OpNearSemiringTerm2 n A
      +OL2 :
        OpNearSemiringTerm2 n A ->
        OpNearSemiringTerm2 n A ->
        OpNearSemiringTerm2 n A
  
  module NonDistributiveAddPreSemiring where
    record NonDistributiveAddPreSemiring
      (A : Set) : Set where
      constructor NonDistributiveAddPreSemiringC
      field
        + : A -> A -> A
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        * : A -> A -> A
    record NonDistributiveAddPreSemiringSig
      (AS : Set) : Set where
      constructor NonDistributiveAddPreSemiringSigSigC
      field
        +S : AS -> AS -> AS
        *S : AS -> AS -> AS
    record NonDistributiveAddPreSemiringProd
      (AP : Set) : Set where
      constructor NonDistributiveAddPreSemiringProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
    record NonDistributiveAddPreSemiringHom
      (A1 : Set) (A2 : Set)
      (No1 : NonDistributiveAddPreSemiring
         A1)
      (No2 : NonDistributiveAddPreSemiring
         A2) : Set where
      constructor NonDistributiveAddPreSemiringHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ No1 x1 x2) ==
            + No2 (hom x1) (hom x2)
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* No1 x1 x2) ==
            * No2 (hom x1) (hom x2)
    record NonDistributiveAddPreSemiringRelInterp
      (A1 : Set) (A2 : Set)
      (No1 : NonDistributiveAddPreSemiring
         A1)
      (No2 : NonDistributiveAddPreSemiring
         A2) : Set where
      constructor NonDistributiveAddPreSemiringRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ No1 x1 x2)
            (+ No2 y1 y2)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* No1 x1 x2)
            (* No2 y1 y2)
    data NonDistributiveAddPreSemiringTerm
      : Set where
      +L :
        NonDistributiveAddPreSemiringTerm ->
        NonDistributiveAddPreSemiringTerm ->
        NonDistributiveAddPreSemiringTerm
      *L :
        NonDistributiveAddPreSemiringTerm ->
        NonDistributiveAddPreSemiringTerm ->
        NonDistributiveAddPreSemiringTerm
    data ClNonDistributiveAddPreSemiringTerm
      (A : Set) : Set where
      sing :
        A ->
        ClNonDistributiveAddPreSemiringTerm
          A
      +Cl :
        ClNonDistributiveAddPreSemiringTerm
          A ->
        ClNonDistributiveAddPreSemiringTerm
          A ->
        ClNonDistributiveAddPreSemiringTerm
          A
      *Cl :
        ClNonDistributiveAddPreSemiringTerm
          A ->
        ClNonDistributiveAddPreSemiringTerm
          A ->
        ClNonDistributiveAddPreSemiringTerm
          A
    data OpNonDistributiveAddPreSemiringTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpNonDistributiveAddPreSemiringTerm
          n
      +OL :
        OpNonDistributiveAddPreSemiringTerm
          n ->
        OpNonDistributiveAddPreSemiringTerm
          n ->
        OpNonDistributiveAddPreSemiringTerm
          n
      *OL :
        OpNonDistributiveAddPreSemiringTerm
          n ->
        OpNonDistributiveAddPreSemiringTerm
          n ->
        OpNonDistributiveAddPreSemiringTerm
          n
    data OpNonDistributiveAddPreSemiringTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpNonDistributiveAddPreSemiringTerm2
          n
          A
      sing2 :
        A ->
        OpNonDistributiveAddPreSemiringTerm2
          n
          A
      +OL2 :
        OpNonDistributiveAddPreSemiringTerm2
          n
          A ->
        OpNonDistributiveAddPreSemiringTerm2
          n
          A ->
        OpNonDistributiveAddPreSemiringTerm2
          n
          A
      *OL2 :
        OpNonDistributiveAddPreSemiringTerm2
          n
          A ->
        OpNonDistributiveAddPreSemiringTerm2
          n
          A ->
        OpNonDistributiveAddPreSemiringTerm2
          n
          A
  
  module NonassociativeNondistributiveRing where
    record NonassociativeNondistributiveRing
      (A : Set) : Set where
      constructor NonassociativeNondistributiveRingC
      field
        * : A -> A -> A
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        inv : A -> A
        leftInverse_inv_op_1 :
          (x : A) -> * x (inv x) == 1
        rightInverse_inv_op_1 :
          (x : A) -> * (inv x) x == 1
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        + : A -> A -> A
    record NonassociativeNondistributiveRingSig
      (AS : Set) : Set where
      constructor NonassociativeNondistributiveRingSigSigC
      field
        *S : AS -> AS -> AS
        1S : AS
        invS : AS -> AS
        +S : AS -> AS -> AS
    record NonassociativeNondistributiveRingProd
      (AP : Set) : Set where
      constructor NonassociativeNondistributiveRingProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        invP : Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftInverse_inv_op_1P :
          (xP : Prod AP AP) ->
          *P xP (invP xP) == 1P
        rightInverse_inv_op_1P :
          (xP : Prod AP AP) ->
          *P (invP xP) xP == 1P
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
    record NonassociativeNondistributiveRingHom
      (A1 : Set) (A2 : Set)
      (No1 : NonassociativeNondistributiveRing
         A1)
      (No2 : NonassociativeNondistributiveRing
         A2) : Set where
      constructor NonassociativeNondistributiveRingHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* No1 x1 x2) ==
            * No2 (hom x1) (hom x2)
        pres-1 : hom (1 No1) == 1 No2
        pres-inv :
          (x1 : A1) ->
          hom (inv No1 x1) ==
            inv No2 (hom x1)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ No1 x1 x2) ==
            + No2 (hom x1) (hom x2)
    record NonassociativeNondistributiveRingRelInterp
      (A1 : Set) (A2 : Set)
      (No1 : NonassociativeNondistributiveRing
         A1)
      (No2 : NonassociativeNondistributiveRing
         A2) : Set where
      constructor NonassociativeNondistributiveRingRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* No1 x1 x2)
            (* No2 y1 y2)
        interp-1 :
          interp (1 No1) (1 No2)
        interp-inv :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (inv No1 x1) (inv No2 y1)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ No1 x1 x2)
            (+ No2 y1 y2)
    data NonassociativeNondistributiveRingTerm
      : Set where
      *L :
        NonassociativeNondistributiveRingTerm ->
        NonassociativeNondistributiveRingTerm ->
        NonassociativeNondistributiveRingTerm
      1L :
        NonassociativeNondistributiveRingTerm
      invL :
        NonassociativeNondistributiveRingTerm ->
        NonassociativeNondistributiveRingTerm
      +L :
        NonassociativeNondistributiveRingTerm ->
        NonassociativeNondistributiveRingTerm ->
        NonassociativeNondistributiveRingTerm
    data ClNonassociativeNondistributiveRingTerm
      (A : Set) : Set where
      sing :
        A ->
        ClNonassociativeNondistributiveRingTerm
          A
      *Cl :
        ClNonassociativeNondistributiveRingTerm
          A ->
        ClNonassociativeNondistributiveRingTerm
          A ->
        ClNonassociativeNondistributiveRingTerm
          A
      1Cl :
        ClNonassociativeNondistributiveRingTerm
          A
      invCl :
        ClNonassociativeNondistributiveRingTerm
          A ->
        ClNonassociativeNondistributiveRingTerm
          A
      +Cl :
        ClNonassociativeNondistributiveRingTerm
          A ->
        ClNonassociativeNondistributiveRingTerm
          A ->
        ClNonassociativeNondistributiveRingTerm
          A
    data OpNonassociativeNondistributiveRingTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpNonassociativeNondistributiveRingTerm
          n
      *OL :
        OpNonassociativeNondistributiveRingTerm
          n ->
        OpNonassociativeNondistributiveRingTerm
          n ->
        OpNonassociativeNondistributiveRingTerm
          n
      1OL :
        OpNonassociativeNondistributiveRingTerm
          n
      invOL :
        OpNonassociativeNondistributiveRingTerm
          n ->
        OpNonassociativeNondistributiveRingTerm
          n
      +OL :
        OpNonassociativeNondistributiveRingTerm
          n ->
        OpNonassociativeNondistributiveRingTerm
          n ->
        OpNonassociativeNondistributiveRingTerm
          n
    data OpNonassociativeNondistributiveRingTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpNonassociativeNondistributiveRingTerm2
          n
          A
      sing2 :
        A ->
        OpNonassociativeNondistributiveRingTerm2
          n
          A
      *OL2 :
        OpNonassociativeNondistributiveRingTerm2
          n
          A ->
        OpNonassociativeNondistributiveRingTerm2
          n
          A ->
        OpNonassociativeNondistributiveRingTerm2
          n
          A
      1OL2 :
        OpNonassociativeNondistributiveRingTerm2
          n
          A
      invOL2 :
        OpNonassociativeNondistributiveRingTerm2
          n
          A ->
        OpNonassociativeNondistributiveRingTerm2
          n
          A
      +OL2 :
        OpNonassociativeNondistributiveRingTerm2
          n
          A ->
        OpNonassociativeNondistributiveRingTerm2
          n
          A ->
        OpNonassociativeNondistributiveRingTerm2
          n
          A
  
  module NonassociativeRing where
    record NonassociativeRing
      (A : Set) : Set where
      constructor NonassociativeRingC
      field
        * : A -> A -> A
        + : A -> A -> A
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        inv : A -> A
        leftInverse_inv_op_1 :
          (x : A) -> * x (inv x) == 1
        rightInverse_inv_op_1 :
          (x : A) -> * (inv x) x == 1
        commutative_* :
          (x : A) (y : A) ->
          * x y == * y x
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record NonassociativeRingSig
      (AS : Set) : Set where
      constructor NonassociativeRingSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        1S : AS
        invS : AS -> AS
    record NonassociativeRingProd
      (AP : Set) : Set where
      constructor NonassociativeRingProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        invP : Prod AP AP -> Prod AP AP
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftInverse_inv_op_1P :
          (xP : Prod AP AP) ->
          *P xP (invP xP) == 1P
        rightInverse_inv_op_1P :
          (xP : Prod AP AP) ->
          *P (invP xP) xP == 1P
        commutative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *P xP yP == *P yP xP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record NonassociativeRingHom
      (A1 : Set) (A2 : Set)
      (No1 : NonassociativeRing A1)
      (No2 : NonassociativeRing A2) :
      Set where
      constructor NonassociativeRingHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* No1 x1 x2) ==
            * No2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ No1 x1 x2) ==
            + No2 (hom x1) (hom x2)
        pres-1 : hom (1 No1) == 1 No2
        pres-inv :
          (x1 : A1) ->
          hom (inv No1 x1) ==
            inv No2 (hom x1)
    record NonassociativeRingRelInterp
      (A1 : Set) (A2 : Set)
      (No1 : NonassociativeRing A1)
      (No2 : NonassociativeRing A2) :
      Set where
      constructor NonassociativeRingRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* No1 x1 x2)
            (* No2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ No1 x1 x2)
            (+ No2 y1 y2)
        interp-1 :
          interp (1 No1) (1 No2)
        interp-inv :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (inv No1 x1) (inv No2 y1)
    data NonassociativeRingTerm
      : Set where
      *L :
        NonassociativeRingTerm ->
        NonassociativeRingTerm ->
        NonassociativeRingTerm
      +L :
        NonassociativeRingTerm ->
        NonassociativeRingTerm ->
        NonassociativeRingTerm
      1L : NonassociativeRingTerm
      invL :
        NonassociativeRingTerm ->
        NonassociativeRingTerm
    data ClNonassociativeRingTerm
      (A : Set) : Set where
      sing :
        A -> ClNonassociativeRingTerm A
      *Cl :
        ClNonassociativeRingTerm A ->
        ClNonassociativeRingTerm A ->
        ClNonassociativeRingTerm A
      +Cl :
        ClNonassociativeRingTerm A ->
        ClNonassociativeRingTerm A ->
        ClNonassociativeRingTerm A
      1Cl : ClNonassociativeRingTerm A
      invCl :
        ClNonassociativeRingTerm A ->
        ClNonassociativeRingTerm A
    data OpNonassociativeRingTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpNonassociativeRingTerm n
      *OL :
        OpNonassociativeRingTerm n ->
        OpNonassociativeRingTerm n ->
        OpNonassociativeRingTerm n
      +OL :
        OpNonassociativeRingTerm n ->
        OpNonassociativeRingTerm n ->
        OpNonassociativeRingTerm n
      1OL : OpNonassociativeRingTerm n
      invOL :
        OpNonassociativeRingTerm n ->
        OpNonassociativeRingTerm n
    data OpNonassociativeRingTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpNonassociativeRingTerm2 n A
      sing2 :
        A ->
        OpNonassociativeRingTerm2 n A
      *OL2 :
        OpNonassociativeRingTerm2 n A ->
        OpNonassociativeRingTerm2 n A ->
        OpNonassociativeRingTerm2 n A
      +OL2 :
        OpNonassociativeRingTerm2 n A ->
        OpNonassociativeRingTerm2 n A ->
        OpNonassociativeRingTerm2 n A
      1OL2 :
        OpNonassociativeRingTerm2 n A
      invOL2 :
        OpNonassociativeRingTerm2 n A ->
        OpNonassociativeRingTerm2 n A
  
  module NormalBand where
    record NormalBand
      (A : Set) : Set where
      constructor NormalBandC
      field
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        idempotent_op :
          (x : A) -> op x x == x
        middleCommute_* :
          (x : A) (y : A) (z : A) ->
          op (op (op x y) z) x ==
            op (op (op x z) y) x
    record NormalBandSig
      (AS : Set) : Set where
      constructor NormalBandSigSigC
      field
        opS : AS -> AS -> AS
    record NormalBandProd
      (AP : Set) : Set where
      constructor NormalBandProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        idempotent_opP :
          (xP : Prod AP AP) ->
          opP xP xP == xP
        middleCommute_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP (opP xP yP) zP) xP ==
            opP (opP (opP xP zP) yP) xP
    record NormalBandHom
      (A1 : Set) (A2 : Set)
      (No1 : NormalBand A1)
      (No2 : NormalBand A2) :
      Set where
      constructor NormalBandHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op No1 x1 x2) ==
            op No2 (hom x1) (hom x2)
    record NormalBandRelInterp
      (A1 : Set) (A2 : Set)
      (No1 : NormalBand A1)
      (No2 : NormalBand A2) :
      Set where
      constructor NormalBandRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op No1 x1 x2)
            (op No2 y1 y2)
    data NormalBandTerm : Set where
      opL :
        NormalBandTerm ->
        NormalBandTerm -> NormalBandTerm
    data ClNormalBandTerm
      (A : Set) : Set where
      sing : A -> ClNormalBandTerm A
      opCl :
        ClNormalBandTerm A ->
        ClNormalBandTerm A ->
        ClNormalBandTerm A
    data OpNormalBandTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpNormalBandTerm n
      opOL :
        OpNormalBandTerm n ->
        OpNormalBandTerm n ->
        OpNormalBandTerm n
    data OpNormalBandTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpNormalBandTerm2 n A
      sing2 :
        A -> OpNormalBandTerm2 n A
      opOL2 :
        OpNormalBandTerm2 n A ->
        OpNormalBandTerm2 n A ->
        OpNormalBandTerm2 n A
  
  module OrDeMorgran where
    record OrDeMorgran
      (A : Set) : Set where
      constructor OrDeMorgranC
      field
        * : A -> A -> A
        + : A -> A -> A
        prim : A -> A
        orDeMorgan_+_*_prim :
          (x : A) (y : A) (z : A) ->
          prim (+ x y) ==
            * (prim x) (prim y)
    record OrDeMorgranSig
      (AS : Set) : Set where
      constructor OrDeMorgranSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        primS : AS -> AS
    record OrDeMorgranProd
      (AP : Set) : Set where
      constructor OrDeMorgranProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        orDeMorgan_+_*_primP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          primP (+P xP yP) ==
            *P (primP xP) (primP yP)
    record OrDeMorgranHom
      (A1 : Set) (A2 : Set)
      (Or1 : OrDeMorgran A1)
      (Or2 : OrDeMorgran A2) :
      Set where
      constructor OrDeMorgranHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Or1 x1 x2) ==
            * Or2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Or1 x1 x2) ==
            + Or2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A1) ->
          hom (prim Or1 x1) ==
            prim Or2 (hom x1)
    record OrDeMorgranRelInterp
      (A1 : Set) (A2 : Set)
      (Or1 : OrDeMorgran A1)
      (Or2 : OrDeMorgran A2) :
      Set where
      constructor OrDeMorgranRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Or1 x1 x2)
            (* Or2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Or1 x1 x2)
            (+ Or2 y1 y2)
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim Or1 x1)
            (prim Or2 y1)
    data OrDeMorgranTerm : Set where
      *L :
        OrDeMorgranTerm ->
        OrDeMorgranTerm ->
        OrDeMorgranTerm
      +L :
        OrDeMorgranTerm ->
        OrDeMorgranTerm ->
        OrDeMorgranTerm
      primL :
        OrDeMorgranTerm ->
        OrDeMorgranTerm
    data ClOrDeMorgranTerm
      (A : Set) : Set where
      sing :
        A -> ClOrDeMorgranTerm A
      *Cl :
        ClOrDeMorgranTerm A ->
        ClOrDeMorgranTerm A ->
        ClOrDeMorgranTerm A
      +Cl :
        ClOrDeMorgranTerm A ->
        ClOrDeMorgranTerm A ->
        ClOrDeMorgranTerm A
      primCl :
        ClOrDeMorgranTerm A ->
        ClOrDeMorgranTerm A
    data OpOrDeMorgranTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpOrDeMorgranTerm n
      *OL :
        OpOrDeMorgranTerm n ->
        OpOrDeMorgranTerm n ->
        OpOrDeMorgranTerm n
      +OL :
        OpOrDeMorgranTerm n ->
        OpOrDeMorgranTerm n ->
        OpOrDeMorgranTerm n
      primOL :
        OpOrDeMorgranTerm n ->
        OpOrDeMorgranTerm n
    data OpOrDeMorgranTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpOrDeMorgranTerm2 n A
      sing2 :
        A -> OpOrDeMorgranTerm2 n A
      *OL2 :
        OpOrDeMorgranTerm2 n A ->
        OpOrDeMorgranTerm2 n A ->
        OpOrDeMorgranTerm2 n A
      +OL2 :
        OpOrDeMorgranTerm2 n A ->
        OpOrDeMorgranTerm2 n A ->
        OpOrDeMorgranTerm2 n A
      primOL2 :
        OpOrDeMorgranTerm2 n A ->
        OpOrDeMorgranTerm2 n A
  
  module Pointed where
    record Pointed
      (A : Set) : Set where
      constructor PointedC
      field
        e : A
    record PointedSig
      (AS : Set) : Set where
      constructor PointedSigSigC
      field
        eS : AS
    record PointedProd
      (AP : Set) : Set where
      constructor PointedProdC
      field
        eP : Prod AP AP
    record PointedHom
      (A1 : Set) (A2 : Set)
      (Po1 : Pointed A1)
      (Po2 : Pointed A2) : Set where
      constructor PointedHomC
      field
        hom : A1 -> A2
        pres-e : hom (e Po1) == e Po2
    record PointedRelInterp
      (A1 : Set) (A2 : Set)
      (Po1 : Pointed A1)
      (Po2 : Pointed A2) : Set where
      constructor PointedRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-e :
          interp (e Po1) (e Po2)
    data PointedTerm : Set where
      eL : PointedTerm
    data ClPointedTerm
      (A : Set) : Set where
      sing : A -> ClPointedTerm A
      eCl : ClPointedTerm A
    data OpPointedTerm
      (n : Nat) : Set where
      v : Fin n -> OpPointedTerm n
      eOL : OpPointedTerm n
    data OpPointedTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpPointedTerm2 n A
      sing2 : A -> OpPointedTerm2 n A
      eOL2 : OpPointedTerm2 n A
  
  module Pointed0Magma where
    record Pointed0Magma
      (A : Set) : Set where
      constructor Pointed0MagmaC
      field
        0 : A
        op : A -> A -> A
    record Pointed0MagmaSig
      (AS : Set) : Set where
      constructor Pointed0MagmaSigSigC
      field
        0S : AS
        opS : AS -> AS -> AS
    record Pointed0MagmaProd
      (AP : Set) : Set where
      constructor Pointed0MagmaProdC
      field
        0P : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record Pointed0MagmaHom
      (A1 : Set) (A2 : Set)
      (Po1 : Pointed0Magma A1)
      (Po2 : Pointed0Magma A2) :
      Set where
      constructor Pointed0MagmaHomC
      field
        hom : A1 -> A2
        pres-0 : hom (0 Po1) == 0 Po2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Po1 x1 x2) ==
            op Po2 (hom x1) (hom x2)
    record Pointed0MagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Po1 : Pointed0Magma A1)
      (Po2 : Pointed0Magma A2) :
      Set where
      constructor Pointed0MagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0 :
          interp (0 Po1) (0 Po2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Po1 x1 x2)
            (op Po2 y1 y2)
    data Pointed0MagmaTerm
      : Set where
      0L : Pointed0MagmaTerm
      opL :
        Pointed0MagmaTerm ->
        Pointed0MagmaTerm ->
        Pointed0MagmaTerm
    data ClPointed0MagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClPointed0MagmaTerm A
      0Cl : ClPointed0MagmaTerm A
      opCl :
        ClPointed0MagmaTerm A ->
        ClPointed0MagmaTerm A ->
        ClPointed0MagmaTerm A
    data OpPointed0MagmaTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpPointed0MagmaTerm n
      0OL : OpPointed0MagmaTerm n
      opOL :
        OpPointed0MagmaTerm n ->
        OpPointed0MagmaTerm n ->
        OpPointed0MagmaTerm n
    data OpPointed0MagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpPointed0MagmaTerm2 n A
      sing2 :
        A -> OpPointed0MagmaTerm2 n A
      0OL2 : OpPointed0MagmaTerm2 n A
      opOL2 :
        OpPointed0MagmaTerm2 n A ->
        OpPointed0MagmaTerm2 n A ->
        OpPointed0MagmaTerm2 n A
  
  module Pointed1Magma where
    record Pointed1Magma
      (A : Set) : Set where
      constructor Pointed1MagmaC
      field
        1 : A
        op : A -> A -> A
    record Pointed1MagmaSig
      (AS : Set) : Set where
      constructor Pointed1MagmaSigSigC
      field
        1S : AS
        opS : AS -> AS -> AS
    record Pointed1MagmaProd
      (AP : Set) : Set where
      constructor Pointed1MagmaProdC
      field
        1P : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record Pointed1MagmaHom
      (A1 : Set) (A2 : Set)
      (Po1 : Pointed1Magma A1)
      (Po2 : Pointed1Magma A2) :
      Set where
      constructor Pointed1MagmaHomC
      field
        hom : A1 -> A2
        pres-1 : hom (1 Po1) == 1 Po2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Po1 x1 x2) ==
            op Po2 (hom x1) (hom x2)
    record Pointed1MagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Po1 : Pointed1Magma A1)
      (Po2 : Pointed1Magma A2) :
      Set where
      constructor Pointed1MagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-1 :
          interp (1 Po1) (1 Po2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Po1 x1 x2)
            (op Po2 y1 y2)
    data Pointed1MagmaTerm
      : Set where
      1L : Pointed1MagmaTerm
      opL :
        Pointed1MagmaTerm ->
        Pointed1MagmaTerm ->
        Pointed1MagmaTerm
    data ClPointed1MagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClPointed1MagmaTerm A
      1Cl : ClPointed1MagmaTerm A
      opCl :
        ClPointed1MagmaTerm A ->
        ClPointed1MagmaTerm A ->
        ClPointed1MagmaTerm A
    data OpPointed1MagmaTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpPointed1MagmaTerm n
      1OL : OpPointed1MagmaTerm n
      opOL :
        OpPointed1MagmaTerm n ->
        OpPointed1MagmaTerm n ->
        OpPointed1MagmaTerm n
    data OpPointed1MagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpPointed1MagmaTerm2 n A
      sing2 :
        A -> OpPointed1MagmaTerm2 n A
      1OL2 : OpPointed1MagmaTerm2 n A
      opOL2 :
        OpPointed1MagmaTerm2 n A ->
        OpPointed1MagmaTerm2 n A ->
        OpPointed1MagmaTerm2 n A
  
  module PointedInvolutiveMagma0Sig where
    record PointedInvolutiveMagma0Sig
      (A : Set) : Set where
      constructor PointedInvolutiveMagma0SigC
      field
        * : A -> A -> A
        prim : A -> A
        0 : A
    record PointedInvolutiveMagma0SigSig
      (AS : Set) : Set where
      constructor PointedInvolutiveMagma0SigSigSigC
      field
        *S : AS -> AS -> AS
        primS : AS -> AS
        0S : AS
    record PointedInvolutiveMagma0SigProd
      (AP : Set) : Set where
      constructor PointedInvolutiveMagma0SigProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        0P : Prod AP AP
    record PointedInvolutiveMagma0SigHom
      (A1 : Set) (A2 : Set)
      (Po1 : PointedInvolutiveMagma0Sig
         A1)
      (Po2 : PointedInvolutiveMagma0Sig
         A2) : Set where
      constructor PointedInvolutiveMagma0SigHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Po1 x1 x2) ==
            * Po2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A1) ->
          hom (prim Po1 x1) ==
            prim Po2 (hom x1)
        pres-0 : hom (0 Po1) == 0 Po2
    record PointedInvolutiveMagma0SigRelInterp
      (A1 : Set) (A2 : Set)
      (Po1 : PointedInvolutiveMagma0Sig
         A1)
      (Po2 : PointedInvolutiveMagma0Sig
         A2) : Set where
      constructor PointedInvolutiveMagma0SigRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Po1 x1 x2)
            (* Po2 y1 y2)
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim Po1 x1)
            (prim Po2 y1)
        interp-0 :
          interp (0 Po1) (0 Po2)
    data PointedInvolutiveMagma0SigTerm
      : Set where
      *L :
        PointedInvolutiveMagma0SigTerm ->
        PointedInvolutiveMagma0SigTerm ->
        PointedInvolutiveMagma0SigTerm
      primL :
        PointedInvolutiveMagma0SigTerm ->
        PointedInvolutiveMagma0SigTerm
      0L :
        PointedInvolutiveMagma0SigTerm
    data ClPointedInvolutiveMagma0SigTerm
      (A : Set) : Set where
      sing :
        A ->
        ClPointedInvolutiveMagma0SigTerm
          A
      *Cl :
        ClPointedInvolutiveMagma0SigTerm
          A ->
        ClPointedInvolutiveMagma0SigTerm
          A ->
        ClPointedInvolutiveMagma0SigTerm
          A
      primCl :
        ClPointedInvolutiveMagma0SigTerm
          A ->
        ClPointedInvolutiveMagma0SigTerm
          A
      0Cl :
        ClPointedInvolutiveMagma0SigTerm
          A
    data OpPointedInvolutiveMagma0SigTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpPointedInvolutiveMagma0SigTerm
          n
      *OL :
        OpPointedInvolutiveMagma0SigTerm
          n ->
        OpPointedInvolutiveMagma0SigTerm
          n ->
        OpPointedInvolutiveMagma0SigTerm
          n
      primOL :
        OpPointedInvolutiveMagma0SigTerm
          n ->
        OpPointedInvolutiveMagma0SigTerm
          n
      0OL :
        OpPointedInvolutiveMagma0SigTerm
          n
    data OpPointedInvolutiveMagma0SigTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpPointedInvolutiveMagma0SigTerm2
          n
          A
      sing2 :
        A ->
        OpPointedInvolutiveMagma0SigTerm2
          n
          A
      *OL2 :
        OpPointedInvolutiveMagma0SigTerm2
          n
          A ->
        OpPointedInvolutiveMagma0SigTerm2
          n
          A ->
        OpPointedInvolutiveMagma0SigTerm2
          n
          A
      primOL2 :
        OpPointedInvolutiveMagma0SigTerm2
          n
          A ->
        OpPointedInvolutiveMagma0SigTerm2
          n
          A
      0OL2 :
        OpPointedInvolutiveMagma0SigTerm2
          n
          A
  
  module PointedMagma where
    record PointedMagma
      (A : Set) : Set where
      constructor PointedMagmaC
      field
        e : A
        op : A -> A -> A
    record PointedMagmaSig
      (AS : Set) : Set where
      constructor PointedMagmaSigSigC
      field
        eS : AS
        opS : AS -> AS -> AS
    record PointedMagmaProd
      (AP : Set) : Set where
      constructor PointedMagmaProdC
      field
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record PointedMagmaHom
      (A1 : Set) (A2 : Set)
      (Po1 : PointedMagma A1)
      (Po2 : PointedMagma A2) :
      Set where
      constructor PointedMagmaHomC
      field
        hom : A1 -> A2
        pres-e : hom (e Po1) == e Po2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Po1 x1 x2) ==
            op Po2 (hom x1) (hom x2)
    record PointedMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Po1 : PointedMagma A1)
      (Po2 : PointedMagma A2) :
      Set where
      constructor PointedMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-e :
          interp (e Po1) (e Po2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Po1 x1 x2)
            (op Po2 y1 y2)
    data PointedMagmaTerm
      : Set where
      eL : PointedMagmaTerm
      opL :
        PointedMagmaTerm ->
        PointedMagmaTerm ->
        PointedMagmaTerm
    data ClPointedMagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClPointedMagmaTerm A
      eCl : ClPointedMagmaTerm A
      opCl :
        ClPointedMagmaTerm A ->
        ClPointedMagmaTerm A ->
        ClPointedMagmaTerm A
    data OpPointedMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpPointedMagmaTerm n
      eOL : OpPointedMagmaTerm n
      opOL :
        OpPointedMagmaTerm n ->
        OpPointedMagmaTerm n ->
        OpPointedMagmaTerm n
    data OpPointedMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpPointedMagmaTerm2 n A
      sing2 :
        A -> OpPointedMagmaTerm2 n A
      eOL2 : OpPointedMagmaTerm2 n A
      opOL2 :
        OpPointedMagmaTerm2 n A ->
        OpPointedMagmaTerm2 n A ->
        OpPointedMagmaTerm2 n A
  
  module PointedOne where
    record PointedOne
      (A : Set) : Set where
      constructor PointedOneC
      field
        1 : A
    record PointedOneSig
      (AS : Set) : Set where
      constructor PointedOneSigSigC
      field
        1S : AS
    record PointedOneProd
      (AP : Set) : Set where
      constructor PointedOneProdC
      field
        1P : Prod AP AP
    record PointedOneHom
      (A1 : Set) (A2 : Set)
      (Po1 : PointedOne A1)
      (Po2 : PointedOne A2) :
      Set where
      constructor PointedOneHomC
      field
        hom : A1 -> A2
        pres-1 : hom (1 Po1) == 1 Po2
    record PointedOneRelInterp
      (A1 : Set) (A2 : Set)
      (Po1 : PointedOne A1)
      (Po2 : PointedOne A2) :
      Set where
      constructor PointedOneRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-1 :
          interp (1 Po1) (1 Po2)
    data PointedOneTerm : Set where
      1L : PointedOneTerm
    data ClPointedOneTerm
      (A : Set) : Set where
      sing : A -> ClPointedOneTerm A
      1Cl : ClPointedOneTerm A
    data OpPointedOneTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpPointedOneTerm n
      1OL : OpPointedOneTerm n
    data OpPointedOneTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpPointedOneTerm2 n A
      sing2 :
        A -> OpPointedOneTerm2 n A
      1OL2 : OpPointedOneTerm2 n A
  
  module PointedPlusMagma where
    record PointedPlusMagma
      (A : Set) : Set where
      constructor PointedPlusMagmaC
      field
        + : A -> A -> A
        e : A
    record PointedPlusMagmaSig
      (AS : Set) : Set where
      constructor PointedPlusMagmaSigSigC
      field
        +S : AS -> AS -> AS
        eS : AS
    record PointedPlusMagmaProd
      (AP : Set) : Set where
      constructor PointedPlusMagmaProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
    record PointedPlusMagmaHom
      (A1 : Set) (A2 : Set)
      (Po1 : PointedPlusMagma A1)
      (Po2 : PointedPlusMagma A2) :
      Set where
      constructor PointedPlusMagmaHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Po1 x1 x2) ==
            + Po2 (hom x1) (hom x2)
        pres-e : hom (e Po1) == e Po2
    record PointedPlusMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Po1 : PointedPlusMagma A1)
      (Po2 : PointedPlusMagma A2) :
      Set where
      constructor PointedPlusMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Po1 x1 x2)
            (+ Po2 y1 y2)
        interp-e :
          interp (e Po1) (e Po2)
    data PointedPlusMagmaTerm
      : Set where
      +L :
        PointedPlusMagmaTerm ->
        PointedPlusMagmaTerm ->
        PointedPlusMagmaTerm
      eL : PointedPlusMagmaTerm
    data ClPointedPlusMagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClPointedPlusMagmaTerm A
      +Cl :
        ClPointedPlusMagmaTerm A ->
        ClPointedPlusMagmaTerm A ->
        ClPointedPlusMagmaTerm A
      eCl : ClPointedPlusMagmaTerm A
    data OpPointedPlusMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpPointedPlusMagmaTerm n
      +OL :
        OpPointedPlusMagmaTerm n ->
        OpPointedPlusMagmaTerm n ->
        OpPointedPlusMagmaTerm n
      eOL : OpPointedPlusMagmaTerm n
    data OpPointedPlusMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpPointedPlusMagmaTerm2 n A
      sing2 :
        A -> OpPointedPlusMagmaTerm2 n A
      +OL2 :
        OpPointedPlusMagmaTerm2 n A ->
        OpPointedPlusMagmaTerm2 n A ->
        OpPointedPlusMagmaTerm2 n A
      eOL2 :
        OpPointedPlusMagmaTerm2 n A
  
  module PointedSemigroup where
    record PointedSemigroup
      (A : Set) : Set where
      constructor PointedSemigroupC
      field
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        e : A
    record PointedSemigroupSig
      (AS : Set) : Set where
      constructor PointedSemigroupSigSigC
      field
        opS : AS -> AS -> AS
        eS : AS
    record PointedSemigroupProd
      (AP : Set) : Set where
      constructor PointedSemigroupProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
    record PointedSemigroupHom
      (A1 : Set) (A2 : Set)
      (Po1 : PointedSemigroup A1)
      (Po2 : PointedSemigroup A2) :
      Set where
      constructor PointedSemigroupHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Po1 x1 x2) ==
            op Po2 (hom x1) (hom x2)
        pres-e : hom (e Po1) == e Po2
    record PointedSemigroupRelInterp
      (A1 : Set) (A2 : Set)
      (Po1 : PointedSemigroup A1)
      (Po2 : PointedSemigroup A2) :
      Set where
      constructor PointedSemigroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Po1 x1 x2)
            (op Po2 y1 y2)
        interp-e :
          interp (e Po1) (e Po2)
    data PointedSemigroupTerm
      : Set where
      opL :
        PointedSemigroupTerm ->
        PointedSemigroupTerm ->
        PointedSemigroupTerm
      eL : PointedSemigroupTerm
    data ClPointedSemigroupTerm
      (A : Set) : Set where
      sing :
        A -> ClPointedSemigroupTerm A
      opCl :
        ClPointedSemigroupTerm A ->
        ClPointedSemigroupTerm A ->
        ClPointedSemigroupTerm A
      eCl : ClPointedSemigroupTerm A
    data OpPointedSemigroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpPointedSemigroupTerm n
      opOL :
        OpPointedSemigroupTerm n ->
        OpPointedSemigroupTerm n ->
        OpPointedSemigroupTerm n
      eOL : OpPointedSemigroupTerm n
    data OpPointedSemigroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpPointedSemigroupTerm2 n A
      sing2 :
        A -> OpPointedSemigroupTerm2 n A
      opOL2 :
        OpPointedSemigroupTerm2 n A ->
        OpPointedSemigroupTerm2 n A ->
        OpPointedSemigroupTerm2 n A
      eOL2 :
        OpPointedSemigroupTerm2 n A
  
  module PointedSteinerMagma where
    record PointedSteinerMagma
      (A : Set) : Set where
      constructor PointedSteinerMagmaC
      field
        op : A -> A -> A
        e : A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
        antiAbsorbent :
          (x : A) (y : A) ->
          op x (op x y) == y
    record PointedSteinerMagmaSig
      (AS : Set) : Set where
      constructor PointedSteinerMagmaSigSigC
      field
        opS : AS -> AS -> AS
        eS : AS
    record PointedSteinerMagmaProd
      (AP : Set) : Set where
      constructor PointedSteinerMagmaProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
        antiAbsorbentP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (opP xP yP) == yP
    record PointedSteinerMagmaHom
      (A1 : Set) (A2 : Set)
      (Po1 : PointedSteinerMagma A1)
      (Po2 : PointedSteinerMagma A2) :
      Set where
      constructor PointedSteinerMagmaHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Po1 x1 x2) ==
            op Po2 (hom x1) (hom x2)
        pres-e : hom (e Po1) == e Po2
    record PointedSteinerMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Po1 : PointedSteinerMagma A1)
      (Po2 : PointedSteinerMagma A2) :
      Set where
      constructor PointedSteinerMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Po1 x1 x2)
            (op Po2 y1 y2)
        interp-e :
          interp (e Po1) (e Po2)
    data PointedSteinerMagmaTerm
      : Set where
      opL :
        PointedSteinerMagmaTerm ->
        PointedSteinerMagmaTerm ->
        PointedSteinerMagmaTerm
      eL : PointedSteinerMagmaTerm
    data ClPointedSteinerMagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClPointedSteinerMagmaTerm A
      opCl :
        ClPointedSteinerMagmaTerm A ->
        ClPointedSteinerMagmaTerm A ->
        ClPointedSteinerMagmaTerm A
      eCl :
        ClPointedSteinerMagmaTerm A
    data OpPointedSteinerMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpPointedSteinerMagmaTerm n
      opOL :
        OpPointedSteinerMagmaTerm n ->
        OpPointedSteinerMagmaTerm n ->
        OpPointedSteinerMagmaTerm n
      eOL :
        OpPointedSteinerMagmaTerm n
    data OpPointedSteinerMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpPointedSteinerMagmaTerm2 n A
      sing2 :
        A ->
        OpPointedSteinerMagmaTerm2 n A
      opOL2 :
        OpPointedSteinerMagmaTerm2 n
          A ->
        OpPointedSteinerMagmaTerm2 n
          A ->
        OpPointedSteinerMagmaTerm2 n A
      eOL2 :
        OpPointedSteinerMagmaTerm2 n A
  
  module PointedTimesMagma where
    record PointedTimesMagma
      (A : Set) : Set where
      constructor PointedTimesMagmaC
      field
        * : A -> A -> A
        e : A
    record PointedTimesMagmaSig
      (AS : Set) : Set where
      constructor PointedTimesMagmaSigSigC
      field
        *S : AS -> AS -> AS
        eS : AS
    record PointedTimesMagmaProd
      (AP : Set) : Set where
      constructor PointedTimesMagmaProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
    record PointedTimesMagmaHom
      (A1 : Set) (A2 : Set)
      (Po1 : PointedTimesMagma A1)
      (Po2 : PointedTimesMagma A2) :
      Set where
      constructor PointedTimesMagmaHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Po1 x1 x2) ==
            * Po2 (hom x1) (hom x2)
        pres-e : hom (e Po1) == e Po2
    record PointedTimesMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Po1 : PointedTimesMagma A1)
      (Po2 : PointedTimesMagma A2) :
      Set where
      constructor PointedTimesMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Po1 x1 x2)
            (* Po2 y1 y2)
        interp-e :
          interp (e Po1) (e Po2)
    data PointedTimesMagmaTerm
      : Set where
      *L :
        PointedTimesMagmaTerm ->
        PointedTimesMagmaTerm ->
        PointedTimesMagmaTerm
      eL : PointedTimesMagmaTerm
    data ClPointedTimesMagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClPointedTimesMagmaTerm A
      *Cl :
        ClPointedTimesMagmaTerm A ->
        ClPointedTimesMagmaTerm A ->
        ClPointedTimesMagmaTerm A
      eCl : ClPointedTimesMagmaTerm A
    data OpPointedTimesMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpPointedTimesMagmaTerm n
      *OL :
        OpPointedTimesMagmaTerm n ->
        OpPointedTimesMagmaTerm n ->
        OpPointedTimesMagmaTerm n
      eOL : OpPointedTimesMagmaTerm n
    data OpPointedTimesMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpPointedTimesMagmaTerm2 n A
      sing2 :
        A ->
        OpPointedTimesMagmaTerm2 n A
      *OL2 :
        OpPointedTimesMagmaTerm2 n A ->
        OpPointedTimesMagmaTerm2 n A ->
        OpPointedTimesMagmaTerm2 n A
      eOL2 :
        OpPointedTimesMagmaTerm2 n A
  
  module PointedTimesZeroMagma where
    record PointedTimesZeroMagma
      (A : Set) : Set where
      constructor PointedTimesZeroMagmaC
      field
        0 : A
        * : A -> A -> A
    record PointedTimesZeroMagmaSig
      (AS : Set) : Set where
      constructor PointedTimesZeroMagmaSigSigC
      field
        0S : AS
        *S : AS -> AS -> AS
    record PointedTimesZeroMagmaProd
      (AP : Set) : Set where
      constructor PointedTimesZeroMagmaProdC
      field
        0P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record PointedTimesZeroMagmaHom
      (A1 : Set) (A2 : Set)
      (Po1 : PointedTimesZeroMagma A1)
      (Po2 : PointedTimesZeroMagma
         A2) : Set where
      constructor PointedTimesZeroMagmaHomC
      field
        hom : A1 -> A2
        pres-0 : hom (0 Po1) == 0 Po2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Po1 x1 x2) ==
            * Po2 (hom x1) (hom x2)
    record PointedTimesZeroMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Po1 : PointedTimesZeroMagma A1)
      (Po2 : PointedTimesZeroMagma
         A2) : Set where
      constructor PointedTimesZeroMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0 :
          interp (0 Po1) (0 Po2)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Po1 x1 x2)
            (* Po2 y1 y2)
    data PointedTimesZeroMagmaTerm
      : Set where
      0L : PointedTimesZeroMagmaTerm
      *L :
        PointedTimesZeroMagmaTerm ->
        PointedTimesZeroMagmaTerm ->
        PointedTimesZeroMagmaTerm
    data ClPointedTimesZeroMagmaTerm
      (A : Set) : Set where
      sing :
        A ->
        ClPointedTimesZeroMagmaTerm A
      0Cl :
        ClPointedTimesZeroMagmaTerm A
      *Cl :
        ClPointedTimesZeroMagmaTerm A ->
        ClPointedTimesZeroMagmaTerm A ->
        ClPointedTimesZeroMagmaTerm A
    data OpPointedTimesZeroMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpPointedTimesZeroMagmaTerm n
      0OL :
        OpPointedTimesZeroMagmaTerm n
      *OL :
        OpPointedTimesZeroMagmaTerm n ->
        OpPointedTimesZeroMagmaTerm n ->
        OpPointedTimesZeroMagmaTerm n
    data OpPointedTimesZeroMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpPointedTimesZeroMagmaTerm2 n A
      sing2 :
        A ->
        OpPointedTimesZeroMagmaTerm2 n A
      0OL2 :
        OpPointedTimesZeroMagmaTerm2 n A
      *OL2 :
        OpPointedTimesZeroMagmaTerm2 n
          A ->
        OpPointedTimesZeroMagmaTerm2 n
          A ->
        OpPointedTimesZeroMagmaTerm2 n A
  
  module PointedUnarySystem where
    record PointedUnarySystem
      (A : Set) : Set where
      constructor PointedUnarySystemC
      field
        prim : A -> A
        e : A
    record PointedUnarySystemSig
      (AS : Set) : Set where
      constructor PointedUnarySystemSigSigC
      field
        primS : AS -> AS
        eS : AS
    record PointedUnarySystemProd
      (AP : Set) : Set where
      constructor PointedUnarySystemProdC
      field
        primP : Prod AP AP -> Prod AP AP
        eP : Prod AP AP
    record PointedUnarySystemHom
      (A1 : Set) (A2 : Set)
      (Po1 : PointedUnarySystem A1)
      (Po2 : PointedUnarySystem A2) :
      Set where
      constructor PointedUnarySystemHomC
      field
        hom : A1 -> A2
        pres-prim :
          (x1 : A1) ->
          hom (prim Po1 x1) ==
            prim Po2 (hom x1)
        pres-e : hom (e Po1) == e Po2
    record PointedUnarySystemRelInterp
      (A1 : Set) (A2 : Set)
      (Po1 : PointedUnarySystem A1)
      (Po2 : PointedUnarySystem A2) :
      Set where
      constructor PointedUnarySystemRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim Po1 x1)
            (prim Po2 y1)
        interp-e :
          interp (e Po1) (e Po2)
    data PointedUnarySystemTerm
      : Set where
      primL :
        PointedUnarySystemTerm ->
        PointedUnarySystemTerm
      eL : PointedUnarySystemTerm
    data ClPointedUnarySystemTerm
      (A : Set) : Set where
      sing :
        A -> ClPointedUnarySystemTerm A
      primCl :
        ClPointedUnarySystemTerm A ->
        ClPointedUnarySystemTerm A
      eCl : ClPointedUnarySystemTerm A
    data OpPointedUnarySystemTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpPointedUnarySystemTerm n
      primOL :
        OpPointedUnarySystemTerm n ->
        OpPointedUnarySystemTerm n
      eOL : OpPointedUnarySystemTerm n
    data OpPointedUnarySystemTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpPointedUnarySystemTerm2 n A
      sing2 :
        A ->
        OpPointedUnarySystemTerm2 n A
      primOL2 :
        OpPointedUnarySystemTerm2 n A ->
        OpPointedUnarySystemTerm2 n A
      eOL2 :
        OpPointedUnarySystemTerm2 n A
  
  module PointedZero where
    record PointedZero
      (A : Set) : Set where
      constructor PointedZeroC
      field
        0 : A
    record PointedZeroSig
      (AS : Set) : Set where
      constructor PointedZeroSigSigC
      field
        0S : AS
    record PointedZeroProd
      (AP : Set) : Set where
      constructor PointedZeroProdC
      field
        0P : Prod AP AP
    record PointedZeroHom
      (A1 : Set) (A2 : Set)
      (Po1 : PointedZero A1)
      (Po2 : PointedZero A2) :
      Set where
      constructor PointedZeroHomC
      field
        hom : A1 -> A2
        pres-0 : hom (0 Po1) == 0 Po2
    record PointedZeroRelInterp
      (A1 : Set) (A2 : Set)
      (Po1 : PointedZero A1)
      (Po2 : PointedZero A2) :
      Set where
      constructor PointedZeroRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0 :
          interp (0 Po1) (0 Po2)
    data PointedZeroTerm : Set where
      0L : PointedZeroTerm
    data ClPointedZeroTerm
      (A : Set) : Set where
      sing :
        A -> ClPointedZeroTerm A
      0Cl : ClPointedZeroTerm A
    data OpPointedZeroTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpPointedZeroTerm n
      0OL : OpPointedZeroTerm n
    data OpPointedZeroTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpPointedZeroTerm2 n A
      sing2 :
        A -> OpPointedZeroTerm2 n A
      0OL2 : OpPointedZeroTerm2 n A
  
  module PreSemiring where
    record PreSemiring
      (A : Set) : Set where
      constructor PreSemiringC
      field
        * : A -> A -> A
        + : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record PreSemiringSig
      (AS : Set) : Set where
      constructor PreSemiringSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record PreSemiringProd
      (AP : Set) : Set where
      constructor PreSemiringProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record PreSemiringHom
      (A1 : Set) (A2 : Set)
      (Pr1 : PreSemiring A1)
      (Pr2 : PreSemiring A2) :
      Set where
      constructor PreSemiringHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Pr1 x1 x2) ==
            * Pr2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Pr1 x1 x2) ==
            + Pr2 (hom x1) (hom x2)
    record PreSemiringRelInterp
      (A1 : Set) (A2 : Set)
      (Pr1 : PreSemiring A1)
      (Pr2 : PreSemiring A2) :
      Set where
      constructor PreSemiringRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Pr1 x1 x2)
            (* Pr2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Pr1 x1 x2)
            (+ Pr2 y1 y2)
    data PreSemiringTerm : Set where
      *L :
        PreSemiringTerm ->
        PreSemiringTerm ->
        PreSemiringTerm
      +L :
        PreSemiringTerm ->
        PreSemiringTerm ->
        PreSemiringTerm
    data ClPreSemiringTerm
      (A : Set) : Set where
      sing :
        A -> ClPreSemiringTerm A
      *Cl :
        ClPreSemiringTerm A ->
        ClPreSemiringTerm A ->
        ClPreSemiringTerm A
      +Cl :
        ClPreSemiringTerm A ->
        ClPreSemiringTerm A ->
        ClPreSemiringTerm A
    data OpPreSemiringTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpPreSemiringTerm n
      *OL :
        OpPreSemiringTerm n ->
        OpPreSemiringTerm n ->
        OpPreSemiringTerm n
      +OL :
        OpPreSemiringTerm n ->
        OpPreSemiringTerm n ->
        OpPreSemiringTerm n
    data OpPreSemiringTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpPreSemiringTerm2 n A
      sing2 :
        A -> OpPreSemiringTerm2 n A
      *OL2 :
        OpPreSemiringTerm2 n A ->
        OpPreSemiringTerm2 n A ->
        OpPreSemiringTerm2 n A
      +OL2 :
        OpPreSemiringTerm2 n A ->
        OpPreSemiringTerm2 n A ->
        OpPreSemiringTerm2 n A
  
  module PrimAdditiveGroup where
    record PrimAdditiveGroup
      (A : Set) : Set where
      constructor PrimAdditiveGroupC
      field
        0_ : A
        *_ : A -> A -> A
        lunit_0_ :
          (x : A) -> *_ 0_ x == x
        runit_0_ :
          (x : A) -> *_ x 0_ == x
        associative_*_ :
          (x : A) (y : A) (z : A) ->
          *_ (*_ x y) z == *_ x (*_ y z)
        inv_ : A -> A
        leftInverse_inv_op_0_ :
          (x : A) -> *_ x (inv_ x) == 0_
        rightInverse_inv_op_0_ :
          (x : A) -> *_ (inv_ x) x == 0_
        commutative_*_ :
          (x : A) (y : A) ->
          *_ x y == *_ y x
    record PrimAdditiveGroupSig
      (AS : Set) : Set where
      constructor PrimAdditiveGroupSigSigC
      field
        0_S : AS
        *_S : AS -> AS -> AS
        inv_S : AS -> AS
    record PrimAdditiveGroupProd
      (AP : Set) : Set where
      constructor PrimAdditiveGroupProdC
      field
        0_P : Prod AP AP
        *_P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        inv_P : Prod AP AP -> Prod AP AP
        lunit_0_P :
          (xP : Prod AP AP) ->
          *_P 0_P xP == xP
        runit_0_P :
          (xP : Prod AP AP) ->
          *_P xP 0_P == xP
        associative_*_P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *_P (*_P xP yP) zP ==
            *_P xP (*_P yP zP)
        leftInverse_inv_op_0_P :
          (xP : Prod AP AP) ->
          *_P xP (inv_P xP) == 0_P
        rightInverse_inv_op_0_P :
          (xP : Prod AP AP) ->
          *_P (inv_P xP) xP == 0_P
        commutative_*_P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          *_P xP yP == *_P yP xP
    record PrimAdditiveGroupHom
      (A1 : Set) (A2 : Set)
      (Pr1 : PrimAdditiveGroup A1)
      (Pr2 : PrimAdditiveGroup A2) :
      Set where
      constructor PrimAdditiveGroupHomC
      field
        hom : A1 -> A2
        pres-0_ : hom (0_ Pr1) == 0_ Pr2
        pres-*_ :
          (x1 : A1) (x2 : A1) ->
          hom (*_ Pr1 x1 x2) ==
            *_ Pr2 (hom x1) (hom x2)
        pres-inv_ :
          (x1 : A1) ->
          hom (inv_ Pr1 x1) ==
            inv_ Pr2 (hom x1)
    record PrimAdditiveGroupRelInterp
      (A1 : Set) (A2 : Set)
      (Pr1 : PrimAdditiveGroup A1)
      (Pr2 : PrimAdditiveGroup A2) :
      Set where
      constructor PrimAdditiveGroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0_ :
          interp (0_ Pr1) (0_ Pr2)
        interp-*_ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (*_ Pr1 x1 x2)
            (*_ Pr2 y1 y2)
        interp-inv_ :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (inv_ Pr1 x1)
            (inv_ Pr2 y1)
    data PrimAdditiveGroupTerm
      : Set where
      0_L : PrimAdditiveGroupTerm
      *_L :
        PrimAdditiveGroupTerm ->
        PrimAdditiveGroupTerm ->
        PrimAdditiveGroupTerm
      inv_L :
        PrimAdditiveGroupTerm ->
        PrimAdditiveGroupTerm
    data ClPrimAdditiveGroupTerm
      (A : Set) : Set where
      sing :
        A -> ClPrimAdditiveGroupTerm A
      0_Cl : ClPrimAdditiveGroupTerm A
      *_Cl :
        ClPrimAdditiveGroupTerm A ->
        ClPrimAdditiveGroupTerm A ->
        ClPrimAdditiveGroupTerm A
      inv_Cl :
        ClPrimAdditiveGroupTerm A ->
        ClPrimAdditiveGroupTerm A
    data OpPrimAdditiveGroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpPrimAdditiveGroupTerm n
      0_OL : OpPrimAdditiveGroupTerm n
      *_OL :
        OpPrimAdditiveGroupTerm n ->
        OpPrimAdditiveGroupTerm n ->
        OpPrimAdditiveGroupTerm n
      inv_OL :
        OpPrimAdditiveGroupTerm n ->
        OpPrimAdditiveGroupTerm n
    data OpPrimAdditiveGroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpPrimAdditiveGroupTerm2 n A
      sing2 :
        A ->
        OpPrimAdditiveGroupTerm2 n A
      0_OL2 :
        OpPrimAdditiveGroupTerm2 n A
      *_OL2 :
        OpPrimAdditiveGroupTerm2 n A ->
        OpPrimAdditiveGroupTerm2 n A ->
        OpPrimAdditiveGroupTerm2 n A
      inv_OL2 :
        OpPrimAdditiveGroupTerm2 n A ->
        OpPrimAdditiveGroupTerm2 n A
  
  module PrimRingoidSig where
    record PrimRingoidSig
      (A : Set) : Set where
      constructor PrimRingoidSigC
      field
        * : A -> A -> A
        + : A -> A -> A
        prim : A -> A
    record PrimRingoidSigSig
      (AS : Set) : Set where
      constructor PrimRingoidSigSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        primS : AS -> AS
    record PrimRingoidSigProd
      (AP : Set) : Set where
      constructor PrimRingoidSigProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
    record PrimRingoidSigHom
      (A1 : Set) (A2 : Set)
      (Pr1 : PrimRingoidSig A1)
      (Pr2 : PrimRingoidSig A2) :
      Set where
      constructor PrimRingoidSigHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Pr1 x1 x2) ==
            * Pr2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Pr1 x1 x2) ==
            + Pr2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A1) ->
          hom (prim Pr1 x1) ==
            prim Pr2 (hom x1)
    record PrimRingoidSigRelInterp
      (A1 : Set) (A2 : Set)
      (Pr1 : PrimRingoidSig A1)
      (Pr2 : PrimRingoidSig A2) :
      Set where
      constructor PrimRingoidSigRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Pr1 x1 x2)
            (* Pr2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Pr1 x1 x2)
            (+ Pr2 y1 y2)
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim Pr1 x1)
            (prim Pr2 y1)
    data PrimRingoidSigTerm
      : Set where
      *L :
        PrimRingoidSigTerm ->
        PrimRingoidSigTerm ->
        PrimRingoidSigTerm
      +L :
        PrimRingoidSigTerm ->
        PrimRingoidSigTerm ->
        PrimRingoidSigTerm
      primL :
        PrimRingoidSigTerm ->
        PrimRingoidSigTerm
    data ClPrimRingoidSigTerm
      (A : Set) : Set where
      sing :
        A -> ClPrimRingoidSigTerm A
      *Cl :
        ClPrimRingoidSigTerm A ->
        ClPrimRingoidSigTerm A ->
        ClPrimRingoidSigTerm A
      +Cl :
        ClPrimRingoidSigTerm A ->
        ClPrimRingoidSigTerm A ->
        ClPrimRingoidSigTerm A
      primCl :
        ClPrimRingoidSigTerm A ->
        ClPrimRingoidSigTerm A
    data OpPrimRingoidSigTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpPrimRingoidSigTerm n
      *OL :
        OpPrimRingoidSigTerm n ->
        OpPrimRingoidSigTerm n ->
        OpPrimRingoidSigTerm n
      +OL :
        OpPrimRingoidSigTerm n ->
        OpPrimRingoidSigTerm n ->
        OpPrimRingoidSigTerm n
      primOL :
        OpPrimRingoidSigTerm n ->
        OpPrimRingoidSigTerm n
    data OpPrimRingoidSigTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpPrimRingoidSigTerm2 n A
      sing2 :
        A -> OpPrimRingoidSigTerm2 n A
      *OL2 :
        OpPrimRingoidSigTerm2 n A ->
        OpPrimRingoidSigTerm2 n A ->
        OpPrimRingoidSigTerm2 n A
      +OL2 :
        OpPrimRingoidSigTerm2 n A ->
        OpPrimRingoidSigTerm2 n A ->
        OpPrimRingoidSigTerm2 n A
      primOL2 :
        OpPrimRingoidSigTerm2 n A ->
        OpPrimRingoidSigTerm2 n A
  
  module PseudoInverse where
    record PseudoInverse
      (A : Set) : Set where
      constructor PseudoInverseC
      field
        inv : A -> A
        op : A -> A -> A
        quasiInverse_inv_op_e :
          (x : A) ->
          op (op x (inv x)) x == x
    record PseudoInverseSig
      (AS : Set) : Set where
      constructor PseudoInverseSigSigC
      field
        invS : AS -> AS
        opS : AS -> AS -> AS
    record PseudoInverseProd
      (AP : Set) : Set where
      constructor PseudoInverseProdC
      field
        invP : Prod AP AP -> Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        quasiInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP (opP xP (invP xP)) xP == xP
    record PseudoInverseHom
      (A1 : Set) (A2 : Set)
      (Ps1 : PseudoInverse A1)
      (Ps2 : PseudoInverse A2) :
      Set where
      constructor PseudoInverseHomC
      field
        hom : A1 -> A2
        pres-inv :
          (x1 : A1) ->
          hom (inv Ps1 x1) ==
            inv Ps2 (hom x1)
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ps1 x1 x2) ==
            op Ps2 (hom x1) (hom x2)
    record PseudoInverseRelInterp
      (A1 : Set) (A2 : Set)
      (Ps1 : PseudoInverse A1)
      (Ps2 : PseudoInverse A2) :
      Set where
      constructor PseudoInverseRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-inv :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (inv Ps1 x1) (inv Ps2 y1)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ps1 x1 x2)
            (op Ps2 y1 y2)
    data PseudoInverseTerm
      : Set where
      invL :
        PseudoInverseTerm ->
        PseudoInverseTerm
      opL :
        PseudoInverseTerm ->
        PseudoInverseTerm ->
        PseudoInverseTerm
    data ClPseudoInverseTerm
      (A : Set) : Set where
      sing :
        A -> ClPseudoInverseTerm A
      invCl :
        ClPseudoInverseTerm A ->
        ClPseudoInverseTerm A
      opCl :
        ClPseudoInverseTerm A ->
        ClPseudoInverseTerm A ->
        ClPseudoInverseTerm A
    data OpPseudoInverseTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpPseudoInverseTerm n
      invOL :
        OpPseudoInverseTerm n ->
        OpPseudoInverseTerm n
      opOL :
        OpPseudoInverseTerm n ->
        OpPseudoInverseTerm n ->
        OpPseudoInverseTerm n
    data OpPseudoInverseTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpPseudoInverseTerm2 n A
      sing2 :
        A -> OpPseudoInverseTerm2 n A
      invOL2 :
        OpPseudoInverseTerm2 n A ->
        OpPseudoInverseTerm2 n A
      opOL2 :
        OpPseudoInverseTerm2 n A ->
        OpPseudoInverseTerm2 n A ->
        OpPseudoInverseTerm2 n A
  
  module PseudoInverseSig where
    record PseudoInverseSig
      (A : Set) : Set where
      constructor PseudoInverseSigC
      field
        inv : A -> A
        op : A -> A -> A
    record PseudoInverseSigSig
      (AS : Set) : Set where
      constructor PseudoInverseSigSigSigC
      field
        invS : AS -> AS
        opS : AS -> AS -> AS
    record PseudoInverseSigProd
      (AP : Set) : Set where
      constructor PseudoInverseSigProdC
      field
        invP : Prod AP AP -> Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record PseudoInverseSigHom
      (A1 : Set) (A2 : Set)
      (Ps1 : PseudoInverseSig A1)
      (Ps2 : PseudoInverseSig A2) :
      Set where
      constructor PseudoInverseSigHomC
      field
        hom : A1 -> A2
        pres-inv :
          (x1 : A1) ->
          hom (inv Ps1 x1) ==
            inv Ps2 (hom x1)
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ps1 x1 x2) ==
            op Ps2 (hom x1) (hom x2)
    record PseudoInverseSigRelInterp
      (A1 : Set) (A2 : Set)
      (Ps1 : PseudoInverseSig A1)
      (Ps2 : PseudoInverseSig A2) :
      Set where
      constructor PseudoInverseSigRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-inv :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (inv Ps1 x1) (inv Ps2 y1)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ps1 x1 x2)
            (op Ps2 y1 y2)
    data PseudoInverseSigTerm
      : Set where
      invL :
        PseudoInverseSigTerm ->
        PseudoInverseSigTerm
      opL :
        PseudoInverseSigTerm ->
        PseudoInverseSigTerm ->
        PseudoInverseSigTerm
    data ClPseudoInverseSigTerm
      (A : Set) : Set where
      sing :
        A -> ClPseudoInverseSigTerm A
      invCl :
        ClPseudoInverseSigTerm A ->
        ClPseudoInverseSigTerm A
      opCl :
        ClPseudoInverseSigTerm A ->
        ClPseudoInverseSigTerm A ->
        ClPseudoInverseSigTerm A
    data OpPseudoInverseSigTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpPseudoInverseSigTerm n
      invOL :
        OpPseudoInverseSigTerm n ->
        OpPseudoInverseSigTerm n
      opOL :
        OpPseudoInverseSigTerm n ->
        OpPseudoInverseSigTerm n ->
        OpPseudoInverseSigTerm n
    data OpPseudoInverseSigTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpPseudoInverseSigTerm2 n A
      sing2 :
        A -> OpPseudoInverseSigTerm2 n A
      invOL2 :
        OpPseudoInverseSigTerm2 n A ->
        OpPseudoInverseSigTerm2 n A
      opOL2 :
        OpPseudoInverseSigTerm2 n A ->
        OpPseudoInverseSigTerm2 n A ->
        OpPseudoInverseSigTerm2 n A
  
  module PseudoInvolution where
    record PseudoInvolution
      (A : Set) : Set where
      constructor PseudoInvolutionC
      field
        inv : A -> A
        op : A -> A -> A
        quasiRightInverse_inv_op_e :
          (x : A) ->
          op (op (inv x) x) (inv x) ==
            inv x
    record PseudoInvolutionSig
      (AS : Set) : Set where
      constructor PseudoInvolutionSigSigC
      field
        invS : AS -> AS
        opS : AS -> AS -> AS
    record PseudoInvolutionProd
      (AP : Set) : Set where
      constructor PseudoInvolutionProdC
      field
        invP : Prod AP AP -> Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        quasiRightInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP (opP (invP xP) xP)
            (invP xP) == invP xP
    record PseudoInvolutionHom
      (A1 : Set) (A2 : Set)
      (Ps1 : PseudoInvolution A1)
      (Ps2 : PseudoInvolution A2) :
      Set where
      constructor PseudoInvolutionHomC
      field
        hom : A1 -> A2
        pres-inv :
          (x1 : A1) ->
          hom (inv Ps1 x1) ==
            inv Ps2 (hom x1)
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ps1 x1 x2) ==
            op Ps2 (hom x1) (hom x2)
    record PseudoInvolutionRelInterp
      (A1 : Set) (A2 : Set)
      (Ps1 : PseudoInvolution A1)
      (Ps2 : PseudoInvolution A2) :
      Set where
      constructor PseudoInvolutionRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-inv :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (inv Ps1 x1) (inv Ps2 y1)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ps1 x1 x2)
            (op Ps2 y1 y2)
    data PseudoInvolutionTerm
      : Set where
      invL :
        PseudoInvolutionTerm ->
        PseudoInvolutionTerm
      opL :
        PseudoInvolutionTerm ->
        PseudoInvolutionTerm ->
        PseudoInvolutionTerm
    data ClPseudoInvolutionTerm
      (A : Set) : Set where
      sing :
        A -> ClPseudoInvolutionTerm A
      invCl :
        ClPseudoInvolutionTerm A ->
        ClPseudoInvolutionTerm A
      opCl :
        ClPseudoInvolutionTerm A ->
        ClPseudoInvolutionTerm A ->
        ClPseudoInvolutionTerm A
    data OpPseudoInvolutionTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpPseudoInvolutionTerm n
      invOL :
        OpPseudoInvolutionTerm n ->
        OpPseudoInvolutionTerm n
      opOL :
        OpPseudoInvolutionTerm n ->
        OpPseudoInvolutionTerm n ->
        OpPseudoInvolutionTerm n
    data OpPseudoInvolutionTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpPseudoInvolutionTerm2 n A
      sing2 :
        A -> OpPseudoInvolutionTerm2 n A
      invOL2 :
        OpPseudoInvolutionTerm2 n A ->
        OpPseudoInvolutionTerm2 n A
      opOL2 :
        OpPseudoInvolutionTerm2 n A ->
        OpPseudoInvolutionTerm2 n A ->
        OpPseudoInvolutionTerm2 n A
  
  module Quandle where
    record Quandle
      (A : Set) : Set where
      constructor QuandleC
      field
        |> : A -> A -> A
        <| : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
        leftInverse :
          (x : A) (y : A) ->
          <| (|> x y) x == y
        rightInverse :
          (x : A) (y : A) ->
          |> x (<| y x) == y
        idempotent_|> :
          (x : A) -> |> x x == x
        idempotent_<| :
          (x : A) -> <| x x == x
    record QuandleSig
      (AS : Set) : Set where
      constructor QuandleSigSigC
      field
        |>S : AS -> AS -> AS
        <|S : AS -> AS -> AS
    record QuandleProd
      (AP : Set) : Set where
      constructor QuandleProdC
      field
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          |>P xP (|>P yP zP) ==
            |>P (|>P xP yP) (|>P xP zP)
        rightDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          <|P (<|P yP zP) xP ==
            <|P (<|P yP xP) (<|P zP xP)
        leftInverseP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          <|P (|>P xP yP) xP == yP
        rightInverseP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          |>P xP (<|P yP xP) == yP
        idempotent_|>P :
          (xP : Prod AP AP) ->
          |>P xP xP == xP
        idempotent_<|P :
          (xP : Prod AP AP) ->
          <|P xP xP == xP
    record QuandleHom
      (A1 : Set) (A2 : Set)
      (Qu1 : Quandle A1)
      (Qu2 : Quandle A2) : Set where
      constructor QuandleHomC
      field
        hom : A1 -> A2
        pres-|> :
          (x1 : A1) (x2 : A1) ->
          hom (|> Qu1 x1 x2) ==
            |> Qu2 (hom x1) (hom x2)
        pres-<| :
          (x1 : A1) (x2 : A1) ->
          hom (<| Qu1 x1 x2) ==
            <| Qu2 (hom x1) (hom x2)
    record QuandleRelInterp
      (A1 : Set) (A2 : Set)
      (Qu1 : Quandle A1)
      (Qu2 : Quandle A2) : Set where
      constructor QuandleRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-|> :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (|> Qu1 x1 x2)
            (|> Qu2 y1 y2)
        interp-<| :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (<| Qu1 x1 x2)
            (<| Qu2 y1 y2)
    data QuandleTerm : Set where
      |>L :
        QuandleTerm ->
        QuandleTerm -> QuandleTerm
      <|L :
        QuandleTerm ->
        QuandleTerm -> QuandleTerm
    data ClQuandleTerm
      (A : Set) : Set where
      sing : A -> ClQuandleTerm A
      |>Cl :
        ClQuandleTerm A ->
        ClQuandleTerm A ->
        ClQuandleTerm A
      <|Cl :
        ClQuandleTerm A ->
        ClQuandleTerm A ->
        ClQuandleTerm A
    data OpQuandleTerm
      (n : Nat) : Set where
      v : Fin n -> OpQuandleTerm n
      |>OL :
        OpQuandleTerm n ->
        OpQuandleTerm n ->
        OpQuandleTerm n
      <|OL :
        OpQuandleTerm n ->
        OpQuandleTerm n ->
        OpQuandleTerm n
    data OpQuandleTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpQuandleTerm2 n A
      sing2 : A -> OpQuandleTerm2 n A
      |>OL2 :
        OpQuandleTerm2 n A ->
        OpQuandleTerm2 n A ->
        OpQuandleTerm2 n A
      <|OL2 :
        OpQuandleTerm2 n A ->
        OpQuandleTerm2 n A ->
        OpQuandleTerm2 n A
  
  module QuasiGroup where
    record QuasiGroup
      (A : Set) : Set where
      constructor QuasiGroupC
      field
        op : A -> A -> A
        linv : A -> A -> A
        leftCancel :
          (x : A) (y : A) ->
          op x (linv x y) == y
        lefCancelOp :
          (x : A) (y : A) ->
          linv x (op x y) == y
        rinv : A -> A -> A
        rightCancel :
          (x : A) (y : A) ->
          op (rinv y x) x == y
        rightCancelOp :
          (x : A) (y : A) ->
          rinv (op y x) x == y
    record QuasiGroupSig
      (AS : Set) : Set where
      constructor QuasiGroupSigSigC
      field
        opS : AS -> AS -> AS
        linvS : AS -> AS -> AS
        rinvS : AS -> AS -> AS
    record QuasiGroupProd
      (AP : Set) : Set where
      constructor QuasiGroupProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        linvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rinvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (linvP xP yP) == yP
        lefCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          linvP xP (opP xP yP) == yP
        rightCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP (rinvP yP xP) xP == yP
        rightCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          rinvP (opP yP xP) xP == yP
    record QuasiGroupHom
      (A1 : Set) (A2 : Set)
      (Qu1 : QuasiGroup A1)
      (Qu2 : QuasiGroup A2) :
      Set where
      constructor QuasiGroupHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Qu1 x1 x2) ==
            op Qu2 (hom x1) (hom x2)
        pres-linv :
          (x1 : A1) (x2 : A1) ->
          hom (linv Qu1 x1 x2) ==
            linv Qu2 (hom x1) (hom x2)
        pres-rinv :
          (x1 : A1) (x2 : A1) ->
          hom (rinv Qu1 x1 x2) ==
            rinv Qu2 (hom x1) (hom x2)
    record QuasiGroupRelInterp
      (A1 : Set) (A2 : Set)
      (Qu1 : QuasiGroup A1)
      (Qu2 : QuasiGroup A2) :
      Set where
      constructor QuasiGroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Qu1 x1 x2)
            (op Qu2 y1 y2)
        interp-linv :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (linv Qu1 x1 x2)
            (linv Qu2 y1 y2)
        interp-rinv :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (rinv Qu1 x1 x2)
            (rinv Qu2 y1 y2)
    data QuasiGroupTerm : Set where
      opL :
        QuasiGroupTerm ->
        QuasiGroupTerm -> QuasiGroupTerm
      linvL :
        QuasiGroupTerm ->
        QuasiGroupTerm -> QuasiGroupTerm
      rinvL :
        QuasiGroupTerm ->
        QuasiGroupTerm -> QuasiGroupTerm
    data ClQuasiGroupTerm
      (A : Set) : Set where
      sing : A -> ClQuasiGroupTerm A
      opCl :
        ClQuasiGroupTerm A ->
        ClQuasiGroupTerm A ->
        ClQuasiGroupTerm A
      linvCl :
        ClQuasiGroupTerm A ->
        ClQuasiGroupTerm A ->
        ClQuasiGroupTerm A
      rinvCl :
        ClQuasiGroupTerm A ->
        ClQuasiGroupTerm A ->
        ClQuasiGroupTerm A
    data OpQuasiGroupTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpQuasiGroupTerm n
      opOL :
        OpQuasiGroupTerm n ->
        OpQuasiGroupTerm n ->
        OpQuasiGroupTerm n
      linvOL :
        OpQuasiGroupTerm n ->
        OpQuasiGroupTerm n ->
        OpQuasiGroupTerm n
      rinvOL :
        OpQuasiGroupTerm n ->
        OpQuasiGroupTerm n ->
        OpQuasiGroupTerm n
    data OpQuasiGroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpQuasiGroupTerm2 n A
      sing2 :
        A -> OpQuasiGroupTerm2 n A
      opOL2 :
        OpQuasiGroupTerm2 n A ->
        OpQuasiGroupTerm2 n A ->
        OpQuasiGroupTerm2 n A
      linvOL2 :
        OpQuasiGroupTerm2 n A ->
        OpQuasiGroupTerm2 n A ->
        OpQuasiGroupTerm2 n A
      rinvOL2 :
        OpQuasiGroupTerm2 n A ->
        OpQuasiGroupTerm2 n A ->
        OpQuasiGroupTerm2 n A
  
  module QuasiInverse where
    record QuasiInverse
      (A : Set) : Set where
      constructor QuasiInverseC
      field
        inv : A -> A
        op : A -> A -> A
        quasiInverse_inv_op_e :
          (x : A) ->
          op (op x (inv x)) x == x
        quasiRightInverse_inv_op_e :
          (x : A) ->
          op (op (inv x) x) (inv x) ==
            inv x
    record QuasiInverseSig
      (AS : Set) : Set where
      constructor QuasiInverseSigSigC
      field
        invS : AS -> AS
        opS : AS -> AS -> AS
    record QuasiInverseProd
      (AP : Set) : Set where
      constructor QuasiInverseProdC
      field
        invP : Prod AP AP -> Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        quasiInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP (opP xP (invP xP)) xP == xP
        quasiRightInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP (opP (invP xP) xP)
            (invP xP) == invP xP
    record QuasiInverseHom
      (A1 : Set) (A2 : Set)
      (Qu1 : QuasiInverse A1)
      (Qu2 : QuasiInverse A2) :
      Set where
      constructor QuasiInverseHomC
      field
        hom : A1 -> A2
        pres-inv :
          (x1 : A1) ->
          hom (inv Qu1 x1) ==
            inv Qu2 (hom x1)
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Qu1 x1 x2) ==
            op Qu2 (hom x1) (hom x2)
    record QuasiInverseRelInterp
      (A1 : Set) (A2 : Set)
      (Qu1 : QuasiInverse A1)
      (Qu2 : QuasiInverse A2) :
      Set where
      constructor QuasiInverseRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-inv :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (inv Qu1 x1) (inv Qu2 y1)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Qu1 x1 x2)
            (op Qu2 y1 y2)
    data QuasiInverseTerm
      : Set where
      invL :
        QuasiInverseTerm ->
        QuasiInverseTerm
      opL :
        QuasiInverseTerm ->
        QuasiInverseTerm ->
        QuasiInverseTerm
    data ClQuasiInverseTerm
      (A : Set) : Set where
      sing :
        A -> ClQuasiInverseTerm A
      invCl :
        ClQuasiInverseTerm A ->
        ClQuasiInverseTerm A
      opCl :
        ClQuasiInverseTerm A ->
        ClQuasiInverseTerm A ->
        ClQuasiInverseTerm A
    data OpQuasiInverseTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpQuasiInverseTerm n
      invOL :
        OpQuasiInverseTerm n ->
        OpQuasiInverseTerm n
      opOL :
        OpQuasiInverseTerm n ->
        OpQuasiInverseTerm n ->
        OpQuasiInverseTerm n
    data OpQuasiInverseTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpQuasiInverseTerm2 n A
      sing2 :
        A -> OpQuasiInverseTerm2 n A
      invOL2 :
        OpQuasiInverseTerm2 n A ->
        OpQuasiInverseTerm2 n A
      opOL2 :
        OpQuasiInverseTerm2 n A ->
        OpQuasiInverseTerm2 n A ->
        OpQuasiInverseTerm2 n A
  
  module Rack where
    record Rack
      (A : Set) : Set where
      constructor RackC
      field
        |> : A -> A -> A
        <| : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
        leftInverse :
          (x : A) (y : A) ->
          <| (|> x y) x == y
        rightInverse :
          (x : A) (y : A) ->
          |> x (<| y x) == y
    record RackSig
      (AS : Set) : Set where
      constructor RackSigSigC
      field
        |>S : AS -> AS -> AS
        <|S : AS -> AS -> AS
    record RackProd
      (AP : Set) : Set where
      constructor RackProdC
      field
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          |>P xP (|>P yP zP) ==
            |>P (|>P xP yP) (|>P xP zP)
        rightDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          <|P (<|P yP zP) xP ==
            <|P (<|P yP xP) (<|P zP xP)
        leftInverseP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          <|P (|>P xP yP) xP == yP
        rightInverseP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          |>P xP (<|P yP xP) == yP
    record RackHom
      (A1 : Set) (A2 : Set)
      (Ra1 : Rack A1)
      (Ra2 : Rack A2) : Set where
      constructor RackHomC
      field
        hom : A1 -> A2
        pres-|> :
          (x1 : A1) (x2 : A1) ->
          hom (|> Ra1 x1 x2) ==
            |> Ra2 (hom x1) (hom x2)
        pres-<| :
          (x1 : A1) (x2 : A1) ->
          hom (<| Ra1 x1 x2) ==
            <| Ra2 (hom x1) (hom x2)
    record RackRelInterp
      (A1 : Set) (A2 : Set)
      (Ra1 : Rack A1)
      (Ra2 : Rack A2) : Set where
      constructor RackRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-|> :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (|> Ra1 x1 x2)
            (|> Ra2 y1 y2)
        interp-<| :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (<| Ra1 x1 x2)
            (<| Ra2 y1 y2)
    data RackTerm : Set where
      |>L :
        RackTerm -> RackTerm -> RackTerm
      <|L :
        RackTerm -> RackTerm -> RackTerm
    data ClRackTerm
      (A : Set) : Set where
      sing : A -> ClRackTerm A
      |>Cl :
        ClRackTerm A ->
        ClRackTerm A -> ClRackTerm A
      <|Cl :
        ClRackTerm A ->
        ClRackTerm A -> ClRackTerm A
    data OpRackTerm
      (n : Nat) : Set where
      v : Fin n -> OpRackTerm n
      |>OL :
        OpRackTerm n ->
        OpRackTerm n -> OpRackTerm n
      <|OL :
        OpRackTerm n ->
        OpRackTerm n -> OpRackTerm n
    data OpRackTerm2
      (n : Nat) (A : Set) : Set where
      v2 : Fin n -> OpRackTerm2 n A
      sing2 : A -> OpRackTerm2 n A
      |>OL2 :
        OpRackTerm2 n A ->
        OpRackTerm2 n A ->
        OpRackTerm2 n A
      <|OL2 :
        OpRackTerm2 n A ->
        OpRackTerm2 n A ->
        OpRackTerm2 n A
  
  module RectangularBand where
    record RectangularBand
      (A : Set) : Set where
      constructor RectangularBandC
      field
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        idempotent_op :
          (x : A) -> op x x == x
        middleCommute_* :
          (x : A) (y : A) (z : A) ->
          op (op (op x y) z) x ==
            op (op (op x z) y) x
    record RectangularBandSig
      (AS : Set) : Set where
      constructor RectangularBandSigSigC
      field
        opS : AS -> AS -> AS
    record RectangularBandProd
      (AP : Set) : Set where
      constructor RectangularBandProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        idempotent_opP :
          (xP : Prod AP AP) ->
          opP xP xP == xP
        middleCommute_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP (opP xP yP) zP) xP ==
            opP (opP (opP xP zP) yP) xP
    record RectangularBandHom
      (A1 : Set) (A2 : Set)
      (Re1 : RectangularBand A1)
      (Re2 : RectangularBand A2) :
      Set where
      constructor RectangularBandHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Re1 x1 x2) ==
            op Re2 (hom x1) (hom x2)
    record RectangularBandRelInterp
      (A1 : Set) (A2 : Set)
      (Re1 : RectangularBand A1)
      (Re2 : RectangularBand A2) :
      Set where
      constructor RectangularBandRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Re1 x1 x2)
            (op Re2 y1 y2)
    data RectangularBandTerm
      : Set where
      opL :
        RectangularBandTerm ->
        RectangularBandTerm ->
        RectangularBandTerm
    data ClRectangularBandTerm
      (A : Set) : Set where
      sing :
        A -> ClRectangularBandTerm A
      opCl :
        ClRectangularBandTerm A ->
        ClRectangularBandTerm A ->
        ClRectangularBandTerm A
    data OpRectangularBandTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpRectangularBandTerm n
      opOL :
        OpRectangularBandTerm n ->
        OpRectangularBandTerm n ->
        OpRectangularBandTerm n
    data OpRectangularBandTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpRectangularBandTerm2 n A
      sing2 :
        A -> OpRectangularBandTerm2 n A
      opOL2 :
        OpRectangularBandTerm2 n A ->
        OpRectangularBandTerm2 n A ->
        OpRectangularBandTerm2 n A
  
  module RegularSemigroup where
    record RegularSemigroup
      (A : Set) : Set where
      constructor RegularSemigroupC
      field
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        inv : A -> A
        quasiInverse_inv_op_e :
          (x : A) ->
          op (op x (inv x)) x == x
    record RegularSemigroupSig
      (AS : Set) : Set where
      constructor RegularSemigroupSigSigC
      field
        opS : AS -> AS -> AS
        invS : AS -> AS
    record RegularSemigroupProd
      (AP : Set) : Set where
      constructor RegularSemigroupProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        invP : Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        quasiInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP (opP xP (invP xP)) xP == xP
    record RegularSemigroupHom
      (A1 : Set) (A2 : Set)
      (Re1 : RegularSemigroup A1)
      (Re2 : RegularSemigroup A2) :
      Set where
      constructor RegularSemigroupHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Re1 x1 x2) ==
            op Re2 (hom x1) (hom x2)
        pres-inv :
          (x1 : A1) ->
          hom (inv Re1 x1) ==
            inv Re2 (hom x1)
    record RegularSemigroupRelInterp
      (A1 : Set) (A2 : Set)
      (Re1 : RegularSemigroup A1)
      (Re2 : RegularSemigroup A2) :
      Set where
      constructor RegularSemigroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Re1 x1 x2)
            (op Re2 y1 y2)
        interp-inv :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (inv Re1 x1) (inv Re2 y1)
    data RegularSemigroupTerm
      : Set where
      opL :
        RegularSemigroupTerm ->
        RegularSemigroupTerm ->
        RegularSemigroupTerm
      invL :
        RegularSemigroupTerm ->
        RegularSemigroupTerm
    data ClRegularSemigroupTerm
      (A : Set) : Set where
      sing :
        A -> ClRegularSemigroupTerm A
      opCl :
        ClRegularSemigroupTerm A ->
        ClRegularSemigroupTerm A ->
        ClRegularSemigroupTerm A
      invCl :
        ClRegularSemigroupTerm A ->
        ClRegularSemigroupTerm A
    data OpRegularSemigroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpRegularSemigroupTerm n
      opOL :
        OpRegularSemigroupTerm n ->
        OpRegularSemigroupTerm n ->
        OpRegularSemigroupTerm n
      invOL :
        OpRegularSemigroupTerm n ->
        OpRegularSemigroupTerm n
    data OpRegularSemigroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpRegularSemigroupTerm2 n A
      sing2 :
        A -> OpRegularSemigroupTerm2 n A
      opOL2 :
        OpRegularSemigroupTerm2 n A ->
        OpRegularSemigroupTerm2 n A ->
        OpRegularSemigroupTerm2 n A
      invOL2 :
        OpRegularSemigroupTerm2 n A ->
        OpRegularSemigroupTerm2 n A
  
  module Right0 where
    record Right0
      (A : Set) : Set where
      constructor Right0C
      field
        0 : A
        op : A -> A -> A
        rightZero_op_0 :
          (x : A) -> op x 0 == 0
    record Right0Sig
      (AS : Set) : Set where
      constructor Right0SigSigC
      field
        0S : AS
        opS : AS -> AS -> AS
    record Right0Prod
      (AP : Set) : Set where
      constructor Right0ProdC
      field
        0P : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightZero_op_0P :
          (xP : Prod AP AP) ->
          opP xP 0P == 0P
    record Right0Hom
      (A1 : Set) (A2 : Set)
      (Ri1 : Right0 A1)
      (Ri2 : Right0 A2) : Set where
      constructor Right0HomC
      field
        hom : A1 -> A2
        pres-0 : hom (0 Ri1) == 0 Ri2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ri1 x1 x2) ==
            op Ri2 (hom x1) (hom x2)
    record Right0RelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : Right0 A1)
      (Ri2 : Right0 A2) : Set where
      constructor Right0RelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0 :
          interp (0 Ri1) (0 Ri2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ri1 x1 x2)
            (op Ri2 y1 y2)
    data Right0LTerm : Set where
      0L : Right0LTerm
      opL :
        Right0LTerm ->
        Right0LTerm -> Right0LTerm
    data ClRight0ClTerm
      (A : Set) : Set where
      sing : A -> ClRight0ClTerm A
      0Cl : ClRight0ClTerm A
      opCl :
        ClRight0ClTerm A ->
        ClRight0ClTerm A ->
        ClRight0ClTerm A
    data OpRight0OLTerm
      (n : Nat) : Set where
      v : Fin n -> OpRight0OLTerm n
      0OL : OpRight0OLTerm n
      opOL :
        OpRight0OLTerm n ->
        OpRight0OLTerm n ->
        OpRight0OLTerm n
    data OpRight0OL2Term2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpRight0OL2Term2 n A
      sing2 :
        A -> OpRight0OL2Term2 n A
      0OL2 : OpRight0OL2Term2 n A
      opOL2 :
        OpRight0OL2Term2 n A ->
        OpRight0OL2Term2 n A ->
        OpRight0OL2Term2 n A
  
  module RightBiMagma where
    record RightBiMagma
      (A : Set) : Set where
      constructor RightBiMagmaC
      field
        op : A -> A -> A
        rinv : A -> A -> A
    record RightBiMagmaSig
      (AS : Set) : Set where
      constructor RightBiMagmaSigSigC
      field
        opS : AS -> AS -> AS
        rinvS : AS -> AS -> AS
    record RightBiMagmaProd
      (AP : Set) : Set where
      constructor RightBiMagmaProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rinvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record RightBiMagmaHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightBiMagma A1)
      (Ri2 : RightBiMagma A2) :
      Set where
      constructor RightBiMagmaHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ri1 x1 x2) ==
            op Ri2 (hom x1) (hom x2)
        pres-rinv :
          (x1 : A1) (x2 : A1) ->
          hom (rinv Ri1 x1 x2) ==
            rinv Ri2 (hom x1) (hom x2)
    record RightBiMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightBiMagma A1)
      (Ri2 : RightBiMagma A2) :
      Set where
      constructor RightBiMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ri1 x1 x2)
            (op Ri2 y1 y2)
        interp-rinv :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (rinv Ri1 x1 x2)
            (rinv Ri2 y1 y2)
    data RightBiMagmaTerm
      : Set where
      opL :
        RightBiMagmaTerm ->
        RightBiMagmaTerm ->
        RightBiMagmaTerm
      rinvL :
        RightBiMagmaTerm ->
        RightBiMagmaTerm ->
        RightBiMagmaTerm
    data ClRightBiMagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClRightBiMagmaTerm A
      opCl :
        ClRightBiMagmaTerm A ->
        ClRightBiMagmaTerm A ->
        ClRightBiMagmaTerm A
      rinvCl :
        ClRightBiMagmaTerm A ->
        ClRightBiMagmaTerm A ->
        ClRightBiMagmaTerm A
    data OpRightBiMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpRightBiMagmaTerm n
      opOL :
        OpRightBiMagmaTerm n ->
        OpRightBiMagmaTerm n ->
        OpRightBiMagmaTerm n
      rinvOL :
        OpRightBiMagmaTerm n ->
        OpRightBiMagmaTerm n ->
        OpRightBiMagmaTerm n
    data OpRightBiMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpRightBiMagmaTerm2 n A
      sing2 :
        A -> OpRightBiMagmaTerm2 n A
      opOL2 :
        OpRightBiMagmaTerm2 n A ->
        OpRightBiMagmaTerm2 n A ->
        OpRightBiMagmaTerm2 n A
      rinvOL2 :
        OpRightBiMagmaTerm2 n A ->
        OpRightBiMagmaTerm2 n A ->
        OpRightBiMagmaTerm2 n A
  
  module RightBinaryInverse where
    record RightBinaryInverse
      (A : Set) : Set where
      constructor RightBinaryInverseC
      field
        |> : A -> A -> A
        <| : A -> A -> A
        rightInverse :
          (x : A) (y : A) ->
          |> x (<| y x) == y
    record RightBinaryInverseSig
      (AS : Set) : Set where
      constructor RightBinaryInverseSigSigC
      field
        |>S : AS -> AS -> AS
        <|S : AS -> AS -> AS
    record RightBinaryInverseProd
      (AP : Set) : Set where
      constructor RightBinaryInverseProdC
      field
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightInverseP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          |>P xP (<|P yP xP) == yP
    record RightBinaryInverseHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightBinaryInverse A1)
      (Ri2 : RightBinaryInverse A2) :
      Set where
      constructor RightBinaryInverseHomC
      field
        hom : A1 -> A2
        pres-|> :
          (x1 : A1) (x2 : A1) ->
          hom (|> Ri1 x1 x2) ==
            |> Ri2 (hom x1) (hom x2)
        pres-<| :
          (x1 : A1) (x2 : A1) ->
          hom (<| Ri1 x1 x2) ==
            <| Ri2 (hom x1) (hom x2)
    record RightBinaryInverseRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightBinaryInverse A1)
      (Ri2 : RightBinaryInverse A2) :
      Set where
      constructor RightBinaryInverseRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-|> :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (|> Ri1 x1 x2)
            (|> Ri2 y1 y2)
        interp-<| :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (<| Ri1 x1 x2)
            (<| Ri2 y1 y2)
    data RightBinaryInverseTerm
      : Set where
      |>L :
        RightBinaryInverseTerm ->
        RightBinaryInverseTerm ->
        RightBinaryInverseTerm
      <|L :
        RightBinaryInverseTerm ->
        RightBinaryInverseTerm ->
        RightBinaryInverseTerm
    data ClRightBinaryInverseTerm
      (A : Set) : Set where
      sing :
        A -> ClRightBinaryInverseTerm A
      |>Cl :
        ClRightBinaryInverseTerm A ->
        ClRightBinaryInverseTerm A ->
        ClRightBinaryInverseTerm A
      <|Cl :
        ClRightBinaryInverseTerm A ->
        ClRightBinaryInverseTerm A ->
        ClRightBinaryInverseTerm A
    data OpRightBinaryInverseTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpRightBinaryInverseTerm n
      |>OL :
        OpRightBinaryInverseTerm n ->
        OpRightBinaryInverseTerm n ->
        OpRightBinaryInverseTerm n
      <|OL :
        OpRightBinaryInverseTerm n ->
        OpRightBinaryInverseTerm n ->
        OpRightBinaryInverseTerm n
    data OpRightBinaryInverseTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpRightBinaryInverseTerm2 n A
      sing2 :
        A ->
        OpRightBinaryInverseTerm2 n A
      |>OL2 :
        OpRightBinaryInverseTerm2 n A ->
        OpRightBinaryInverseTerm2 n A ->
        OpRightBinaryInverseTerm2 n A
      <|OL2 :
        OpRightBinaryInverseTerm2 n A ->
        OpRightBinaryInverseTerm2 n A ->
        OpRightBinaryInverseTerm2 n A
  
  module RightCancellative where
    record RightCancellative
      (A : Set) : Set where
      constructor RightCancellativeC
      field
        op : A -> A -> A
        rinv : A -> A -> A
        rightCancel :
          (x : A) (y : A) ->
          op (rinv y x) x == y
    record RightCancellativeSig
      (AS : Set) : Set where
      constructor RightCancellativeSigSigC
      field
        opS : AS -> AS -> AS
        rinvS : AS -> AS -> AS
    record RightCancellativeProd
      (AP : Set) : Set where
      constructor RightCancellativeProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rinvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP (rinvP yP xP) xP == yP
    record RightCancellativeHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightCancellative A1)
      (Ri2 : RightCancellative A2) :
      Set where
      constructor RightCancellativeHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ri1 x1 x2) ==
            op Ri2 (hom x1) (hom x2)
        pres-rinv :
          (x1 : A1) (x2 : A1) ->
          hom (rinv Ri1 x1 x2) ==
            rinv Ri2 (hom x1) (hom x2)
    record RightCancellativeRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightCancellative A1)
      (Ri2 : RightCancellative A2) :
      Set where
      constructor RightCancellativeRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ri1 x1 x2)
            (op Ri2 y1 y2)
        interp-rinv :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (rinv Ri1 x1 x2)
            (rinv Ri2 y1 y2)
    data RightCancellativeTerm
      : Set where
      opL :
        RightCancellativeTerm ->
        RightCancellativeTerm ->
        RightCancellativeTerm
      rinvL :
        RightCancellativeTerm ->
        RightCancellativeTerm ->
        RightCancellativeTerm
    data ClRightCancellativeTerm
      (A : Set) : Set where
      sing :
        A -> ClRightCancellativeTerm A
      opCl :
        ClRightCancellativeTerm A ->
        ClRightCancellativeTerm A ->
        ClRightCancellativeTerm A
      rinvCl :
        ClRightCancellativeTerm A ->
        ClRightCancellativeTerm A ->
        ClRightCancellativeTerm A
    data OpRightCancellativeTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpRightCancellativeTerm n
      opOL :
        OpRightCancellativeTerm n ->
        OpRightCancellativeTerm n ->
        OpRightCancellativeTerm n
      rinvOL :
        OpRightCancellativeTerm n ->
        OpRightCancellativeTerm n ->
        OpRightCancellativeTerm n
    data OpRightCancellativeTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpRightCancellativeTerm2 n A
      sing2 :
        A ->
        OpRightCancellativeTerm2 n A
      opOL2 :
        OpRightCancellativeTerm2 n A ->
        OpRightCancellativeTerm2 n A ->
        OpRightCancellativeTerm2 n A
      rinvOL2 :
        OpRightCancellativeTerm2 n A ->
        OpRightCancellativeTerm2 n A ->
        OpRightCancellativeTerm2 n A
  
  module RightCancellativeMagma where
    record RightCancellativeMagma
      (A : Set) : Set where
      constructor RightCancellativeMagmaC
      field
        op : A -> A -> A
        rightCancellative :
          (x : A) (y : A) (z : A) ->
          op x z == op y z -> x == y
    record RightCancellativeMagmaSig
      (AS : Set) : Set where
      constructor RightCancellativeMagmaSigSigC
      field
        opS : AS -> AS -> AS
    record RightCancellativeMagmaProd
      (AP : Set) : Set where
      constructor RightCancellativeMagmaProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP xP zP == opP yP zP ->
          xP == yP
    record RightCancellativeMagmaHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightCancellativeMagma
         A1)
      (Ri2 : RightCancellativeMagma
         A2) : Set where
      constructor RightCancellativeMagmaHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ri1 x1 x2) ==
            op Ri2 (hom x1) (hom x2)
    record RightCancellativeMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightCancellativeMagma
         A1)
      (Ri2 : RightCancellativeMagma
         A2) : Set where
      constructor RightCancellativeMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ri1 x1 x2)
            (op Ri2 y1 y2)
    data RightCancellativeMagmaTerm
      : Set where
      opL :
        RightCancellativeMagmaTerm ->
        RightCancellativeMagmaTerm ->
        RightCancellativeMagmaTerm
    data ClRightCancellativeMagmaTerm
      (A : Set) : Set where
      sing :
        A ->
        ClRightCancellativeMagmaTerm A
      opCl :
        ClRightCancellativeMagmaTerm
          A ->
        ClRightCancellativeMagmaTerm
          A ->
        ClRightCancellativeMagmaTerm A
    data OpRightCancellativeMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpRightCancellativeMagmaTerm n
      opOL :
        OpRightCancellativeMagmaTerm
          n ->
        OpRightCancellativeMagmaTerm
          n ->
        OpRightCancellativeMagmaTerm n
    data OpRightCancellativeMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpRightCancellativeMagmaTerm2 n
          A
      sing2 :
        A ->
        OpRightCancellativeMagmaTerm2 n
          A
      opOL2 :
        OpRightCancellativeMagmaTerm2 n
          A ->
        OpRightCancellativeMagmaTerm2 n
          A ->
        OpRightCancellativeMagmaTerm2 n
          A
  
  module RightCancellativeOp where
    record RightCancellativeOp
      (A : Set) : Set where
      constructor RightCancellativeOpC
      field
        op : A -> A -> A
        rinv : A -> A -> A
        rightCancelOp :
          (x : A) (y : A) ->
          rinv (op y x) x == y
    record RightCancellativeOpSig
      (AS : Set) : Set where
      constructor RightCancellativeOpSigSigC
      field
        opS : AS -> AS -> AS
        rinvS : AS -> AS -> AS
    record RightCancellativeOpProd
      (AP : Set) : Set where
      constructor RightCancellativeOpProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rinvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          rinvP (opP yP xP) xP == yP
    record RightCancellativeOpHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightCancellativeOp A1)
      (Ri2 : RightCancellativeOp A2) :
      Set where
      constructor RightCancellativeOpHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ri1 x1 x2) ==
            op Ri2 (hom x1) (hom x2)
        pres-rinv :
          (x1 : A1) (x2 : A1) ->
          hom (rinv Ri1 x1 x2) ==
            rinv Ri2 (hom x1) (hom x2)
    record RightCancellativeOpRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightCancellativeOp A1)
      (Ri2 : RightCancellativeOp A2) :
      Set where
      constructor RightCancellativeOpRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ri1 x1 x2)
            (op Ri2 y1 y2)
        interp-rinv :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (rinv Ri1 x1 x2)
            (rinv Ri2 y1 y2)
    data RightCancellativeOpTerm
      : Set where
      opL :
        RightCancellativeOpTerm ->
        RightCancellativeOpTerm ->
        RightCancellativeOpTerm
      rinvL :
        RightCancellativeOpTerm ->
        RightCancellativeOpTerm ->
        RightCancellativeOpTerm
    data ClRightCancellativeOpTerm
      (A : Set) : Set where
      sing :
        A -> ClRightCancellativeOpTerm A
      opCl :
        ClRightCancellativeOpTerm A ->
        ClRightCancellativeOpTerm A ->
        ClRightCancellativeOpTerm A
      rinvCl :
        ClRightCancellativeOpTerm A ->
        ClRightCancellativeOpTerm A ->
        ClRightCancellativeOpTerm A
    data OpRightCancellativeOpTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpRightCancellativeOpTerm n
      opOL :
        OpRightCancellativeOpTerm n ->
        OpRightCancellativeOpTerm n ->
        OpRightCancellativeOpTerm n
      rinvOL :
        OpRightCancellativeOpTerm n ->
        OpRightCancellativeOpTerm n ->
        OpRightCancellativeOpTerm n
    data OpRightCancellativeOpTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpRightCancellativeOpTerm2 n A
      sing2 :
        A ->
        OpRightCancellativeOpTerm2 n A
      opOL2 :
        OpRightCancellativeOpTerm2 n
          A ->
        OpRightCancellativeOpTerm2 n
          A ->
        OpRightCancellativeOpTerm2 n A
      rinvOL2 :
        OpRightCancellativeOpTerm2 n
          A ->
        OpRightCancellativeOpTerm2 n
          A ->
        OpRightCancellativeOpTerm2 n A
  
  module RightCancellativeSemigroup where
    record RightCancellativeSemigroup
      (A : Set) : Set where
      constructor RightCancellativeSemigroupC
      field
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        rightCancellative :
          (x : A) (y : A) (z : A) ->
          op x z == op y z -> x == y
    record RightCancellativeSemigroupSig
      (AS : Set) : Set where
      constructor RightCancellativeSemigroupSigSigC
      field
        opS : AS -> AS -> AS
    record RightCancellativeSemigroupProd
      (AP : Set) : Set where
      constructor RightCancellativeSemigroupProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        rightCancellativeP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP xP zP == opP yP zP ->
          xP == yP
    record RightCancellativeSemigroupHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightCancellativeSemigroup
         A1)
      (Ri2 : RightCancellativeSemigroup
         A2) : Set where
      constructor RightCancellativeSemigroupHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ri1 x1 x2) ==
            op Ri2 (hom x1) (hom x2)
    record RightCancellativeSemigroupRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightCancellativeSemigroup
         A1)
      (Ri2 : RightCancellativeSemigroup
         A2) : Set where
      constructor RightCancellativeSemigroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ri1 x1 x2)
            (op Ri2 y1 y2)
    data RightCancellativeSemigroupTerm
      : Set where
      opL :
        RightCancellativeSemigroupTerm ->
        RightCancellativeSemigroupTerm ->
        RightCancellativeSemigroupTerm
    data ClRightCancellativeSemigroupTerm
      (A : Set) : Set where
      sing :
        A ->
        ClRightCancellativeSemigroupTerm
          A
      opCl :
        ClRightCancellativeSemigroupTerm
          A ->
        ClRightCancellativeSemigroupTerm
          A ->
        ClRightCancellativeSemigroupTerm
          A
    data OpRightCancellativeSemigroupTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpRightCancellativeSemigroupTerm
          n
      opOL :
        OpRightCancellativeSemigroupTerm
          n ->
        OpRightCancellativeSemigroupTerm
          n ->
        OpRightCancellativeSemigroupTerm
          n
    data OpRightCancellativeSemigroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpRightCancellativeSemigroupTerm2
          n
          A
      sing2 :
        A ->
        OpRightCancellativeSemigroupTerm2
          n
          A
      opOL2 :
        OpRightCancellativeSemigroupTerm2
          n
          A ->
        OpRightCancellativeSemigroupTerm2
          n
          A ->
        OpRightCancellativeSemigroupTerm2
          n
          A
  
  module RightDistributiveMagma where
    record RightDistributiveMagma
      (A : Set) : Set where
      constructor RightDistributiveMagmaC
      field
        op : A -> A -> A
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          op (op y z) x ==
            op (op y x) (op z x)
    record RightDistributiveMagmaSig
      (AS : Set) : Set where
      constructor RightDistributiveMagmaSigSigC
      field
        opS : AS -> AS -> AS
    record RightDistributiveMagmaProd
      (AP : Set) : Set where
      constructor RightDistributiveMagmaProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP yP zP) xP ==
            opP (opP yP xP) (opP zP xP)
    record RightDistributiveMagmaHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightDistributiveMagma
         A1)
      (Ri2 : RightDistributiveMagma
         A2) : Set where
      constructor RightDistributiveMagmaHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ri1 x1 x2) ==
            op Ri2 (hom x1) (hom x2)
    record RightDistributiveMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightDistributiveMagma
         A1)
      (Ri2 : RightDistributiveMagma
         A2) : Set where
      constructor RightDistributiveMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ri1 x1 x2)
            (op Ri2 y1 y2)
    data RightDistributiveMagmaTerm
      : Set where
      opL :
        RightDistributiveMagmaTerm ->
        RightDistributiveMagmaTerm ->
        RightDistributiveMagmaTerm
    data ClRightDistributiveMagmaTerm
      (A : Set) : Set where
      sing :
        A ->
        ClRightDistributiveMagmaTerm A
      opCl :
        ClRightDistributiveMagmaTerm
          A ->
        ClRightDistributiveMagmaTerm
          A ->
        ClRightDistributiveMagmaTerm A
    data OpRightDistributiveMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpRightDistributiveMagmaTerm n
      opOL :
        OpRightDistributiveMagmaTerm
          n ->
        OpRightDistributiveMagmaTerm
          n ->
        OpRightDistributiveMagmaTerm n
    data OpRightDistributiveMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpRightDistributiveMagmaTerm2 n
          A
      sing2 :
        A ->
        OpRightDistributiveMagmaTerm2 n
          A
      opOL2 :
        OpRightDistributiveMagmaTerm2 n
          A ->
        OpRightDistributiveMagmaTerm2 n
          A ->
        OpRightDistributiveMagmaTerm2 n
          A
  
  module RightIdempotence where
    record RightIdempotence
      (A : Set) : Set where
      constructor RightIdempotenceC
      field
        <| : A -> A -> A
        idempotent_<| :
          (x : A) -> <| x x == x
    record RightIdempotenceSig
      (AS : Set) : Set where
      constructor RightIdempotenceSigSigC
      field
        <|S : AS -> AS -> AS
    record RightIdempotenceProd
      (AP : Set) : Set where
      constructor RightIdempotenceProdC
      field
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        idempotent_<|P :
          (xP : Prod AP AP) ->
          <|P xP xP == xP
    record RightIdempotenceHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightIdempotence A1)
      (Ri2 : RightIdempotence A2) :
      Set where
      constructor RightIdempotenceHomC
      field
        hom : A1 -> A2
        pres-<| :
          (x1 : A1) (x2 : A1) ->
          hom (<| Ri1 x1 x2) ==
            <| Ri2 (hom x1) (hom x2)
    record RightIdempotenceRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightIdempotence A1)
      (Ri2 : RightIdempotence A2) :
      Set where
      constructor RightIdempotenceRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-<| :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (<| Ri1 x1 x2)
            (<| Ri2 y1 y2)
    data RightIdempotenceTerm
      : Set where
      <|L :
        RightIdempotenceTerm ->
        RightIdempotenceTerm ->
        RightIdempotenceTerm
    data ClRightIdempotenceTerm
      (A : Set) : Set where
      sing :
        A -> ClRightIdempotenceTerm A
      <|Cl :
        ClRightIdempotenceTerm A ->
        ClRightIdempotenceTerm A ->
        ClRightIdempotenceTerm A
    data OpRightIdempotenceTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpRightIdempotenceTerm n
      <|OL :
        OpRightIdempotenceTerm n ->
        OpRightIdempotenceTerm n ->
        OpRightIdempotenceTerm n
    data OpRightIdempotenceTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpRightIdempotenceTerm2 n A
      sing2 :
        A -> OpRightIdempotenceTerm2 n A
      <|OL2 :
        OpRightIdempotenceTerm2 n A ->
        OpRightIdempotenceTerm2 n A ->
        OpRightIdempotenceTerm2 n A
  
  module RightInverse where
    record RightInverse
      (A : Set) : Set where
      constructor RightInverseC
      field
        inv : A -> A
        e : A
        op : A -> A -> A
        rightInverse_inv_op_e :
          (x : A) -> op (inv x) x == e
    record RightInverseSig
      (AS : Set) : Set where
      constructor RightInverseSigSigC
      field
        invS : AS -> AS
        eS : AS
        opS : AS -> AS -> AS
    record RightInverseProd
      (AP : Set) : Set where
      constructor RightInverseProdC
      field
        invP : Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightInverse_inv_op_eP :
          (xP : Prod AP AP) ->
          opP (invP xP) xP == eP
    record RightInverseHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightInverse A1)
      (Ri2 : RightInverse A2) :
      Set where
      constructor RightInverseHomC
      field
        hom : A1 -> A2
        pres-inv :
          (x1 : A1) ->
          hom (inv Ri1 x1) ==
            inv Ri2 (hom x1)
        pres-e : hom (e Ri1) == e Ri2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ri1 x1 x2) ==
            op Ri2 (hom x1) (hom x2)
    record RightInverseRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightInverse A1)
      (Ri2 : RightInverse A2) :
      Set where
      constructor RightInverseRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-inv :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (inv Ri1 x1) (inv Ri2 y1)
        interp-e :
          interp (e Ri1) (e Ri2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ri1 x1 x2)
            (op Ri2 y1 y2)
    data RightInverseLTerm
      : Set where
      invL :
        RightInverseLTerm ->
        RightInverseLTerm
      eL : RightInverseLTerm
      opL :
        RightInverseLTerm ->
        RightInverseLTerm ->
        RightInverseLTerm
    data ClRightInverseClTerm
      (A : Set) : Set where
      sing :
        A -> ClRightInverseClTerm A
      invCl :
        ClRightInverseClTerm A ->
        ClRightInverseClTerm A
      eCl : ClRightInverseClTerm A
      opCl :
        ClRightInverseClTerm A ->
        ClRightInverseClTerm A ->
        ClRightInverseClTerm A
    data OpRightInverseOLTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpRightInverseOLTerm n
      invOL :
        OpRightInverseOLTerm n ->
        OpRightInverseOLTerm n
      eOL : OpRightInverseOLTerm n
      opOL :
        OpRightInverseOLTerm n ->
        OpRightInverseOLTerm n ->
        OpRightInverseOLTerm n
    data OpRightInverseOL2Term2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpRightInverseOL2Term2 n A
      sing2 :
        A -> OpRightInverseOL2Term2 n A
      invOL2 :
        OpRightInverseOL2Term2 n A ->
        OpRightInverseOL2Term2 n A
      eOL2 :
        OpRightInverseOL2Term2 n A
      opOL2 :
        OpRightInverseOL2Term2 n A ->
        OpRightInverseOL2Term2 n A ->
        OpRightInverseOL2Term2 n A
  
  module RightInverseMagma where
    record RightInverseMagma
      (A : Set) : Set where
      constructor RightInverseMagmaC
      field
        rinv : A -> A -> A
    record RightInverseMagmaSig
      (AS : Set) : Set where
      constructor RightInverseMagmaSigSigC
      field
        rinvS : AS -> AS -> AS
    record RightInverseMagmaProd
      (AP : Set) : Set where
      constructor RightInverseMagmaProdC
      field
        rinvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record RightInverseMagmaHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightInverseMagma A1)
      (Ri2 : RightInverseMagma A2) :
      Set where
      constructor RightInverseMagmaHomC
      field
        hom : A1 -> A2
        pres-rinv :
          (x1 : A1) (x2 : A1) ->
          hom (rinv Ri1 x1 x2) ==
            rinv Ri2 (hom x1) (hom x2)
    record RightInverseMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightInverseMagma A1)
      (Ri2 : RightInverseMagma A2) :
      Set where
      constructor RightInverseMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-rinv :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (rinv Ri1 x1 x2)
            (rinv Ri2 y1 y2)
    data RightInverseMagmaTerm
      : Set where
      rinvL :
        RightInverseMagmaTerm ->
        RightInverseMagmaTerm ->
        RightInverseMagmaTerm
    data ClRightInverseMagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClRightInverseMagmaTerm A
      rinvCl :
        ClRightInverseMagmaTerm A ->
        ClRightInverseMagmaTerm A ->
        ClRightInverseMagmaTerm A
    data OpRightInverseMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpRightInverseMagmaTerm n
      rinvOL :
        OpRightInverseMagmaTerm n ->
        OpRightInverseMagmaTerm n ->
        OpRightInverseMagmaTerm n
    data OpRightInverseMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpRightInverseMagmaTerm2 n A
      sing2 :
        A ->
        OpRightInverseMagmaTerm2 n A
      rinvOL2 :
        OpRightInverseMagmaTerm2 n A ->
        OpRightInverseMagmaTerm2 n A ->
        OpRightInverseMagmaTerm2 n A
  
  module RightMonoid where
    record RightMonoid
      (A : Set) : Set where
      constructor RightMonoidC
      field
        op : A -> A -> A
        e : A
        runit_e : (x : A) -> op x e == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
    record RightMonoidSig
      (AS : Set) : Set where
      constructor RightMonoidSigSigC
      field
        opS : AS -> AS -> AS
        eS : AS
    record RightMonoidProd
      (AP : Set) : Set where
      constructor RightMonoidProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
    record RightMonoidHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightMonoid A1)
      (Ri2 : RightMonoid A2) :
      Set where
      constructor RightMonoidHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ri1 x1 x2) ==
            op Ri2 (hom x1) (hom x2)
        pres-e : hom (e Ri1) == e Ri2
    record RightMonoidRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightMonoid A1)
      (Ri2 : RightMonoid A2) :
      Set where
      constructor RightMonoidRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ri1 x1 x2)
            (op Ri2 y1 y2)
        interp-e :
          interp (e Ri1) (e Ri2)
    data RightMonoidTerm : Set where
      opL :
        RightMonoidTerm ->
        RightMonoidTerm ->
        RightMonoidTerm
      eL : RightMonoidTerm
    data ClRightMonoidTerm
      (A : Set) : Set where
      sing :
        A -> ClRightMonoidTerm A
      opCl :
        ClRightMonoidTerm A ->
        ClRightMonoidTerm A ->
        ClRightMonoidTerm A
      eCl : ClRightMonoidTerm A
    data OpRightMonoidTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpRightMonoidTerm n
      opOL :
        OpRightMonoidTerm n ->
        OpRightMonoidTerm n ->
        OpRightMonoidTerm n
      eOL : OpRightMonoidTerm n
    data OpRightMonoidTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpRightMonoidTerm2 n A
      sing2 :
        A -> OpRightMonoidTerm2 n A
      opOL2 :
        OpRightMonoidTerm2 n A ->
        OpRightMonoidTerm2 n A ->
        OpRightMonoidTerm2 n A
      eOL2 : OpRightMonoidTerm2 n A
  
  module RightPreSemiring where
    record RightPreSemiring
      (A : Set) : Set where
      constructor RightPreSemiringC
      field
        * : A -> A -> A
        + : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
    record RightPreSemiringSig
      (AS : Set) : Set where
      constructor RightPreSemiringSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record RightPreSemiringProd
      (AP : Set) : Set where
      constructor RightPreSemiringProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
    record RightPreSemiringHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightPreSemiring A1)
      (Ri2 : RightPreSemiring A2) :
      Set where
      constructor RightPreSemiringHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Ri1 x1 x2) ==
            * Ri2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ri1 x1 x2) ==
            + Ri2 (hom x1) (hom x2)
    record RightPreSemiringRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightPreSemiring A1)
      (Ri2 : RightPreSemiring A2) :
      Set where
      constructor RightPreSemiringRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Ri1 x1 x2)
            (* Ri2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ri1 x1 x2)
            (+ Ri2 y1 y2)
    data RightPreSemiringTerm
      : Set where
      *L :
        RightPreSemiringTerm ->
        RightPreSemiringTerm ->
        RightPreSemiringTerm
      +L :
        RightPreSemiringTerm ->
        RightPreSemiringTerm ->
        RightPreSemiringTerm
    data ClRightPreSemiringTerm
      (A : Set) : Set where
      sing :
        A -> ClRightPreSemiringTerm A
      *Cl :
        ClRightPreSemiringTerm A ->
        ClRightPreSemiringTerm A ->
        ClRightPreSemiringTerm A
      +Cl :
        ClRightPreSemiringTerm A ->
        ClRightPreSemiringTerm A ->
        ClRightPreSemiringTerm A
    data OpRightPreSemiringTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpRightPreSemiringTerm n
      *OL :
        OpRightPreSemiringTerm n ->
        OpRightPreSemiringTerm n ->
        OpRightPreSemiringTerm n
      +OL :
        OpRightPreSemiringTerm n ->
        OpRightPreSemiringTerm n ->
        OpRightPreSemiringTerm n
    data OpRightPreSemiringTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpRightPreSemiringTerm2 n A
      sing2 :
        A -> OpRightPreSemiringTerm2 n A
      *OL2 :
        OpRightPreSemiringTerm2 n A ->
        OpRightPreSemiringTerm2 n A ->
        OpRightPreSemiringTerm2 n A
      +OL2 :
        OpRightPreSemiringTerm2 n A ->
        OpRightPreSemiringTerm2 n A ->
        OpRightPreSemiringTerm2 n A
  
  module RightQuasiGroup where
    record RightQuasiGroup
      (A : Set) : Set where
      constructor RightQuasiGroupC
      field
        op : A -> A -> A
        rinv : A -> A -> A
        rightCancel :
          (x : A) (y : A) ->
          op (rinv y x) x == y
        rightCancelOp :
          (x : A) (y : A) ->
          rinv (op y x) x == y
    record RightQuasiGroupSig
      (AS : Set) : Set where
      constructor RightQuasiGroupSigSigC
      field
        opS : AS -> AS -> AS
        rinvS : AS -> AS -> AS
    record RightQuasiGroupProd
      (AP : Set) : Set where
      constructor RightQuasiGroupProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rinvP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightCancelP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP (rinvP yP xP) xP == yP
        rightCancelOpP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          rinvP (opP yP xP) xP == yP
    record RightQuasiGroupHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightQuasiGroup A1)
      (Ri2 : RightQuasiGroup A2) :
      Set where
      constructor RightQuasiGroupHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ri1 x1 x2) ==
            op Ri2 (hom x1) (hom x2)
        pres-rinv :
          (x1 : A1) (x2 : A1) ->
          hom (rinv Ri1 x1 x2) ==
            rinv Ri2 (hom x1) (hom x2)
    record RightQuasiGroupRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightQuasiGroup A1)
      (Ri2 : RightQuasiGroup A2) :
      Set where
      constructor RightQuasiGroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ri1 x1 x2)
            (op Ri2 y1 y2)
        interp-rinv :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (rinv Ri1 x1 x2)
            (rinv Ri2 y1 y2)
    data RightQuasiGroupTerm
      : Set where
      opL :
        RightQuasiGroupTerm ->
        RightQuasiGroupTerm ->
        RightQuasiGroupTerm
      rinvL :
        RightQuasiGroupTerm ->
        RightQuasiGroupTerm ->
        RightQuasiGroupTerm
    data ClRightQuasiGroupTerm
      (A : Set) : Set where
      sing :
        A -> ClRightQuasiGroupTerm A
      opCl :
        ClRightQuasiGroupTerm A ->
        ClRightQuasiGroupTerm A ->
        ClRightQuasiGroupTerm A
      rinvCl :
        ClRightQuasiGroupTerm A ->
        ClRightQuasiGroupTerm A ->
        ClRightQuasiGroupTerm A
    data OpRightQuasiGroupTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpRightQuasiGroupTerm n
      opOL :
        OpRightQuasiGroupTerm n ->
        OpRightQuasiGroupTerm n ->
        OpRightQuasiGroupTerm n
      rinvOL :
        OpRightQuasiGroupTerm n ->
        OpRightQuasiGroupTerm n ->
        OpRightQuasiGroupTerm n
    data OpRightQuasiGroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpRightQuasiGroupTerm2 n A
      sing2 :
        A -> OpRightQuasiGroupTerm2 n A
      opOL2 :
        OpRightQuasiGroupTerm2 n A ->
        OpRightQuasiGroupTerm2 n A ->
        OpRightQuasiGroupTerm2 n A
      rinvOL2 :
        OpRightQuasiGroupTerm2 n A ->
        OpRightQuasiGroupTerm2 n A ->
        OpRightQuasiGroupTerm2 n A
  
  module RightRack where
    record RightRack
      (A : Set) : Set where
      constructor RightRackC
      field
        <| : A -> A -> A
        |> : A -> A -> A
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
    record RightRackSig
      (AS : Set) : Set where
      constructor RightRackSigSigC
      field
        <|S : AS -> AS -> AS
        |>S : AS -> AS -> AS
    record RightRackProd
      (AP : Set) : Set where
      constructor RightRackProdC
      field
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          <|P (<|P yP zP) xP ==
            <|P (<|P yP xP) (<|P zP xP)
    record RightRackHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightRack A1)
      (Ri2 : RightRack A2) : Set where
      constructor RightRackHomC
      field
        hom : A1 -> A2
        pres-<| :
          (x1 : A1) (x2 : A1) ->
          hom (<| Ri1 x1 x2) ==
            <| Ri2 (hom x1) (hom x2)
        pres-|> :
          (x1 : A1) (x2 : A1) ->
          hom (|> Ri1 x1 x2) ==
            |> Ri2 (hom x1) (hom x2)
    record RightRackRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightRack A1)
      (Ri2 : RightRack A2) : Set where
      constructor RightRackRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-<| :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (<| Ri1 x1 x2)
            (<| Ri2 y1 y2)
        interp-|> :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (|> Ri1 x1 x2)
            (|> Ri2 y1 y2)
    data RightRackTerm : Set where
      <|L :
        RightRackTerm ->
        RightRackTerm -> RightRackTerm
      |>L :
        RightRackTerm ->
        RightRackTerm -> RightRackTerm
    data ClRightRackTerm
      (A : Set) : Set where
      sing : A -> ClRightRackTerm A
      <|Cl :
        ClRightRackTerm A ->
        ClRightRackTerm A ->
        ClRightRackTerm A
      |>Cl :
        ClRightRackTerm A ->
        ClRightRackTerm A ->
        ClRightRackTerm A
    data OpRightRackTerm
      (n : Nat) : Set where
      v : Fin n -> OpRightRackTerm n
      <|OL :
        OpRightRackTerm n ->
        OpRightRackTerm n ->
        OpRightRackTerm n
      |>OL :
        OpRightRackTerm n ->
        OpRightRackTerm n ->
        OpRightRackTerm n
    data OpRightRackTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpRightRackTerm2 n A
      sing2 :
        A -> OpRightRackTerm2 n A
      <|OL2 :
        OpRightRackTerm2 n A ->
        OpRightRackTerm2 n A ->
        OpRightRackTerm2 n A
      |>OL2 :
        OpRightRackTerm2 n A ->
        OpRightRackTerm2 n A ->
        OpRightRackTerm2 n A
  
  module RightRingoid where
    record RightRingoid
      (A : Set) : Set where
      constructor RightRingoidC
      field
        * : A -> A -> A
        + : A -> A -> A
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record RightRingoidSig
      (AS : Set) : Set where
      constructor RightRingoidSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record RightRingoidProd
      (AP : Set) : Set where
      constructor RightRingoidProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record RightRingoidHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightRingoid A1)
      (Ri2 : RightRingoid A2) :
      Set where
      constructor RightRingoidHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Ri1 x1 x2) ==
            * Ri2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ri1 x1 x2) ==
            + Ri2 (hom x1) (hom x2)
    record RightRingoidRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightRingoid A1)
      (Ri2 : RightRingoid A2) :
      Set where
      constructor RightRingoidRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Ri1 x1 x2)
            (* Ri2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ri1 x1 x2)
            (+ Ri2 y1 y2)
    data RightRingoidTerm
      : Set where
      *L :
        RightRingoidTerm ->
        RightRingoidTerm ->
        RightRingoidTerm
      +L :
        RightRingoidTerm ->
        RightRingoidTerm ->
        RightRingoidTerm
    data ClRightRingoidTerm
      (A : Set) : Set where
      sing :
        A -> ClRightRingoidTerm A
      *Cl :
        ClRightRingoidTerm A ->
        ClRightRingoidTerm A ->
        ClRightRingoidTerm A
      +Cl :
        ClRightRingoidTerm A ->
        ClRightRingoidTerm A ->
        ClRightRingoidTerm A
    data OpRightRingoidTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpRightRingoidTerm n
      *OL :
        OpRightRingoidTerm n ->
        OpRightRingoidTerm n ->
        OpRightRingoidTerm n
      +OL :
        OpRightRingoidTerm n ->
        OpRightRingoidTerm n ->
        OpRightRingoidTerm n
    data OpRightRingoidTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpRightRingoidTerm2 n A
      sing2 :
        A -> OpRightRingoidTerm2 n A
      *OL2 :
        OpRightRingoidTerm2 n A ->
        OpRightRingoidTerm2 n A ->
        OpRightRingoidTerm2 n A
      +OL2 :
        OpRightRingoidTerm2 n A ->
        OpRightRingoidTerm2 n A ->
        OpRightRingoidTerm2 n A
  
  module RightSelfInverse where
    record RightSelfInverse
      (A : Set) : Set where
      constructor RightSelfInverseC
      field
        |> : A -> A -> A
        rightSelfInverse_|> :
          (x : A) (y : A) ->
          |> (|> x y) y == x
    record RightSelfInverseSig
      (AS : Set) : Set where
      constructor RightSelfInverseSigSigC
      field
        |>S : AS -> AS -> AS
    record RightSelfInverseProd
      (AP : Set) : Set where
      constructor RightSelfInverseProdC
      field
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightSelfInverse_|>P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          |>P (|>P xP yP) yP == xP
    record RightSelfInverseHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightSelfInverse A1)
      (Ri2 : RightSelfInverse A2) :
      Set where
      constructor RightSelfInverseHomC
      field
        hom : A1 -> A2
        pres-|> :
          (x1 : A1) (x2 : A1) ->
          hom (|> Ri1 x1 x2) ==
            |> Ri2 (hom x1) (hom x2)
    record RightSelfInverseRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightSelfInverse A1)
      (Ri2 : RightSelfInverse A2) :
      Set where
      constructor RightSelfInverseRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-|> :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (|> Ri1 x1 x2)
            (|> Ri2 y1 y2)
    data RightSelfInverseTerm
      : Set where
      |>L :
        RightSelfInverseTerm ->
        RightSelfInverseTerm ->
        RightSelfInverseTerm
    data ClRightSelfInverseTerm
      (A : Set) : Set where
      sing :
        A -> ClRightSelfInverseTerm A
      |>Cl :
        ClRightSelfInverseTerm A ->
        ClRightSelfInverseTerm A ->
        ClRightSelfInverseTerm A
    data OpRightSelfInverseTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpRightSelfInverseTerm n
      |>OL :
        OpRightSelfInverseTerm n ->
        OpRightSelfInverseTerm n ->
        OpRightSelfInverseTerm n
    data OpRightSelfInverseTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpRightSelfInverseTerm2 n A
      sing2 :
        A -> OpRightSelfInverseTerm2 n A
      |>OL2 :
        OpRightSelfInverseTerm2 n A ->
        OpRightSelfInverseTerm2 n A ->
        OpRightSelfInverseTerm2 n A
  
  module RightShelf where
    record RightShelf
      (A : Set) : Set where
      constructor RightShelfC
      field
        <| : A -> A -> A
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
    record RightShelfSig
      (AS : Set) : Set where
      constructor RightShelfSigSigC
      field
        <|S : AS -> AS -> AS
    record RightShelfProd
      (AP : Set) : Set where
      constructor RightShelfProdC
      field
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          <|P (<|P yP zP) xP ==
            <|P (<|P yP xP) (<|P zP xP)
    record RightShelfHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightShelf A1)
      (Ri2 : RightShelf A2) :
      Set where
      constructor RightShelfHomC
      field
        hom : A1 -> A2
        pres-<| :
          (x1 : A1) (x2 : A1) ->
          hom (<| Ri1 x1 x2) ==
            <| Ri2 (hom x1) (hom x2)
    record RightShelfRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightShelf A1)
      (Ri2 : RightShelf A2) :
      Set where
      constructor RightShelfRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-<| :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (<| Ri1 x1 x2)
            (<| Ri2 y1 y2)
    data RightShelfTerm : Set where
      <|L :
        RightShelfTerm ->
        RightShelfTerm -> RightShelfTerm
    data ClRightShelfTerm
      (A : Set) : Set where
      sing : A -> ClRightShelfTerm A
      <|Cl :
        ClRightShelfTerm A ->
        ClRightShelfTerm A ->
        ClRightShelfTerm A
    data OpRightShelfTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpRightShelfTerm n
      <|OL :
        OpRightShelfTerm n ->
        OpRightShelfTerm n ->
        OpRightShelfTerm n
    data OpRightShelfTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpRightShelfTerm2 n A
      sing2 :
        A -> OpRightShelfTerm2 n A
      <|OL2 :
        OpRightShelfTerm2 n A ->
        OpRightShelfTerm2 n A ->
        OpRightShelfTerm2 n A
  
  module RightShelfSig where
    record RightShelfSig
      (A : Set) : Set where
      constructor RightShelfSigC
      field
        <| : A -> A -> A
    record RightShelfSigSig
      (AS : Set) : Set where
      constructor RightShelfSigSigSigC
      field
        <|S : AS -> AS -> AS
    record RightShelfSigProd
      (AP : Set) : Set where
      constructor RightShelfSigProdC
      field
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record RightShelfSigHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightShelfSig A1)
      (Ri2 : RightShelfSig A2) :
      Set where
      constructor RightShelfSigHomC
      field
        hom : A1 -> A2
        pres-<| :
          (x1 : A1) (x2 : A1) ->
          hom (<| Ri1 x1 x2) ==
            <| Ri2 (hom x1) (hom x2)
    record RightShelfSigRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightShelfSig A1)
      (Ri2 : RightShelfSig A2) :
      Set where
      constructor RightShelfSigRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-<| :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (<| Ri1 x1 x2)
            (<| Ri2 y1 y2)
    data RightShelfSigTerm
      : Set where
      <|L :
        RightShelfSigTerm ->
        RightShelfSigTerm ->
        RightShelfSigTerm
    data ClRightShelfSigTerm
      (A : Set) : Set where
      sing :
        A -> ClRightShelfSigTerm A
      <|Cl :
        ClRightShelfSigTerm A ->
        ClRightShelfSigTerm A ->
        ClRightShelfSigTerm A
    data OpRightShelfSigTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpRightShelfSigTerm n
      <|OL :
        OpRightShelfSigTerm n ->
        OpRightShelfSigTerm n ->
        OpRightShelfSigTerm n
    data OpRightShelfSigTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpRightShelfSigTerm2 n A
      sing2 :
        A -> OpRightShelfSigTerm2 n A
      <|OL2 :
        OpRightShelfSigTerm2 n A ->
        OpRightShelfSigTerm2 n A ->
        OpRightShelfSigTerm2 n A
  
  module RightSpindle where
    record RightSpindle
      (A : Set) : Set where
      constructor RightSpindleC
      field
        <| : A -> A -> A
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
        idempotent_<| :
          (x : A) -> <| x x == x
    record RightSpindleSig
      (AS : Set) : Set where
      constructor RightSpindleSigSigC
      field
        <|S : AS -> AS -> AS
    record RightSpindleProd
      (AP : Set) : Set where
      constructor RightSpindleProdC
      field
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          <|P (<|P yP zP) xP ==
            <|P (<|P yP xP) (<|P zP xP)
        idempotent_<|P :
          (xP : Prod AP AP) ->
          <|P xP xP == xP
    record RightSpindleHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightSpindle A1)
      (Ri2 : RightSpindle A2) :
      Set where
      constructor RightSpindleHomC
      field
        hom : A1 -> A2
        pres-<| :
          (x1 : A1) (x2 : A1) ->
          hom (<| Ri1 x1 x2) ==
            <| Ri2 (hom x1) (hom x2)
    record RightSpindleRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightSpindle A1)
      (Ri2 : RightSpindle A2) :
      Set where
      constructor RightSpindleRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-<| :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (<| Ri1 x1 x2)
            (<| Ri2 y1 y2)
    data RightSpindleTerm
      : Set where
      <|L :
        RightSpindleTerm ->
        RightSpindleTerm ->
        RightSpindleTerm
    data ClRightSpindleTerm
      (A : Set) : Set where
      sing :
        A -> ClRightSpindleTerm A
      <|Cl :
        ClRightSpindleTerm A ->
        ClRightSpindleTerm A ->
        ClRightSpindleTerm A
    data OpRightSpindleTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpRightSpindleTerm n
      <|OL :
        OpRightSpindleTerm n ->
        OpRightSpindleTerm n ->
        OpRightSpindleTerm n
    data OpRightSpindleTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpRightSpindleTerm2 n A
      sing2 :
        A -> OpRightSpindleTerm2 n A
      <|OL2 :
        OpRightSpindleTerm2 n A ->
        OpRightSpindleTerm2 n A ->
        OpRightSpindleTerm2 n A
  
  module RightSpindle_Shelf where
    record RightSpindle_Shelf
      (A : Set) : Set where
      constructor RightSpindle_ShelfC
      field
        <| : A -> A -> A
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
        idempotent_<| :
          (x : A) -> <| x x == x
        |> : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
    record RightSpindle_ShelfSig
      (AS : Set) : Set where
      constructor RightSpindle_ShelfSigSigC
      field
        <|S : AS -> AS -> AS
        |>S : AS -> AS -> AS
    record RightSpindle_ShelfProd
      (AP : Set) : Set where
      constructor RightSpindle_ShelfProdC
      field
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          <|P (<|P yP zP) xP ==
            <|P (<|P yP xP) (<|P zP xP)
        idempotent_<|P :
          (xP : Prod AP AP) ->
          <|P xP xP == xP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          |>P xP (|>P yP zP) ==
            |>P (|>P xP yP) (|>P xP zP)
    record RightSpindle_ShelfHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightSpindle_Shelf A1)
      (Ri2 : RightSpindle_Shelf A2) :
      Set where
      constructor RightSpindle_ShelfHomC
      field
        hom : A1 -> A2
        pres-<| :
          (x1 : A1) (x2 : A1) ->
          hom (<| Ri1 x1 x2) ==
            <| Ri2 (hom x1) (hom x2)
        pres-|> :
          (x1 : A1) (x2 : A1) ->
          hom (|> Ri1 x1 x2) ==
            |> Ri2 (hom x1) (hom x2)
    record RightSpindle_ShelfRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightSpindle_Shelf A1)
      (Ri2 : RightSpindle_Shelf A2) :
      Set where
      constructor RightSpindle_ShelfRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-<| :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (<| Ri1 x1 x2)
            (<| Ri2 y1 y2)
        interp-|> :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (|> Ri1 x1 x2)
            (|> Ri2 y1 y2)
    data RightSpindle_ShelfTerm
      : Set where
      <|L :
        RightSpindle_ShelfTerm ->
        RightSpindle_ShelfTerm ->
        RightSpindle_ShelfTerm
      |>L :
        RightSpindle_ShelfTerm ->
        RightSpindle_ShelfTerm ->
        RightSpindle_ShelfTerm
    data ClRightSpindle_ShelfTerm
      (A : Set) : Set where
      sing :
        A -> ClRightSpindle_ShelfTerm A
      <|Cl :
        ClRightSpindle_ShelfTerm A ->
        ClRightSpindle_ShelfTerm A ->
        ClRightSpindle_ShelfTerm A
      |>Cl :
        ClRightSpindle_ShelfTerm A ->
        ClRightSpindle_ShelfTerm A ->
        ClRightSpindle_ShelfTerm A
    data OpRightSpindle_ShelfTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpRightSpindle_ShelfTerm n
      <|OL :
        OpRightSpindle_ShelfTerm n ->
        OpRightSpindle_ShelfTerm n ->
        OpRightSpindle_ShelfTerm n
      |>OL :
        OpRightSpindle_ShelfTerm n ->
        OpRightSpindle_ShelfTerm n ->
        OpRightSpindle_ShelfTerm n
    data OpRightSpindle_ShelfTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpRightSpindle_ShelfTerm2 n A
      sing2 :
        A ->
        OpRightSpindle_ShelfTerm2 n A
      <|OL2 :
        OpRightSpindle_ShelfTerm2 n A ->
        OpRightSpindle_ShelfTerm2 n A ->
        OpRightSpindle_ShelfTerm2 n A
      |>OL2 :
        OpRightSpindle_ShelfTerm2 n A ->
        OpRightSpindle_ShelfTerm2 n A ->
        OpRightSpindle_ShelfTerm2 n A
  
  module RightSpindle_ShelfSig where
    record RightSpindle_ShelfSig
      (A : Set) : Set where
      constructor RightSpindle_ShelfSigC
      field
        <| : A -> A -> A
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
        idempotent_<| :
          (x : A) -> <| x x == x
        |> : A -> A -> A
    record RightSpindle_ShelfSigSig
      (AS : Set) : Set where
      constructor RightSpindle_ShelfSigSigSigC
      field
        <|S : AS -> AS -> AS
        |>S : AS -> AS -> AS
    record RightSpindle_ShelfSigProd
      (AP : Set) : Set where
      constructor RightSpindle_ShelfSigProdC
      field
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          <|P (<|P yP zP) xP ==
            <|P (<|P yP xP) (<|P zP xP)
        idempotent_<|P :
          (xP : Prod AP AP) ->
          <|P xP xP == xP
    record RightSpindle_ShelfSigHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightSpindle_ShelfSig A1)
      (Ri2 : RightSpindle_ShelfSig
         A2) : Set where
      constructor RightSpindle_ShelfSigHomC
      field
        hom : A1 -> A2
        pres-<| :
          (x1 : A1) (x2 : A1) ->
          hom (<| Ri1 x1 x2) ==
            <| Ri2 (hom x1) (hom x2)
        pres-|> :
          (x1 : A1) (x2 : A1) ->
          hom (|> Ri1 x1 x2) ==
            |> Ri2 (hom x1) (hom x2)
    record RightSpindle_ShelfSigRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightSpindle_ShelfSig A1)
      (Ri2 : RightSpindle_ShelfSig
         A2) : Set where
      constructor RightSpindle_ShelfSigRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-<| :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (<| Ri1 x1 x2)
            (<| Ri2 y1 y2)
        interp-|> :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (|> Ri1 x1 x2)
            (|> Ri2 y1 y2)
    data RightSpindle_ShelfSigTerm
      : Set where
      <|L :
        RightSpindle_ShelfSigTerm ->
        RightSpindle_ShelfSigTerm ->
        RightSpindle_ShelfSigTerm
      |>L :
        RightSpindle_ShelfSigTerm ->
        RightSpindle_ShelfSigTerm ->
        RightSpindle_ShelfSigTerm
    data ClRightSpindle_ShelfSigTerm
      (A : Set) : Set where
      sing :
        A ->
        ClRightSpindle_ShelfSigTerm A
      <|Cl :
        ClRightSpindle_ShelfSigTerm A ->
        ClRightSpindle_ShelfSigTerm A ->
        ClRightSpindle_ShelfSigTerm A
      |>Cl :
        ClRightSpindle_ShelfSigTerm A ->
        ClRightSpindle_ShelfSigTerm A ->
        ClRightSpindle_ShelfSigTerm A
    data OpRightSpindle_ShelfSigTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpRightSpindle_ShelfSigTerm n
      <|OL :
        OpRightSpindle_ShelfSigTerm n ->
        OpRightSpindle_ShelfSigTerm n ->
        OpRightSpindle_ShelfSigTerm n
      |>OL :
        OpRightSpindle_ShelfSigTerm n ->
        OpRightSpindle_ShelfSigTerm n ->
        OpRightSpindle_ShelfSigTerm n
    data OpRightSpindle_ShelfSigTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpRightSpindle_ShelfSigTerm2 n A
      sing2 :
        A ->
        OpRightSpindle_ShelfSigTerm2 n A
      <|OL2 :
        OpRightSpindle_ShelfSigTerm2 n
          A ->
        OpRightSpindle_ShelfSigTerm2 n
          A ->
        OpRightSpindle_ShelfSigTerm2 n A
      |>OL2 :
        OpRightSpindle_ShelfSigTerm2 n
          A ->
        OpRightSpindle_ShelfSigTerm2 n
          A ->
        OpRightSpindle_ShelfSigTerm2 n A
  
  module RightUnital where
    record RightUnital
      (A : Set) : Set where
      constructor RightUnitalC
      field
        e : A
        op : A -> A -> A
        runit_e : (x : A) -> op x e == x
    record RightUnitalSig
      (AS : Set) : Set where
      constructor RightUnitalSigSigC
      field
        eS : AS
        opS : AS -> AS -> AS
    record RightUnitalProd
      (AP : Set) : Set where
      constructor RightUnitalProdC
      field
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
    record RightUnitalHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightUnital A1)
      (Ri2 : RightUnital A2) :
      Set where
      constructor RightUnitalHomC
      field
        hom : A1 -> A2
        pres-e : hom (e Ri1) == e Ri2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ri1 x1 x2) ==
            op Ri2 (hom x1) (hom x2)
    record RightUnitalRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightUnital A1)
      (Ri2 : RightUnital A2) :
      Set where
      constructor RightUnitalRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-e :
          interp (e Ri1) (e Ri2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ri1 x1 x2)
            (op Ri2 y1 y2)
    data RightUnitalTerm : Set where
      eL : RightUnitalTerm
      opL :
        RightUnitalTerm ->
        RightUnitalTerm ->
        RightUnitalTerm
    data ClRightUnitalTerm
      (A : Set) : Set where
      sing :
        A -> ClRightUnitalTerm A
      eCl : ClRightUnitalTerm A
      opCl :
        ClRightUnitalTerm A ->
        ClRightUnitalTerm A ->
        ClRightUnitalTerm A
    data OpRightUnitalTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpRightUnitalTerm n
      eOL : OpRightUnitalTerm n
      opOL :
        OpRightUnitalTerm n ->
        OpRightUnitalTerm n ->
        OpRightUnitalTerm n
    data OpRightUnitalTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpRightUnitalTerm2 n A
      sing2 :
        A -> OpRightUnitalTerm2 n A
      eOL2 : OpRightUnitalTerm2 n A
      opOL2 :
        OpRightUnitalTerm2 n A ->
        OpRightUnitalTerm2 n A ->
        OpRightUnitalTerm2 n A
  
  module RightZero where
    record RightZero
      (A : Set) : Set where
      constructor RightZeroC
      field
        e : A
        op : A -> A -> A
        rightZero_op_e :
          (x : A) -> op x e == e
    record RightZeroSig
      (AS : Set) : Set where
      constructor RightZeroSigSigC
      field
        eS : AS
        opS : AS -> AS -> AS
    record RightZeroProd
      (AP : Set) : Set where
      constructor RightZeroProdC
      field
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        rightZero_op_eP :
          (xP : Prod AP AP) ->
          opP xP eP == eP
    record RightZeroHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RightZero A1)
      (Ri2 : RightZero A2) : Set where
      constructor RightZeroHomC
      field
        hom : A1 -> A2
        pres-e : hom (e Ri1) == e Ri2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ri1 x1 x2) ==
            op Ri2 (hom x1) (hom x2)
    record RightZeroRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RightZero A1)
      (Ri2 : RightZero A2) : Set where
      constructor RightZeroRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-e :
          interp (e Ri1) (e Ri2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ri1 x1 x2)
            (op Ri2 y1 y2)
    data RightZeroTerm : Set where
      eL : RightZeroTerm
      opL :
        RightZeroTerm ->
        RightZeroTerm -> RightZeroTerm
    data ClRightZeroTerm
      (A : Set) : Set where
      sing : A -> ClRightZeroTerm A
      eCl : ClRightZeroTerm A
      opCl :
        ClRightZeroTerm A ->
        ClRightZeroTerm A ->
        ClRightZeroTerm A
    data OpRightZeroTerm
      (n : Nat) : Set where
      v : Fin n -> OpRightZeroTerm n
      eOL : OpRightZeroTerm n
      opOL :
        OpRightZeroTerm n ->
        OpRightZeroTerm n ->
        OpRightZeroTerm n
    data OpRightZeroTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpRightZeroTerm2 n A
      sing2 :
        A -> OpRightZeroTerm2 n A
      eOL2 : OpRightZeroTerm2 n A
      opOL2 :
        OpRightZeroTerm2 n A ->
        OpRightZeroTerm2 n A ->
        OpRightZeroTerm2 n A
  
  module Ring where
    record Ring
      (A : Set) : Set where
      constructor RingC
      field
        * : A -> A -> A
        + : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
    record RingSig
      (AS : Set) : Set where
      constructor RingSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        0S : AS
        negS : AS -> AS
        1S : AS
    record RingProd
      (AP : Set) : Set where
      constructor RingProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        negP : Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        leftInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P xP (negP xP) == 0P
        rightInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P (negP xP) xP == 0P
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        leftZero_op_0P :
          (xP : Prod AP AP) ->
          *P 0P xP == 0P
        rightZero_op_0P :
          (xP : Prod AP AP) ->
          *P xP 0P == 0P
    record RingHom
      (A1 : Set) (A2 : Set)
      (Ri1 : Ring A1)
      (Ri2 : Ring A2) : Set where
      constructor RingHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Ri1 x1 x2) ==
            * Ri2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ri1 x1 x2) ==
            + Ri2 (hom x1) (hom x2)
        pres-0 : hom (0 Ri1) == 0 Ri2
        pres-neg :
          (x1 : A1) ->
          hom (neg Ri1 x1) ==
            neg Ri2 (hom x1)
        pres-1 : hom (1 Ri1) == 1 Ri2
    record RingRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : Ring A1)
      (Ri2 : Ring A2) : Set where
      constructor RingRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Ri1 x1 x2)
            (* Ri2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ri1 x1 x2)
            (+ Ri2 y1 y2)
        interp-0 :
          interp (0 Ri1) (0 Ri2)
        interp-neg :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (neg Ri1 x1) (neg Ri2 y1)
        interp-1 :
          interp (1 Ri1) (1 Ri2)
    data RingTerm : Set where
      *L :
        RingTerm -> RingTerm -> RingTerm
      +L :
        RingTerm -> RingTerm -> RingTerm
      0L : RingTerm
      negL : RingTerm -> RingTerm
      1L : RingTerm
    data ClRingTerm
      (A : Set) : Set where
      sing : A -> ClRingTerm A
      *Cl :
        ClRingTerm A ->
        ClRingTerm A -> ClRingTerm A
      +Cl :
        ClRingTerm A ->
        ClRingTerm A -> ClRingTerm A
      0Cl : ClRingTerm A
      negCl :
        ClRingTerm A -> ClRingTerm A
      1Cl : ClRingTerm A
    data OpRingTerm
      (n : Nat) : Set where
      v : Fin n -> OpRingTerm n
      *OL :
        OpRingTerm n ->
        OpRingTerm n -> OpRingTerm n
      +OL :
        OpRingTerm n ->
        OpRingTerm n -> OpRingTerm n
      0OL : OpRingTerm n
      negOL :
        OpRingTerm n -> OpRingTerm n
      1OL : OpRingTerm n
    data OpRingTerm2
      (n : Nat) (A : Set) : Set where
      v2 : Fin n -> OpRingTerm2 n A
      sing2 : A -> OpRingTerm2 n A
      *OL2 :
        OpRingTerm2 n A ->
        OpRingTerm2 n A ->
        OpRingTerm2 n A
      +OL2 :
        OpRingTerm2 n A ->
        OpRingTerm2 n A ->
        OpRingTerm2 n A
      0OL2 : OpRingTerm2 n A
      negOL2 :
        OpRingTerm2 n A ->
        OpRingTerm2 n A
      1OL2 : OpRingTerm2 n A
  
  module Ringoid where
    record Ringoid
      (A : Set) : Set where
      constructor RingoidC
      field
        * : A -> A -> A
        + : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record RingoidSig
      (AS : Set) : Set where
      constructor RingoidSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record RingoidProd
      (AP : Set) : Set where
      constructor RingoidProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record RingoidHom
      (A1 : Set) (A2 : Set)
      (Ri1 : Ringoid A1)
      (Ri2 : Ringoid A2) : Set where
      constructor RingoidHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Ri1 x1 x2) ==
            * Ri2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ri1 x1 x2) ==
            + Ri2 (hom x1) (hom x2)
    record RingoidRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : Ringoid A1)
      (Ri2 : Ringoid A2) : Set where
      constructor RingoidRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Ri1 x1 x2)
            (* Ri2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ri1 x1 x2)
            (+ Ri2 y1 y2)
    data RingoidTerm : Set where
      *L :
        RingoidTerm ->
        RingoidTerm -> RingoidTerm
      +L :
        RingoidTerm ->
        RingoidTerm -> RingoidTerm
    data ClRingoidTerm
      (A : Set) : Set where
      sing : A -> ClRingoidTerm A
      *Cl :
        ClRingoidTerm A ->
        ClRingoidTerm A ->
        ClRingoidTerm A
      +Cl :
        ClRingoidTerm A ->
        ClRingoidTerm A ->
        ClRingoidTerm A
    data OpRingoidTerm
      (n : Nat) : Set where
      v : Fin n -> OpRingoidTerm n
      *OL :
        OpRingoidTerm n ->
        OpRingoidTerm n ->
        OpRingoidTerm n
      +OL :
        OpRingoidTerm n ->
        OpRingoidTerm n ->
        OpRingoidTerm n
    data OpRingoidTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpRingoidTerm2 n A
      sing2 : A -> OpRingoidTerm2 n A
      *OL2 :
        OpRingoidTerm2 n A ->
        OpRingoidTerm2 n A ->
        OpRingoidTerm2 n A
      +OL2 :
        OpRingoidTerm2 n A ->
        OpRingoidTerm2 n A ->
        OpRingoidTerm2 n A
  
  module Ringoid01Sig where
    record Ringoid01Sig
      (A : Set) : Set where
      constructor Ringoid01SigC
      field
        * : A -> A -> A
        + : A -> A -> A
        0 : A
        1 : A
    record Ringoid01SigSig
      (AS : Set) : Set where
      constructor Ringoid01SigSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        0S : AS
        1S : AS
    record Ringoid01SigProd
      (AP : Set) : Set where
      constructor Ringoid01SigProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        1P : Prod AP AP
    record Ringoid01SigHom
      (A1 : Set) (A2 : Set)
      (Ri1 : Ringoid01Sig A1)
      (Ri2 : Ringoid01Sig A2) :
      Set where
      constructor Ringoid01SigHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Ri1 x1 x2) ==
            * Ri2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ri1 x1 x2) ==
            + Ri2 (hom x1) (hom x2)
        pres-0 : hom (0 Ri1) == 0 Ri2
        pres-1 : hom (1 Ri1) == 1 Ri2
    record Ringoid01SigRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : Ringoid01Sig A1)
      (Ri2 : Ringoid01Sig A2) :
      Set where
      constructor Ringoid01SigRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Ri1 x1 x2)
            (* Ri2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ri1 x1 x2)
            (+ Ri2 y1 y2)
        interp-0 :
          interp (0 Ri1) (0 Ri2)
        interp-1 :
          interp (1 Ri1) (1 Ri2)
    data Ringoid01SigTerm
      : Set where
      *L :
        Ringoid01SigTerm ->
        Ringoid01SigTerm ->
        Ringoid01SigTerm
      +L :
        Ringoid01SigTerm ->
        Ringoid01SigTerm ->
        Ringoid01SigTerm
      0L : Ringoid01SigTerm
      1L : Ringoid01SigTerm
    data ClRingoid01SigTerm
      (A : Set) : Set where
      sing :
        A -> ClRingoid01SigTerm A
      *Cl :
        ClRingoid01SigTerm A ->
        ClRingoid01SigTerm A ->
        ClRingoid01SigTerm A
      +Cl :
        ClRingoid01SigTerm A ->
        ClRingoid01SigTerm A ->
        ClRingoid01SigTerm A
      0Cl : ClRingoid01SigTerm A
      1Cl : ClRingoid01SigTerm A
    data OpRingoid01SigTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpRingoid01SigTerm n
      *OL :
        OpRingoid01SigTerm n ->
        OpRingoid01SigTerm n ->
        OpRingoid01SigTerm n
      +OL :
        OpRingoid01SigTerm n ->
        OpRingoid01SigTerm n ->
        OpRingoid01SigTerm n
      0OL : OpRingoid01SigTerm n
      1OL : OpRingoid01SigTerm n
    data OpRingoid01SigTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpRingoid01SigTerm2 n A
      sing2 :
        A -> OpRingoid01SigTerm2 n A
      *OL2 :
        OpRingoid01SigTerm2 n A ->
        OpRingoid01SigTerm2 n A ->
        OpRingoid01SigTerm2 n A
      +OL2 :
        OpRingoid01SigTerm2 n A ->
        OpRingoid01SigTerm2 n A ->
        OpRingoid01SigTerm2 n A
      0OL2 : OpRingoid01SigTerm2 n A
      1OL2 : OpRingoid01SigTerm2 n A
  
  module Ringoid0Sig where
    record Ringoid0Sig
      (A : Set) : Set where
      constructor Ringoid0SigC
      field
        0 : A
        + : A -> A -> A
        * : A -> A -> A
    record Ringoid0SigSig
      (AS : Set) : Set where
      constructor Ringoid0SigSigSigC
      field
        0S : AS
        +S : AS -> AS -> AS
        *S : AS -> AS -> AS
    record Ringoid0SigProd
      (AP : Set) : Set where
      constructor Ringoid0SigProdC
      field
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record Ringoid0SigHom
      (A1 : Set) (A2 : Set)
      (Ri1 : Ringoid0Sig A1)
      (Ri2 : Ringoid0Sig A2) :
      Set where
      constructor Ringoid0SigHomC
      field
        hom : A1 -> A2
        pres-0 : hom (0 Ri1) == 0 Ri2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ri1 x1 x2) ==
            + Ri2 (hom x1) (hom x2)
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Ri1 x1 x2) ==
            * Ri2 (hom x1) (hom x2)
    record Ringoid0SigRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : Ringoid0Sig A1)
      (Ri2 : Ringoid0Sig A2) :
      Set where
      constructor Ringoid0SigRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0 :
          interp (0 Ri1) (0 Ri2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ri1 x1 x2)
            (+ Ri2 y1 y2)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Ri1 x1 x2)
            (* Ri2 y1 y2)
    data Ringoid0SigTerm : Set where
      0L : Ringoid0SigTerm
      +L :
        Ringoid0SigTerm ->
        Ringoid0SigTerm ->
        Ringoid0SigTerm
      *L :
        Ringoid0SigTerm ->
        Ringoid0SigTerm ->
        Ringoid0SigTerm
    data ClRingoid0SigTerm
      (A : Set) : Set where
      sing :
        A -> ClRingoid0SigTerm A
      0Cl : ClRingoid0SigTerm A
      +Cl :
        ClRingoid0SigTerm A ->
        ClRingoid0SigTerm A ->
        ClRingoid0SigTerm A
      *Cl :
        ClRingoid0SigTerm A ->
        ClRingoid0SigTerm A ->
        ClRingoid0SigTerm A
    data OpRingoid0SigTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpRingoid0SigTerm n
      0OL : OpRingoid0SigTerm n
      +OL :
        OpRingoid0SigTerm n ->
        OpRingoid0SigTerm n ->
        OpRingoid0SigTerm n
      *OL :
        OpRingoid0SigTerm n ->
        OpRingoid0SigTerm n ->
        OpRingoid0SigTerm n
    data OpRingoid0SigTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpRingoid0SigTerm2 n A
      sing2 :
        A -> OpRingoid0SigTerm2 n A
      0OL2 : OpRingoid0SigTerm2 n A
      +OL2 :
        OpRingoid0SigTerm2 n A ->
        OpRingoid0SigTerm2 n A ->
        OpRingoid0SigTerm2 n A
      *OL2 :
        OpRingoid0SigTerm2 n A ->
        OpRingoid0SigTerm2 n A ->
        OpRingoid0SigTerm2 n A
  
  module Ringoid1 where
    record Ringoid1
      (A : Set) : Set where
      constructor Ringoid1C
      field
        * : A -> A -> A
        + : A -> A -> A
        1 : A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record Ringoid1Sig
      (AS : Set) : Set where
      constructor Ringoid1SigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        1S : AS
    record Ringoid1Prod
      (AP : Set) : Set where
      constructor Ringoid1ProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record Ringoid1Hom
      (A1 : Set) (A2 : Set)
      (Ri1 : Ringoid1 A1)
      (Ri2 : Ringoid1 A2) : Set where
      constructor Ringoid1HomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Ri1 x1 x2) ==
            * Ri2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ri1 x1 x2) ==
            + Ri2 (hom x1) (hom x2)
        pres-1 : hom (1 Ri1) == 1 Ri2
    record Ringoid1RelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : Ringoid1 A1)
      (Ri2 : Ringoid1 A2) : Set where
      constructor Ringoid1RelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Ri1 x1 x2)
            (* Ri2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ri1 x1 x2)
            (+ Ri2 y1 y2)
        interp-1 :
          interp (1 Ri1) (1 Ri2)
    data Ringoid1LTerm : Set where
      *L :
        Ringoid1LTerm ->
        Ringoid1LTerm -> Ringoid1LTerm
      +L :
        Ringoid1LTerm ->
        Ringoid1LTerm -> Ringoid1LTerm
      1L : Ringoid1LTerm
    data ClRingoid1ClTerm
      (A : Set) : Set where
      sing : A -> ClRingoid1ClTerm A
      *Cl :
        ClRingoid1ClTerm A ->
        ClRingoid1ClTerm A ->
        ClRingoid1ClTerm A
      +Cl :
        ClRingoid1ClTerm A ->
        ClRingoid1ClTerm A ->
        ClRingoid1ClTerm A
      1Cl : ClRingoid1ClTerm A
    data OpRingoid1OLTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpRingoid1OLTerm n
      *OL :
        OpRingoid1OLTerm n ->
        OpRingoid1OLTerm n ->
        OpRingoid1OLTerm n
      +OL :
        OpRingoid1OLTerm n ->
        OpRingoid1OLTerm n ->
        OpRingoid1OLTerm n
      1OL : OpRingoid1OLTerm n
    data OpRingoid1OL2Term2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpRingoid1OL2Term2 n A
      sing2 :
        A -> OpRingoid1OL2Term2 n A
      *OL2 :
        OpRingoid1OL2Term2 n A ->
        OpRingoid1OL2Term2 n A ->
        OpRingoid1OL2Term2 n A
      +OL2 :
        OpRingoid1OL2Term2 n A ->
        OpRingoid1OL2Term2 n A ->
        OpRingoid1OL2Term2 n A
      1OL2 : OpRingoid1OL2Term2 n A
  
  module Ringoid1Sig where
    record Ringoid1Sig
      (A : Set) : Set where
      constructor Ringoid1SigC
      field
        * : A -> A -> A
        1 : A
        + : A -> A -> A
    record Ringoid1SigSig
      (AS : Set) : Set where
      constructor Ringoid1SigSigSigC
      field
        *S : AS -> AS -> AS
        1S : AS
        +S : AS -> AS -> AS
    record Ringoid1SigProd
      (AP : Set) : Set where
      constructor Ringoid1SigProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record Ringoid1SigHom
      (A1 : Set) (A2 : Set)
      (Ri1 : Ringoid1Sig A1)
      (Ri2 : Ringoid1Sig A2) :
      Set where
      constructor Ringoid1SigHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Ri1 x1 x2) ==
            * Ri2 (hom x1) (hom x2)
        pres-1 : hom (1 Ri1) == 1 Ri2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ri1 x1 x2) ==
            + Ri2 (hom x1) (hom x2)
    record Ringoid1SigRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : Ringoid1Sig A1)
      (Ri2 : Ringoid1Sig A2) :
      Set where
      constructor Ringoid1SigRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Ri1 x1 x2)
            (* Ri2 y1 y2)
        interp-1 :
          interp (1 Ri1) (1 Ri2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ri1 x1 x2)
            (+ Ri2 y1 y2)
    data Ringoid1SigTerm : Set where
      *L :
        Ringoid1SigTerm ->
        Ringoid1SigTerm ->
        Ringoid1SigTerm
      1L : Ringoid1SigTerm
      +L :
        Ringoid1SigTerm ->
        Ringoid1SigTerm ->
        Ringoid1SigTerm
    data ClRingoid1SigTerm
      (A : Set) : Set where
      sing :
        A -> ClRingoid1SigTerm A
      *Cl :
        ClRingoid1SigTerm A ->
        ClRingoid1SigTerm A ->
        ClRingoid1SigTerm A
      1Cl : ClRingoid1SigTerm A
      +Cl :
        ClRingoid1SigTerm A ->
        ClRingoid1SigTerm A ->
        ClRingoid1SigTerm A
    data OpRingoid1SigTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpRingoid1SigTerm n
      *OL :
        OpRingoid1SigTerm n ->
        OpRingoid1SigTerm n ->
        OpRingoid1SigTerm n
      1OL : OpRingoid1SigTerm n
      +OL :
        OpRingoid1SigTerm n ->
        OpRingoid1SigTerm n ->
        OpRingoid1SigTerm n
    data OpRingoid1SigTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpRingoid1SigTerm2 n A
      sing2 :
        A -> OpRingoid1SigTerm2 n A
      *OL2 :
        OpRingoid1SigTerm2 n A ->
        OpRingoid1SigTerm2 n A ->
        OpRingoid1SigTerm2 n A
      1OL2 : OpRingoid1SigTerm2 n A
      +OL2 :
        OpRingoid1SigTerm2 n A ->
        OpRingoid1SigTerm2 n A ->
        OpRingoid1SigTerm2 n A
  
  module RingoidSig where
    record RingoidSig
      (A : Set) : Set where
      constructor RingoidSigC
      field
        * : A -> A -> A
        + : A -> A -> A
    record RingoidSigSig
      (AS : Set) : Set where
      constructor RingoidSigSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record RingoidSigProd
      (AP : Set) : Set where
      constructor RingoidSigProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record RingoidSigHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RingoidSig A1)
      (Ri2 : RingoidSig A2) :
      Set where
      constructor RingoidSigHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Ri1 x1 x2) ==
            * Ri2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ri1 x1 x2) ==
            + Ri2 (hom x1) (hom x2)
    record RingoidSigRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RingoidSig A1)
      (Ri2 : RingoidSig A2) :
      Set where
      constructor RingoidSigRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Ri1 x1 x2)
            (* Ri2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ri1 x1 x2)
            (+ Ri2 y1 y2)
    data RingoidSigTerm : Set where
      *L :
        RingoidSigTerm ->
        RingoidSigTerm -> RingoidSigTerm
      +L :
        RingoidSigTerm ->
        RingoidSigTerm -> RingoidSigTerm
    data ClRingoidSigTerm
      (A : Set) : Set where
      sing : A -> ClRingoidSigTerm A
      *Cl :
        ClRingoidSigTerm A ->
        ClRingoidSigTerm A ->
        ClRingoidSigTerm A
      +Cl :
        ClRingoidSigTerm A ->
        ClRingoidSigTerm A ->
        ClRingoidSigTerm A
    data OpRingoidSigTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpRingoidSigTerm n
      *OL :
        OpRingoidSigTerm n ->
        OpRingoidSigTerm n ->
        OpRingoidSigTerm n
      +OL :
        OpRingoidSigTerm n ->
        OpRingoidSigTerm n ->
        OpRingoidSigTerm n
    data OpRingoidSigTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpRingoidSigTerm2 n A
      sing2 :
        A -> OpRingoidSigTerm2 n A
      *OL2 :
        OpRingoidSigTerm2 n A ->
        OpRingoidSigTerm2 n A ->
        OpRingoidSigTerm2 n A
      +OL2 :
        OpRingoidSigTerm2 n A ->
        OpRingoidSigTerm2 n A ->
        OpRingoidSigTerm2 n A
  
  module RingoidWithAddAntiDistrib where
    record RingoidWithAddAntiDistrib
      (A : Set) : Set where
      constructor RingoidWithAddAntiDistribC
      field
        + : A -> A -> A
        prim : A -> A
        antidis_prim_+ :
          (x : A) (y : A) ->
          prim (+ x y) ==
            + (prim y) (prim x)
        * : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record RingoidWithAddAntiDistribSig
      (AS : Set) : Set where
      constructor RingoidWithAddAntiDistribSigSigC
      field
        +S : AS -> AS -> AS
        primS : AS -> AS
        *S : AS -> AS -> AS
    record RingoidWithAddAntiDistribProd
      (AP : Set) : Set where
      constructor RingoidWithAddAntiDistribProdC
      field
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        antidis_prim_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (+P xP yP) ==
            +P (primP yP) (primP xP)
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record RingoidWithAddAntiDistribHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RingoidWithAddAntiDistrib
         A1)
      (Ri2 : RingoidWithAddAntiDistrib
         A2) : Set where
      constructor RingoidWithAddAntiDistribHomC
      field
        hom : A1 -> A2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ri1 x1 x2) ==
            + Ri2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A1) ->
          hom (prim Ri1 x1) ==
            prim Ri2 (hom x1)
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Ri1 x1 x2) ==
            * Ri2 (hom x1) (hom x2)
    record RingoidWithAddAntiDistribRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RingoidWithAddAntiDistrib
         A1)
      (Ri2 : RingoidWithAddAntiDistrib
         A2) : Set where
      constructor RingoidWithAddAntiDistribRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ri1 x1 x2)
            (+ Ri2 y1 y2)
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim Ri1 x1)
            (prim Ri2 y1)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Ri1 x1 x2)
            (* Ri2 y1 y2)
    data RingoidWithAddAntiDistribTerm
      : Set where
      +L :
        RingoidWithAddAntiDistribTerm ->
        RingoidWithAddAntiDistribTerm ->
        RingoidWithAddAntiDistribTerm
      primL :
        RingoidWithAddAntiDistribTerm ->
        RingoidWithAddAntiDistribTerm
      *L :
        RingoidWithAddAntiDistribTerm ->
        RingoidWithAddAntiDistribTerm ->
        RingoidWithAddAntiDistribTerm
    data ClRingoidWithAddAntiDistribTerm
      (A : Set) : Set where
      sing :
        A ->
        ClRingoidWithAddAntiDistribTerm
          A
      +Cl :
        ClRingoidWithAddAntiDistribTerm
          A ->
        ClRingoidWithAddAntiDistribTerm
          A ->
        ClRingoidWithAddAntiDistribTerm
          A
      primCl :
        ClRingoidWithAddAntiDistribTerm
          A ->
        ClRingoidWithAddAntiDistribTerm
          A
      *Cl :
        ClRingoidWithAddAntiDistribTerm
          A ->
        ClRingoidWithAddAntiDistribTerm
          A ->
        ClRingoidWithAddAntiDistribTerm
          A
    data OpRingoidWithAddAntiDistribTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpRingoidWithAddAntiDistribTerm
          n
      +OL :
        OpRingoidWithAddAntiDistribTerm
          n ->
        OpRingoidWithAddAntiDistribTerm
          n ->
        OpRingoidWithAddAntiDistribTerm
          n
      primOL :
        OpRingoidWithAddAntiDistribTerm
          n ->
        OpRingoidWithAddAntiDistribTerm
          n
      *OL :
        OpRingoidWithAddAntiDistribTerm
          n ->
        OpRingoidWithAddAntiDistribTerm
          n ->
        OpRingoidWithAddAntiDistribTerm
          n
    data OpRingoidWithAddAntiDistribTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpRingoidWithAddAntiDistribTerm2
          n
          A
      sing2 :
        A ->
        OpRingoidWithAddAntiDistribTerm2
          n
          A
      +OL2 :
        OpRingoidWithAddAntiDistribTerm2
          n
          A ->
        OpRingoidWithAddAntiDistribTerm2
          n
          A ->
        OpRingoidWithAddAntiDistribTerm2
          n
          A
      primOL2 :
        OpRingoidWithAddAntiDistribTerm2
          n
          A ->
        OpRingoidWithAddAntiDistribTerm2
          n
          A
      *OL2 :
        OpRingoidWithAddAntiDistribTerm2
          n
          A ->
        OpRingoidWithAddAntiDistribTerm2
          n
          A ->
        OpRingoidWithAddAntiDistribTerm2
          n
          A
  
  module RingoidWithInvolution where
    record RingoidWithInvolution
      (A : Set) : Set where
      constructor RingoidWithInvolutionC
      field
        * : A -> A -> A
        + : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        prim : A -> A
    record RingoidWithInvolutionSig
      (AS : Set) : Set where
      constructor RingoidWithInvolutionSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        primS : AS -> AS
    record RingoidWithInvolutionProd
      (AP : Set) : Set where
      constructor RingoidWithInvolutionProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record RingoidWithInvolutionHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RingoidWithInvolution A1)
      (Ri2 : RingoidWithInvolution
         A2) : Set where
      constructor RingoidWithInvolutionHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Ri1 x1 x2) ==
            * Ri2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ri1 x1 x2) ==
            + Ri2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A1) ->
          hom (prim Ri1 x1) ==
            prim Ri2 (hom x1)
    record RingoidWithInvolutionRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RingoidWithInvolution A1)
      (Ri2 : RingoidWithInvolution
         A2) : Set where
      constructor RingoidWithInvolutionRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Ri1 x1 x2)
            (* Ri2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ri1 x1 x2)
            (+ Ri2 y1 y2)
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim Ri1 x1)
            (prim Ri2 y1)
    data RingoidWithInvolutionTerm
      : Set where
      *L :
        RingoidWithInvolutionTerm ->
        RingoidWithInvolutionTerm ->
        RingoidWithInvolutionTerm
      +L :
        RingoidWithInvolutionTerm ->
        RingoidWithInvolutionTerm ->
        RingoidWithInvolutionTerm
      primL :
        RingoidWithInvolutionTerm ->
        RingoidWithInvolutionTerm
    data ClRingoidWithInvolutionTerm
      (A : Set) : Set where
      sing :
        A ->
        ClRingoidWithInvolutionTerm A
      *Cl :
        ClRingoidWithInvolutionTerm A ->
        ClRingoidWithInvolutionTerm A ->
        ClRingoidWithInvolutionTerm A
      +Cl :
        ClRingoidWithInvolutionTerm A ->
        ClRingoidWithInvolutionTerm A ->
        ClRingoidWithInvolutionTerm A
      primCl :
        ClRingoidWithInvolutionTerm A ->
        ClRingoidWithInvolutionTerm A
    data OpRingoidWithInvolutionTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpRingoidWithInvolutionTerm n
      *OL :
        OpRingoidWithInvolutionTerm n ->
        OpRingoidWithInvolutionTerm n ->
        OpRingoidWithInvolutionTerm n
      +OL :
        OpRingoidWithInvolutionTerm n ->
        OpRingoidWithInvolutionTerm n ->
        OpRingoidWithInvolutionTerm n
      primOL :
        OpRingoidWithInvolutionTerm n ->
        OpRingoidWithInvolutionTerm n
    data OpRingoidWithInvolutionTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpRingoidWithInvolutionTerm2 n A
      sing2 :
        A ->
        OpRingoidWithInvolutionTerm2 n A
      *OL2 :
        OpRingoidWithInvolutionTerm2 n
          A ->
        OpRingoidWithInvolutionTerm2 n
          A ->
        OpRingoidWithInvolutionTerm2 n A
      +OL2 :
        OpRingoidWithInvolutionTerm2 n
          A ->
        OpRingoidWithInvolutionTerm2 n
          A ->
        OpRingoidWithInvolutionTerm2 n A
      primOL2 :
        OpRingoidWithInvolutionTerm2 n
          A ->
        OpRingoidWithInvolutionTerm2 n A
  
  module RingoidWithMultAntiDistrib where
    record RingoidWithMultAntiDistrib
      (A : Set) : Set where
      constructor RingoidWithMultAntiDistribC
      field
        * : A -> A -> A
        prim : A -> A
        antidis_prim_* :
          (x : A) (y : A) ->
          prim (* x y) ==
            * (prim y) (prim x)
        + : A -> A -> A
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record RingoidWithMultAntiDistribSig
      (AS : Set) : Set where
      constructor RingoidWithMultAntiDistribSigSigC
      field
        *S : AS -> AS -> AS
        primS : AS -> AS
        +S : AS -> AS -> AS
    record RingoidWithMultAntiDistribProd
      (AP : Set) : Set where
      constructor RingoidWithMultAntiDistribProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        primP : Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        antidis_prim_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (*P xP yP) ==
            *P (primP yP) (primP xP)
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record RingoidWithMultAntiDistribHom
      (A1 : Set) (A2 : Set)
      (Ri1 : RingoidWithMultAntiDistrib
         A1)
      (Ri2 : RingoidWithMultAntiDistrib
         A2) : Set where
      constructor RingoidWithMultAntiDistribHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Ri1 x1 x2) ==
            * Ri2 (hom x1) (hom x2)
        pres-prim :
          (x1 : A1) ->
          hom (prim Ri1 x1) ==
            prim Ri2 (hom x1)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ri1 x1 x2) ==
            + Ri2 (hom x1) (hom x2)
    record RingoidWithMultAntiDistribRelInterp
      (A1 : Set) (A2 : Set)
      (Ri1 : RingoidWithMultAntiDistrib
         A1)
      (Ri2 : RingoidWithMultAntiDistrib
         A2) : Set where
      constructor RingoidWithMultAntiDistribRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Ri1 x1 x2)
            (* Ri2 y1 y2)
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim Ri1 x1)
            (prim Ri2 y1)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ri1 x1 x2)
            (+ Ri2 y1 y2)
    data RingoidWithMultAntiDistribTerm
      : Set where
      *L :
        RingoidWithMultAntiDistribTerm ->
        RingoidWithMultAntiDistribTerm ->
        RingoidWithMultAntiDistribTerm
      primL :
        RingoidWithMultAntiDistribTerm ->
        RingoidWithMultAntiDistribTerm
      +L :
        RingoidWithMultAntiDistribTerm ->
        RingoidWithMultAntiDistribTerm ->
        RingoidWithMultAntiDistribTerm
    data ClRingoidWithMultAntiDistribTerm
      (A : Set) : Set where
      sing :
        A ->
        ClRingoidWithMultAntiDistribTerm
          A
      *Cl :
        ClRingoidWithMultAntiDistribTerm
          A ->
        ClRingoidWithMultAntiDistribTerm
          A ->
        ClRingoidWithMultAntiDistribTerm
          A
      primCl :
        ClRingoidWithMultAntiDistribTerm
          A ->
        ClRingoidWithMultAntiDistribTerm
          A
      +Cl :
        ClRingoidWithMultAntiDistribTerm
          A ->
        ClRingoidWithMultAntiDistribTerm
          A ->
        ClRingoidWithMultAntiDistribTerm
          A
    data OpRingoidWithMultAntiDistribTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpRingoidWithMultAntiDistribTerm
          n
      *OL :
        OpRingoidWithMultAntiDistribTerm
          n ->
        OpRingoidWithMultAntiDistribTerm
          n ->
        OpRingoidWithMultAntiDistribTerm
          n
      primOL :
        OpRingoidWithMultAntiDistribTerm
          n ->
        OpRingoidWithMultAntiDistribTerm
          n
      +OL :
        OpRingoidWithMultAntiDistribTerm
          n ->
        OpRingoidWithMultAntiDistribTerm
          n ->
        OpRingoidWithMultAntiDistribTerm
          n
    data OpRingoidWithMultAntiDistribTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpRingoidWithMultAntiDistribTerm2
          n
          A
      sing2 :
        A ->
        OpRingoidWithMultAntiDistribTerm2
          n
          A
      *OL2 :
        OpRingoidWithMultAntiDistribTerm2
          n
          A ->
        OpRingoidWithMultAntiDistribTerm2
          n
          A ->
        OpRingoidWithMultAntiDistribTerm2
          n
          A
      primOL2 :
        OpRingoidWithMultAntiDistribTerm2
          n
          A ->
        OpRingoidWithMultAntiDistribTerm2
          n
          A
      +OL2 :
        OpRingoidWithMultAntiDistribTerm2
          n
          A ->
        OpRingoidWithMultAntiDistribTerm2
          n
          A ->
        OpRingoidWithMultAntiDistribTerm2
          n
          A
  
  module Rng where
    record Rng (A : Set) : Set where
      constructor RngC
      field
        0 : A
        + : A -> A -> A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        neg : A -> A
        leftInverse_inv_op_0 :
          (x : A) -> + x (neg x) == 0
        rightInverse_inv_op_0 :
          (x : A) -> + (neg x) x == 0
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record RngSig
      (AS : Set) : Set where
      constructor RngSigSigC
      field
        0S : AS
        +S : AS -> AS -> AS
        negS : AS -> AS
        *S : AS -> AS -> AS
    record RngProd
      (AP : Set) : Set where
      constructor RngProdC
      field
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        negP : Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        leftInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P xP (negP xP) == 0P
        rightInverse_inv_op_0P :
          (xP : Prod AP AP) ->
          +P (negP xP) xP == 0P
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record RngHom
      (A1 : Set) (A2 : Set)
      (Rn1 : Rng A1)
      (Rn2 : Rng A2) : Set where
      constructor RngHomC
      field
        hom : A1 -> A2
        pres-0 : hom (0 Rn1) == 0 Rn2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Rn1 x1 x2) ==
            + Rn2 (hom x1) (hom x2)
        pres-neg :
          (x1 : A1) ->
          hom (neg Rn1 x1) ==
            neg Rn2 (hom x1)
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Rn1 x1 x2) ==
            * Rn2 (hom x1) (hom x2)
    record RngRelInterp
      (A1 : Set) (A2 : Set)
      (Rn1 : Rng A1)
      (Rn2 : Rng A2) : Set where
      constructor RngRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0 :
          interp (0 Rn1) (0 Rn2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Rn1 x1 x2)
            (+ Rn2 y1 y2)
        interp-neg :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (neg Rn1 x1) (neg Rn2 y1)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Rn1 x1 x2)
            (* Rn2 y1 y2)
    data RngTerm : Set where
      0L : RngTerm
      +L :
        RngTerm -> RngTerm -> RngTerm
      negL : RngTerm -> RngTerm
      *L :
        RngTerm -> RngTerm -> RngTerm
    data ClRngTerm
      (A : Set) : Set where
      sing : A -> ClRngTerm A
      0Cl : ClRngTerm A
      +Cl :
        ClRngTerm A ->
        ClRngTerm A -> ClRngTerm A
      negCl :
        ClRngTerm A -> ClRngTerm A
      *Cl :
        ClRngTerm A ->
        ClRngTerm A -> ClRngTerm A
    data OpRngTerm
      (n : Nat) : Set where
      v : Fin n -> OpRngTerm n
      0OL : OpRngTerm n
      +OL :
        OpRngTerm n ->
        OpRngTerm n -> OpRngTerm n
      negOL :
        OpRngTerm n -> OpRngTerm n
      *OL :
        OpRngTerm n ->
        OpRngTerm n -> OpRngTerm n
    data OpRngTerm2
      (n : Nat) (A : Set) : Set where
      v2 : Fin n -> OpRngTerm2 n A
      sing2 : A -> OpRngTerm2 n A
      0OL2 : OpRngTerm2 n A
      +OL2 :
        OpRngTerm2 n A ->
        OpRngTerm2 n A -> OpRngTerm2 n A
      negOL2 :
        OpRngTerm2 n A -> OpRngTerm2 n A
      *OL2 :
        OpRngTerm2 n A ->
        OpRngTerm2 n A -> OpRngTerm2 n A
  
  module SemiRng where
    record SemiRng
      (A : Set) : Set where
      constructor SemiRngC
      field
        * : A -> A -> A
        + : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record SemiRngSig
      (AS : Set) : Set where
      constructor SemiRngSigSigC
      field
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
        0S : AS
    record SemiRngProd
      (AP : Set) : Set where
      constructor SemiRngProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record SemiRngHom
      (A1 : Set) (A2 : Set)
      (Se1 : SemiRng A1)
      (Se2 : SemiRng A2) : Set where
      constructor SemiRngHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Se1 x1 x2) ==
            * Se2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Se1 x1 x2) ==
            + Se2 (hom x1) (hom x2)
        pres-0 : hom (0 Se1) == 0 Se2
    record SemiRngRelInterp
      (A1 : Set) (A2 : Set)
      (Se1 : SemiRng A1)
      (Se2 : SemiRng A2) : Set where
      constructor SemiRngRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Se1 x1 x2)
            (* Se2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Se1 x1 x2)
            (+ Se2 y1 y2)
        interp-0 :
          interp (0 Se1) (0 Se2)
    data SemiRngTerm : Set where
      *L :
        SemiRngTerm ->
        SemiRngTerm -> SemiRngTerm
      +L :
        SemiRngTerm ->
        SemiRngTerm -> SemiRngTerm
      0L : SemiRngTerm
    data ClSemiRngTerm
      (A : Set) : Set where
      sing : A -> ClSemiRngTerm A
      *Cl :
        ClSemiRngTerm A ->
        ClSemiRngTerm A ->
        ClSemiRngTerm A
      +Cl :
        ClSemiRngTerm A ->
        ClSemiRngTerm A ->
        ClSemiRngTerm A
      0Cl : ClSemiRngTerm A
    data OpSemiRngTerm
      (n : Nat) : Set where
      v : Fin n -> OpSemiRngTerm n
      *OL :
        OpSemiRngTerm n ->
        OpSemiRngTerm n ->
        OpSemiRngTerm n
      +OL :
        OpSemiRngTerm n ->
        OpSemiRngTerm n ->
        OpSemiRngTerm n
      0OL : OpSemiRngTerm n
    data OpSemiRngTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpSemiRngTerm2 n A
      sing2 : A -> OpSemiRngTerm2 n A
      *OL2 :
        OpSemiRngTerm2 n A ->
        OpSemiRngTerm2 n A ->
        OpSemiRngTerm2 n A
      +OL2 :
        OpSemiRngTerm2 n A ->
        OpSemiRngTerm2 n A ->
        OpSemiRngTerm2 n A
      0OL2 : OpSemiRngTerm2 n A
  
  module SemiRngWithUnit where
    record SemiRngWithUnit
      (A : Set) : Set where
      constructor SemiRngWithUnitC
      field
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        + : A -> A -> A
        0 : A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
    record SemiRngWithUnitSig
      (AS : Set) : Set where
      constructor SemiRngWithUnitSigSigC
      field
        *S : AS -> AS -> AS
        1S : AS
        +S : AS -> AS -> AS
        0S : AS
    record SemiRngWithUnitProd
      (AP : Set) : Set where
      constructor SemiRngWithUnitProdC
      field
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        0P : Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
    record SemiRngWithUnitHom
      (A1 : Set) (A2 : Set)
      (Se1 : SemiRngWithUnit A1)
      (Se2 : SemiRngWithUnit A2) :
      Set where
      constructor SemiRngWithUnitHomC
      field
        hom : A1 -> A2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Se1 x1 x2) ==
            * Se2 (hom x1) (hom x2)
        pres-1 : hom (1 Se1) == 1 Se2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Se1 x1 x2) ==
            + Se2 (hom x1) (hom x2)
        pres-0 : hom (0 Se1) == 0 Se2
    record SemiRngWithUnitRelInterp
      (A1 : Set) (A2 : Set)
      (Se1 : SemiRngWithUnit A1)
      (Se2 : SemiRngWithUnit A2) :
      Set where
      constructor SemiRngWithUnitRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Se1 x1 x2)
            (* Se2 y1 y2)
        interp-1 :
          interp (1 Se1) (1 Se2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Se1 x1 x2)
            (+ Se2 y1 y2)
        interp-0 :
          interp (0 Se1) (0 Se2)
    data SemiRngWithUnitTerm
      : Set where
      *L :
        SemiRngWithUnitTerm ->
        SemiRngWithUnitTerm ->
        SemiRngWithUnitTerm
      1L : SemiRngWithUnitTerm
      +L :
        SemiRngWithUnitTerm ->
        SemiRngWithUnitTerm ->
        SemiRngWithUnitTerm
      0L : SemiRngWithUnitTerm
    data ClSemiRngWithUnitTerm
      (A : Set) : Set where
      sing :
        A -> ClSemiRngWithUnitTerm A
      *Cl :
        ClSemiRngWithUnitTerm A ->
        ClSemiRngWithUnitTerm A ->
        ClSemiRngWithUnitTerm A
      1Cl : ClSemiRngWithUnitTerm A
      +Cl :
        ClSemiRngWithUnitTerm A ->
        ClSemiRngWithUnitTerm A ->
        ClSemiRngWithUnitTerm A
      0Cl : ClSemiRngWithUnitTerm A
    data OpSemiRngWithUnitTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpSemiRngWithUnitTerm n
      *OL :
        OpSemiRngWithUnitTerm n ->
        OpSemiRngWithUnitTerm n ->
        OpSemiRngWithUnitTerm n
      1OL : OpSemiRngWithUnitTerm n
      +OL :
        OpSemiRngWithUnitTerm n ->
        OpSemiRngWithUnitTerm n ->
        OpSemiRngWithUnitTerm n
      0OL : OpSemiRngWithUnitTerm n
    data OpSemiRngWithUnitTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpSemiRngWithUnitTerm2 n A
      sing2 :
        A -> OpSemiRngWithUnitTerm2 n A
      *OL2 :
        OpSemiRngWithUnitTerm2 n A ->
        OpSemiRngWithUnitTerm2 n A ->
        OpSemiRngWithUnitTerm2 n A
      1OL2 :
        OpSemiRngWithUnitTerm2 n A
      +OL2 :
        OpSemiRngWithUnitTerm2 n A ->
        OpSemiRngWithUnitTerm2 n A ->
        OpSemiRngWithUnitTerm2 n A
      0OL2 :
        OpSemiRngWithUnitTerm2 n A
  
  module Semigroup where
    record Semigroup
      (A : Set) : Set where
      constructor SemigroupC
      field
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
    record SemigroupSig
      (AS : Set) : Set where
      constructor SemigroupSigSigC
      field
        opS : AS -> AS -> AS
    record SemigroupProd
      (AP : Set) : Set where
      constructor SemigroupProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
    record SemigroupHom
      (A1 : Set) (A2 : Set)
      (Se1 : Semigroup A1)
      (Se2 : Semigroup A2) : Set where
      constructor SemigroupHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Se1 x1 x2) ==
            op Se2 (hom x1) (hom x2)
    record SemigroupRelInterp
      (A1 : Set) (A2 : Set)
      (Se1 : Semigroup A1)
      (Se2 : Semigroup A2) : Set where
      constructor SemigroupRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Se1 x1 x2)
            (op Se2 y1 y2)
    data SemigroupTerm : Set where
      opL :
        SemigroupTerm ->
        SemigroupTerm -> SemigroupTerm
    data ClSemigroupTerm
      (A : Set) : Set where
      sing : A -> ClSemigroupTerm A
      opCl :
        ClSemigroupTerm A ->
        ClSemigroupTerm A ->
        ClSemigroupTerm A
    data OpSemigroupTerm
      (n : Nat) : Set where
      v : Fin n -> OpSemigroupTerm n
      opOL :
        OpSemigroupTerm n ->
        OpSemigroupTerm n ->
        OpSemigroupTerm n
    data OpSemigroupTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpSemigroupTerm2 n A
      sing2 :
        A -> OpSemigroupTerm2 n A
      opOL2 :
        OpSemigroupTerm2 n A ->
        OpSemigroupTerm2 n A ->
        OpSemigroupTerm2 n A
  
  module Semiring where
    record Semiring
      (A : Set) : Set where
      constructor SemiringC
      field
        0 : A
        + : A -> A -> A
        * : A -> A -> A
        associative_* :
          (x : A) (y : A) (z : A) ->
          * (* x y) z == * x (* y z)
        1 : A
        lunit_1 : (x : A) -> * 1 x == x
        runit_1 : (x : A) -> * x 1 == x
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        leftDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * x (+ y z) == + (* x y) (* x z)
        rightDistributive_*_+ :
          (x : A) (y : A) (z : A) ->
          * (+ y z) x == + (* y x) (* z x)
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
    record SemiringSig
      (AS : Set) : Set where
      constructor SemiringSigSigC
      field
        0S : AS
        +S : AS -> AS -> AS
        *S : AS -> AS -> AS
        1S : AS
    record SemiringProd
      (AP : Set) : Set where
      constructor SemiringProdC
      field
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        1P : Prod AP AP
        associative_*P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (*P xP yP) zP ==
            *P xP (*P yP zP)
        lunit_1P :
          (xP : Prod AP AP) ->
          *P 1P xP == xP
        runit_1P :
          (xP : Prod AP AP) ->
          *P xP 1P == xP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        leftDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P xP (+P yP zP) ==
            +P (*P xP yP) (*P xP zP)
        rightDistributive_*_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          *P (+P yP zP) xP ==
            +P (*P yP xP) (*P zP xP)
        leftZero_op_0P :
          (xP : Prod AP AP) ->
          *P 0P xP == 0P
        rightZero_op_0P :
          (xP : Prod AP AP) ->
          *P xP 0P == 0P
    record SemiringHom
      (A1 : Set) (A2 : Set)
      (Se1 : Semiring A1)
      (Se2 : Semiring A2) : Set where
      constructor SemiringHomC
      field
        hom : A1 -> A2
        pres-0 : hom (0 Se1) == 0 Se2
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Se1 x1 x2) ==
            + Se2 (hom x1) (hom x2)
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Se1 x1 x2) ==
            * Se2 (hom x1) (hom x2)
        pres-1 : hom (1 Se1) == 1 Se2
    record SemiringRelInterp
      (A1 : Set) (A2 : Set)
      (Se1 : Semiring A1)
      (Se2 : Semiring A2) : Set where
      constructor SemiringRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0 :
          interp (0 Se1) (0 Se2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Se1 x1 x2)
            (+ Se2 y1 y2)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Se1 x1 x2)
            (* Se2 y1 y2)
        interp-1 :
          interp (1 Se1) (1 Se2)
    data SemiringTerm : Set where
      0L : SemiringTerm
      +L :
        SemiringTerm ->
        SemiringTerm -> SemiringTerm
      *L :
        SemiringTerm ->
        SemiringTerm -> SemiringTerm
      1L : SemiringTerm
    data ClSemiringTerm
      (A : Set) : Set where
      sing : A -> ClSemiringTerm A
      0Cl : ClSemiringTerm A
      +Cl :
        ClSemiringTerm A ->
        ClSemiringTerm A ->
        ClSemiringTerm A
      *Cl :
        ClSemiringTerm A ->
        ClSemiringTerm A ->
        ClSemiringTerm A
      1Cl : ClSemiringTerm A
    data OpSemiringTerm
      (n : Nat) : Set where
      v : Fin n -> OpSemiringTerm n
      0OL : OpSemiringTerm n
      +OL :
        OpSemiringTerm n ->
        OpSemiringTerm n ->
        OpSemiringTerm n
      *OL :
        OpSemiringTerm n ->
        OpSemiringTerm n ->
        OpSemiringTerm n
      1OL : OpSemiringTerm n
    data OpSemiringTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpSemiringTerm2 n A
      sing2 : A -> OpSemiringTerm2 n A
      0OL2 : OpSemiringTerm2 n A
      +OL2 :
        OpSemiringTerm2 n A ->
        OpSemiringTerm2 n A ->
        OpSemiringTerm2 n A
      *OL2 :
        OpSemiringTerm2 n A ->
        OpSemiringTerm2 n A ->
        OpSemiringTerm2 n A
      1OL2 : OpSemiringTerm2 n A
  
  module Shelf where
    record Shelf
      (A : Set) : Set where
      constructor ShelfC
      field
        |> : A -> A -> A
        <| : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
    record ShelfSig
      (AS : Set) : Set where
      constructor ShelfSigSigC
      field
        |>S : AS -> AS -> AS
        <|S : AS -> AS -> AS
    record ShelfProd
      (AP : Set) : Set where
      constructor ShelfProdC
      field
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          |>P xP (|>P yP zP) ==
            |>P (|>P xP yP) (|>P xP zP)
        rightDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          <|P (<|P yP zP) xP ==
            <|P (<|P yP xP) (<|P zP xP)
    record ShelfHom
      (A1 : Set) (A2 : Set)
      (Sh1 : Shelf A1)
      (Sh2 : Shelf A2) : Set where
      constructor ShelfHomC
      field
        hom : A1 -> A2
        pres-|> :
          (x1 : A1) (x2 : A1) ->
          hom (|> Sh1 x1 x2) ==
            |> Sh2 (hom x1) (hom x2)
        pres-<| :
          (x1 : A1) (x2 : A1) ->
          hom (<| Sh1 x1 x2) ==
            <| Sh2 (hom x1) (hom x2)
    record ShelfRelInterp
      (A1 : Set) (A2 : Set)
      (Sh1 : Shelf A1)
      (Sh2 : Shelf A2) : Set where
      constructor ShelfRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-|> :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (|> Sh1 x1 x2)
            (|> Sh2 y1 y2)
        interp-<| :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (<| Sh1 x1 x2)
            (<| Sh2 y1 y2)
    data ShelfTerm : Set where
      |>L :
        ShelfTerm ->
        ShelfTerm -> ShelfTerm
      <|L :
        ShelfTerm ->
        ShelfTerm -> ShelfTerm
    data ClShelfTerm
      (A : Set) : Set where
      sing : A -> ClShelfTerm A
      |>Cl :
        ClShelfTerm A ->
        ClShelfTerm A -> ClShelfTerm A
      <|Cl :
        ClShelfTerm A ->
        ClShelfTerm A -> ClShelfTerm A
    data OpShelfTerm
      (n : Nat) : Set where
      v : Fin n -> OpShelfTerm n
      |>OL :
        OpShelfTerm n ->
        OpShelfTerm n -> OpShelfTerm n
      <|OL :
        OpShelfTerm n ->
        OpShelfTerm n -> OpShelfTerm n
    data OpShelfTerm2
      (n : Nat) (A : Set) : Set where
      v2 : Fin n -> OpShelfTerm2 n A
      sing2 : A -> OpShelfTerm2 n A
      |>OL2 :
        OpShelfTerm2 n A ->
        OpShelfTerm2 n A ->
        OpShelfTerm2 n A
      <|OL2 :
        OpShelfTerm2 n A ->
        OpShelfTerm2 n A ->
        OpShelfTerm2 n A
  
  module ShelfSig where
    record ShelfSig
      (A : Set) : Set where
      constructor ShelfSigC
      field
        |> : A -> A -> A
        <| : A -> A -> A
    record ShelfSigSig
      (AS : Set) : Set where
      constructor ShelfSigSigSigC
      field
        |>S : AS -> AS -> AS
        <|S : AS -> AS -> AS
    record ShelfSigProd
      (AP : Set) : Set where
      constructor ShelfSigProdC
      field
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record ShelfSigHom
      (A1 : Set) (A2 : Set)
      (Sh1 : ShelfSig A1)
      (Sh2 : ShelfSig A2) : Set where
      constructor ShelfSigHomC
      field
        hom : A1 -> A2
        pres-|> :
          (x1 : A1) (x2 : A1) ->
          hom (|> Sh1 x1 x2) ==
            |> Sh2 (hom x1) (hom x2)
        pres-<| :
          (x1 : A1) (x2 : A1) ->
          hom (<| Sh1 x1 x2) ==
            <| Sh2 (hom x1) (hom x2)
    record ShelfSigRelInterp
      (A1 : Set) (A2 : Set)
      (Sh1 : ShelfSig A1)
      (Sh2 : ShelfSig A2) : Set where
      constructor ShelfSigRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-|> :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (|> Sh1 x1 x2)
            (|> Sh2 y1 y2)
        interp-<| :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (<| Sh1 x1 x2)
            (<| Sh2 y1 y2)
    data ShelfSigTerm : Set where
      |>L :
        ShelfSigTerm ->
        ShelfSigTerm -> ShelfSigTerm
      <|L :
        ShelfSigTerm ->
        ShelfSigTerm -> ShelfSigTerm
    data ClShelfSigTerm
      (A : Set) : Set where
      sing : A -> ClShelfSigTerm A
      |>Cl :
        ClShelfSigTerm A ->
        ClShelfSigTerm A ->
        ClShelfSigTerm A
      <|Cl :
        ClShelfSigTerm A ->
        ClShelfSigTerm A ->
        ClShelfSigTerm A
    data OpShelfSigTerm
      (n : Nat) : Set where
      v : Fin n -> OpShelfSigTerm n
      |>OL :
        OpShelfSigTerm n ->
        OpShelfSigTerm n ->
        OpShelfSigTerm n
      <|OL :
        OpShelfSigTerm n ->
        OpShelfSigTerm n ->
        OpShelfSigTerm n
    data OpShelfSigTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpShelfSigTerm2 n A
      sing2 : A -> OpShelfSigTerm2 n A
      |>OL2 :
        OpShelfSigTerm2 n A ->
        OpShelfSigTerm2 n A ->
        OpShelfSigTerm2 n A
      <|OL2 :
        OpShelfSigTerm2 n A ->
        OpShelfSigTerm2 n A ->
        OpShelfSigTerm2 n A
  
  module Sloop where
    record Sloop
      (A : Set) : Set where
      constructor SloopC
      field
        e : A
        op : A -> A -> A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
        antiAbsorbent :
          (x : A) (y : A) ->
          op x (op x y) == y
        unipotence :
          (x : A) -> op x x == e
    record SloopSig
      (AS : Set) : Set where
      constructor SloopSigSigC
      field
        eS : AS
        opS : AS -> AS -> AS
    record SloopProd
      (AP : Set) : Set where
      constructor SloopProdC
      field
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
        antiAbsorbentP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (opP xP yP) == yP
        unipotenceP :
          (xP : Prod AP AP) ->
          opP xP xP == eP
    record SloopHom
      (A1 : Set) (A2 : Set)
      (Sl1 : Sloop A1)
      (Sl2 : Sloop A2) : Set where
      constructor SloopHomC
      field
        hom : A1 -> A2
        pres-e : hom (e Sl1) == e Sl2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Sl1 x1 x2) ==
            op Sl2 (hom x1) (hom x2)
    record SloopRelInterp
      (A1 : Set) (A2 : Set)
      (Sl1 : Sloop A1)
      (Sl2 : Sloop A2) : Set where
      constructor SloopRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-e :
          interp (e Sl1) (e Sl2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Sl1 x1 x2)
            (op Sl2 y1 y2)
    data SloopLTerm : Set where
      eL : SloopLTerm
      opL :
        SloopLTerm ->
        SloopLTerm -> SloopLTerm
    data ClSloopClTerm
      (A : Set) : Set where
      sing : A -> ClSloopClTerm A
      eCl : ClSloopClTerm A
      opCl :
        ClSloopClTerm A ->
        ClSloopClTerm A ->
        ClSloopClTerm A
    data OpSloopOLTerm
      (n : Nat) : Set where
      v : Fin n -> OpSloopOLTerm n
      eOL : OpSloopOLTerm n
      opOL :
        OpSloopOLTerm n ->
        OpSloopOLTerm n ->
        OpSloopOLTerm n
    data OpSloopOL2Term2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpSloopOL2Term2 n A
      sing2 : A -> OpSloopOL2Term2 n A
      eOL2 : OpSloopOL2Term2 n A
      opOL2 :
        OpSloopOL2Term2 n A ->
        OpSloopOL2Term2 n A ->
        OpSloopOL2Term2 n A
  
  module Spindle where
    record Spindle
      (A : Set) : Set where
      constructor SpindleC
      field
        |> : A -> A -> A
        <| : A -> A -> A
        leftDistributive :
          (x : A) (y : A) (z : A) ->
          |> x (|> y z) ==
            |> (|> x y) (|> x z)
        rightDistributive :
          (x : A) (y : A) (z : A) ->
          <| (<| y z) x ==
            <| (<| y x) (<| z x)
        idempotent_|> :
          (x : A) -> |> x x == x
        idempotent_<| :
          (x : A) -> <| x x == x
    record SpindleSig
      (AS : Set) : Set where
      constructor SpindleSigSigC
      field
        |>S : AS -> AS -> AS
        <|S : AS -> AS -> AS
    record SpindleProd
      (AP : Set) : Set where
      constructor SpindleProdC
      field
        |>P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        <|P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          |>P xP (|>P yP zP) ==
            |>P (|>P xP yP) (|>P xP zP)
        rightDistributiveP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          <|P (<|P yP zP) xP ==
            <|P (<|P yP xP) (<|P zP xP)
        idempotent_|>P :
          (xP : Prod AP AP) ->
          |>P xP xP == xP
        idempotent_<|P :
          (xP : Prod AP AP) ->
          <|P xP xP == xP
    record SpindleHom
      (A1 : Set) (A2 : Set)
      (Sp1 : Spindle A1)
      (Sp2 : Spindle A2) : Set where
      constructor SpindleHomC
      field
        hom : A1 -> A2
        pres-|> :
          (x1 : A1) (x2 : A1) ->
          hom (|> Sp1 x1 x2) ==
            |> Sp2 (hom x1) (hom x2)
        pres-<| :
          (x1 : A1) (x2 : A1) ->
          hom (<| Sp1 x1 x2) ==
            <| Sp2 (hom x1) (hom x2)
    record SpindleRelInterp
      (A1 : Set) (A2 : Set)
      (Sp1 : Spindle A1)
      (Sp2 : Spindle A2) : Set where
      constructor SpindleRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-|> :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (|> Sp1 x1 x2)
            (|> Sp2 y1 y2)
        interp-<| :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (<| Sp1 x1 x2)
            (<| Sp2 y1 y2)
    data SpindleTerm : Set where
      |>L :
        SpindleTerm ->
        SpindleTerm -> SpindleTerm
      <|L :
        SpindleTerm ->
        SpindleTerm -> SpindleTerm
    data ClSpindleTerm
      (A : Set) : Set where
      sing : A -> ClSpindleTerm A
      |>Cl :
        ClSpindleTerm A ->
        ClSpindleTerm A ->
        ClSpindleTerm A
      <|Cl :
        ClSpindleTerm A ->
        ClSpindleTerm A ->
        ClSpindleTerm A
    data OpSpindleTerm
      (n : Nat) : Set where
      v : Fin n -> OpSpindleTerm n
      |>OL :
        OpSpindleTerm n ->
        OpSpindleTerm n ->
        OpSpindleTerm n
      <|OL :
        OpSpindleTerm n ->
        OpSpindleTerm n ->
        OpSpindleTerm n
    data OpSpindleTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpSpindleTerm2 n A
      sing2 : A -> OpSpindleTerm2 n A
      |>OL2 :
        OpSpindleTerm2 n A ->
        OpSpindleTerm2 n A ->
        OpSpindleTerm2 n A
      <|OL2 :
        OpSpindleTerm2 n A ->
        OpSpindleTerm2 n A ->
        OpSpindleTerm2 n A
  
  module Squag where
    record Squag
      (A : Set) : Set where
      constructor SquagC
      field
        op : A -> A -> A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
        antiAbsorbent :
          (x : A) (y : A) ->
          op x (op x y) == y
        idempotent_op :
          (x : A) -> op x x == x
    record SquagSig
      (AS : Set) : Set where
      constructor SquagSigSigC
      field
        opS : AS -> AS -> AS
    record SquagProd
      (AP : Set) : Set where
      constructor SquagProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
        antiAbsorbentP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (opP xP yP) == yP
        idempotent_opP :
          (xP : Prod AP AP) ->
          opP xP xP == xP
    record SquagHom
      (A1 : Set) (A2 : Set)
      (Sq1 : Squag A1)
      (Sq2 : Squag A2) : Set where
      constructor SquagHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Sq1 x1 x2) ==
            op Sq2 (hom x1) (hom x2)
    record SquagRelInterp
      (A1 : Set) (A2 : Set)
      (Sq1 : Squag A1)
      (Sq2 : Squag A2) : Set where
      constructor SquagRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Sq1 x1 x2)
            (op Sq2 y1 y2)
    data SquagTerm : Set where
      opL :
        SquagTerm ->
        SquagTerm -> SquagTerm
    data ClSquagTerm
      (A : Set) : Set where
      sing : A -> ClSquagTerm A
      opCl :
        ClSquagTerm A ->
        ClSquagTerm A -> ClSquagTerm A
    data OpSquagTerm
      (n : Nat) : Set where
      v : Fin n -> OpSquagTerm n
      opOL :
        OpSquagTerm n ->
        OpSquagTerm n -> OpSquagTerm n
    data OpSquagTerm2
      (n : Nat) (A : Set) : Set where
      v2 : Fin n -> OpSquagTerm2 n A
      sing2 : A -> OpSquagTerm2 n A
      opOL2 :
        OpSquagTerm2 n A ->
        OpSquagTerm2 n A ->
        OpSquagTerm2 n A
  
  module SteinerMagma where
    record SteinerMagma
      (A : Set) : Set where
      constructor SteinerMagmaC
      field
        op : A -> A -> A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
        antiAbsorbent :
          (x : A) (y : A) ->
          op x (op x y) == y
    record SteinerMagmaSig
      (AS : Set) : Set where
      constructor SteinerMagmaSigSigC
      field
        opS : AS -> AS -> AS
    record SteinerMagmaProd
      (AP : Set) : Set where
      constructor SteinerMagmaProdC
      field
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
        antiAbsorbentP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP (opP xP yP) == yP
    record SteinerMagmaHom
      (A1 : Set) (A2 : Set)
      (St1 : SteinerMagma A1)
      (St2 : SteinerMagma A2) :
      Set where
      constructor SteinerMagmaHomC
      field
        hom : A1 -> A2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op St1 x1 x2) ==
            op St2 (hom x1) (hom x2)
    record SteinerMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (St1 : SteinerMagma A1)
      (St2 : SteinerMagma A2) :
      Set where
      constructor SteinerMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op St1 x1 x2)
            (op St2 y1 y2)
    data SteinerMagmaTerm
      : Set where
      opL :
        SteinerMagmaTerm ->
        SteinerMagmaTerm ->
        SteinerMagmaTerm
    data ClSteinerMagmaTerm
      (A : Set) : Set where
      sing :
        A -> ClSteinerMagmaTerm A
      opCl :
        ClSteinerMagmaTerm A ->
        ClSteinerMagmaTerm A ->
        ClSteinerMagmaTerm A
    data OpSteinerMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpSteinerMagmaTerm n
      opOL :
        OpSteinerMagmaTerm n ->
        OpSteinerMagmaTerm n ->
        OpSteinerMagmaTerm n
    data OpSteinerMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpSteinerMagmaTerm2 n A
      sing2 :
        A -> OpSteinerMagmaTerm2 n A
      opOL2 :
        OpSteinerMagmaTerm2 n A ->
        OpSteinerMagmaTerm2 n A ->
        OpSteinerMagmaTerm2 n A
  
  module TwoPointed where
    record TwoPointed
      (A : Set) : Set where
      constructor TwoPointedC
      field
        e1 : A
        e2 : A
    record TwoPointedSig
      (AS : Set) : Set where
      constructor TwoPointedSigSigC
      field
        e1S : AS
        e2S : AS
    record TwoPointedProd
      (AP : Set) : Set where
      constructor TwoPointedProdC
      field
        e1P : Prod AP AP
        e2P : Prod AP AP
    record TwoPointedHom
      (A1 : Set) (A2 : Set)
      (Tw1 : TwoPointed A1)
      (Tw2 : TwoPointed A2) :
      Set where
      constructor TwoPointedHomC
      field
        hom : A1 -> A2
        pres-e1 : hom (e1 Tw1) == e1 Tw2
        pres-e2 : hom (e2 Tw1) == e2 Tw2
    record TwoPointedRelInterp
      (A1 : Set) (A2 : Set)
      (Tw1 : TwoPointed A1)
      (Tw2 : TwoPointed A2) :
      Set where
      constructor TwoPointedRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-e1 :
          interp (e1 Tw1) (e1 Tw2)
        interp-e2 :
          interp (e2 Tw1) (e2 Tw2)
    data TwoPointedTerm : Set where
      e1L : TwoPointedTerm
      e2L : TwoPointedTerm
    data ClTwoPointedTerm
      (A : Set) : Set where
      sing : A -> ClTwoPointedTerm A
      e1Cl : ClTwoPointedTerm A
      e2Cl : ClTwoPointedTerm A
    data OpTwoPointedTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpTwoPointedTerm n
      e1OL : OpTwoPointedTerm n
      e2OL : OpTwoPointedTerm n
    data OpTwoPointedTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpTwoPointedTerm2 n A
      sing2 :
        A -> OpTwoPointedTerm2 n A
      e1OL2 : OpTwoPointedTerm2 n A
      e2OL2 : OpTwoPointedTerm2 n A
  
  module TwoPointed01 where
    record TwoPointed01
      (A : Set) : Set where
      constructor TwoPointed01C
      field
        e1 : A
        e2 : A
    record TwoPointed01Sig
      (AS : Set) : Set where
      constructor TwoPointed01SigSigC
      field
        e1S : AS
        e2S : AS
    record TwoPointed01Prod
      (AP : Set) : Set where
      constructor TwoPointed01ProdC
      field
        e1P : Prod AP AP
        e2P : Prod AP AP
    record TwoPointed01Hom
      (A1 : Set) (A2 : Set)
      (Tw1 : TwoPointed01 A1)
      (Tw2 : TwoPointed01 A2) :
      Set where
      constructor TwoPointed01HomC
      field
        hom : A1 -> A2
        pres-e1 : hom (e1 Tw1) == e1 Tw2
        pres-e2 : hom (e2 Tw1) == e2 Tw2
    record TwoPointed01RelInterp
      (A1 : Set) (A2 : Set)
      (Tw1 : TwoPointed01 A1)
      (Tw2 : TwoPointed01 A2) :
      Set where
      constructor TwoPointed01RelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-e1 :
          interp (e1 Tw1) (e1 Tw2)
        interp-e2 :
          interp (e2 Tw1) (e2 Tw2)
    data TwoPointed01Term
      : Set where
      e1L : TwoPointed01Term
      e2L : TwoPointed01Term
    data ClTwoPointed01Term
      (A : Set) : Set where
      sing :
        A -> ClTwoPointed01Term A
      e1Cl : ClTwoPointed01Term A
      e2Cl : ClTwoPointed01Term A
    data OpTwoPointed01Term
      (n : Nat) : Set where
      v :
        Fin n -> OpTwoPointed01Term n
      e1OL : OpTwoPointed01Term n
      e2OL : OpTwoPointed01Term n
    data OpTwoPointed01Term2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpTwoPointed01Term2 n A
      sing2 :
        A -> OpTwoPointed01Term2 n A
      e1OL2 : OpTwoPointed01Term2 n A
      e2OL2 : OpTwoPointed01Term2 n A
  
  module UnaryAntiDistribution where
    record UnaryAntiDistribution
      (A : Set) : Set where
      constructor UnaryAntiDistributionC
      field
        prim : A -> A
        op : A -> A -> A
        antidis_prim_op :
          (x : A) (y : A) ->
          prim (op x y) ==
            op (prim y) (prim x)
    record UnaryAntiDistributionSig
      (AS : Set) : Set where
      constructor UnaryAntiDistributionSigSigC
      field
        primS : AS -> AS
        opS : AS -> AS -> AS
    record UnaryAntiDistributionProd
      (AP : Set) : Set where
      constructor UnaryAntiDistributionProdC
      field
        primP : Prod AP AP -> Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        antidis_prim_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (opP xP yP) ==
            opP (primP yP) (primP xP)
    record UnaryAntiDistributionHom
      (A1 : Set) (A2 : Set)
      (Un1 : UnaryAntiDistribution A1)
      (Un2 : UnaryAntiDistribution
         A2) : Set where
      constructor UnaryAntiDistributionHomC
      field
        hom : A1 -> A2
        pres-prim :
          (x1 : A1) ->
          hom (prim Un1 x1) ==
            prim Un2 (hom x1)
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Un1 x1 x2) ==
            op Un2 (hom x1) (hom x2)
    record UnaryAntiDistributionRelInterp
      (A1 : Set) (A2 : Set)
      (Un1 : UnaryAntiDistribution A1)
      (Un2 : UnaryAntiDistribution
         A2) : Set where
      constructor UnaryAntiDistributionRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim Un1 x1)
            (prim Un2 y1)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Un1 x1 x2)
            (op Un2 y1 y2)
    data UnaryAntiDistributionTerm
      : Set where
      primL :
        UnaryAntiDistributionTerm ->
        UnaryAntiDistributionTerm
      opL :
        UnaryAntiDistributionTerm ->
        UnaryAntiDistributionTerm ->
        UnaryAntiDistributionTerm
    data ClUnaryAntiDistributionTerm
      (A : Set) : Set where
      sing :
        A ->
        ClUnaryAntiDistributionTerm A
      primCl :
        ClUnaryAntiDistributionTerm A ->
        ClUnaryAntiDistributionTerm A
      opCl :
        ClUnaryAntiDistributionTerm A ->
        ClUnaryAntiDistributionTerm A ->
        ClUnaryAntiDistributionTerm A
    data OpUnaryAntiDistributionTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpUnaryAntiDistributionTerm n
      primOL :
        OpUnaryAntiDistributionTerm n ->
        OpUnaryAntiDistributionTerm n
      opOL :
        OpUnaryAntiDistributionTerm n ->
        OpUnaryAntiDistributionTerm n ->
        OpUnaryAntiDistributionTerm n
    data OpUnaryAntiDistributionTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpUnaryAntiDistributionTerm2 n A
      sing2 :
        A ->
        OpUnaryAntiDistributionTerm2 n A
      primOL2 :
        OpUnaryAntiDistributionTerm2 n
          A ->
        OpUnaryAntiDistributionTerm2 n A
      opOL2 :
        OpUnaryAntiDistributionTerm2 n
          A ->
        OpUnaryAntiDistributionTerm2 n
          A ->
        OpUnaryAntiDistributionTerm2 n A
  
  module UnaryDistributes where
    record UnaryDistributes
      (A : Set) : Set where
      constructor UnaryDistributesC
      field
        prim : A -> A
        op : A -> A -> A
        distribute_prim_op :
          (x : A) (y : A) ->
          prim (op x y) ==
            op (prim x) (prim y)
    record UnaryDistributesSig
      (AS : Set) : Set where
      constructor UnaryDistributesSigSigC
      field
        primS : AS -> AS
        opS : AS -> AS -> AS
    record UnaryDistributesProd
      (AP : Set) : Set where
      constructor UnaryDistributesProdC
      field
        primP : Prod AP AP -> Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        distribute_prim_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          primP (opP xP yP) ==
            opP (primP xP) (primP yP)
    record UnaryDistributesHom
      (A1 : Set) (A2 : Set)
      (Un1 : UnaryDistributes A1)
      (Un2 : UnaryDistributes A2) :
      Set where
      constructor UnaryDistributesHomC
      field
        hom : A1 -> A2
        pres-prim :
          (x1 : A1) ->
          hom (prim Un1 x1) ==
            prim Un2 (hom x1)
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Un1 x1 x2) ==
            op Un2 (hom x1) (hom x2)
    record UnaryDistributesRelInterp
      (A1 : Set) (A2 : Set)
      (Un1 : UnaryDistributes A1)
      (Un2 : UnaryDistributes A2) :
      Set where
      constructor UnaryDistributesRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim Un1 x1)
            (prim Un2 y1)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Un1 x1 x2)
            (op Un2 y1 y2)
    data UnaryDistributesTerm
      : Set where
      primL :
        UnaryDistributesTerm ->
        UnaryDistributesTerm
      opL :
        UnaryDistributesTerm ->
        UnaryDistributesTerm ->
        UnaryDistributesTerm
    data ClUnaryDistributesTerm
      (A : Set) : Set where
      sing :
        A -> ClUnaryDistributesTerm A
      primCl :
        ClUnaryDistributesTerm A ->
        ClUnaryDistributesTerm A
      opCl :
        ClUnaryDistributesTerm A ->
        ClUnaryDistributesTerm A ->
        ClUnaryDistributesTerm A
    data OpUnaryDistributesTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpUnaryDistributesTerm n
      primOL :
        OpUnaryDistributesTerm n ->
        OpUnaryDistributesTerm n
      opOL :
        OpUnaryDistributesTerm n ->
        OpUnaryDistributesTerm n ->
        OpUnaryDistributesTerm n
    data OpUnaryDistributesTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpUnaryDistributesTerm2 n A
      sing2 :
        A -> OpUnaryDistributesTerm2 n A
      primOL2 :
        OpUnaryDistributesTerm2 n A ->
        OpUnaryDistributesTerm2 n A
      opOL2 :
        OpUnaryDistributesTerm2 n A ->
        OpUnaryDistributesTerm2 n A ->
        OpUnaryDistributesTerm2 n A
  
  module UnaryOperation where
    record UnaryOperation
      (A : Set) : Set where
      constructor UnaryOperationC
      field
        prim : A -> A
    record UnaryOperationSig
      (AS : Set) : Set where
      constructor UnaryOperationSigSigC
      field
        primS : AS -> AS
    record UnaryOperationProd
      (AP : Set) : Set where
      constructor UnaryOperationProdC
      field
        primP : Prod AP AP -> Prod AP AP
    record UnaryOperationHom
      (A1 : Set) (A2 : Set)
      (Un1 : UnaryOperation A1)
      (Un2 : UnaryOperation A2) :
      Set where
      constructor UnaryOperationHomC
      field
        hom : A1 -> A2
        pres-prim :
          (x1 : A1) ->
          hom (prim Un1 x1) ==
            prim Un2 (hom x1)
    record UnaryOperationRelInterp
      (A1 : Set) (A2 : Set)
      (Un1 : UnaryOperation A1)
      (Un2 : UnaryOperation A2) :
      Set where
      constructor UnaryOperationRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-prim :
          (x1 : A1) (y1 : A2) ->
          interp x1 y1 ->
          interp (prim Un1 x1)
            (prim Un2 y1)
    data UnaryOperationTerm
      : Set where
      primL :
        UnaryOperationTerm ->
        UnaryOperationTerm
    data ClUnaryOperationTerm
      (A : Set) : Set where
      sing :
        A -> ClUnaryOperationTerm A
      primCl :
        ClUnaryOperationTerm A ->
        ClUnaryOperationTerm A
    data OpUnaryOperationTerm
      (n : Nat) : Set where
      v :
        Fin n -> OpUnaryOperationTerm n
      primOL :
        OpUnaryOperationTerm n ->
        OpUnaryOperationTerm n
    data OpUnaryOperationTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpUnaryOperationTerm2 n A
      sing2 :
        A -> OpUnaryOperationTerm2 n A
      primOL2 :
        OpUnaryOperationTerm2 n A ->
        OpUnaryOperationTerm2 n A
  
  module UnipotentPointedMagma where
    record UnipotentPointedMagma
      (A : Set) : Set where
      constructor UnipotentPointedMagmaC
      field
        e : A
        op : A -> A -> A
        unipotence :
          (x : A) -> op x x == e
    record UnipotentPointedMagmaSig
      (AS : Set) : Set where
      constructor UnipotentPointedMagmaSigSigC
      field
        eS : AS
        opS : AS -> AS -> AS
    record UnipotentPointedMagmaProd
      (AP : Set) : Set where
      constructor UnipotentPointedMagmaProdC
      field
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        unipotenceP :
          (xP : Prod AP AP) ->
          opP xP xP == eP
    record UnipotentPointedMagmaHom
      (A1 : Set) (A2 : Set)
      (Un1 : UnipotentPointedMagma A1)
      (Un2 : UnipotentPointedMagma
         A2) : Set where
      constructor UnipotentPointedMagmaHomC
      field
        hom : A1 -> A2
        pres-e : hom (e Un1) == e Un2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Un1 x1 x2) ==
            op Un2 (hom x1) (hom x2)
    record UnipotentPointedMagmaRelInterp
      (A1 : Set) (A2 : Set)
      (Un1 : UnipotentPointedMagma A1)
      (Un2 : UnipotentPointedMagma
         A2) : Set where
      constructor UnipotentPointedMagmaRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-e :
          interp (e Un1) (e Un2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Un1 x1 x2)
            (op Un2 y1 y2)
    data UnipotentPointedMagmaTerm
      : Set where
      eL : UnipotentPointedMagmaTerm
      opL :
        UnipotentPointedMagmaTerm ->
        UnipotentPointedMagmaTerm ->
        UnipotentPointedMagmaTerm
    data ClUnipotentPointedMagmaTerm
      (A : Set) : Set where
      sing :
        A ->
        ClUnipotentPointedMagmaTerm A
      eCl :
        ClUnipotentPointedMagmaTerm A
      opCl :
        ClUnipotentPointedMagmaTerm A ->
        ClUnipotentPointedMagmaTerm A ->
        ClUnipotentPointedMagmaTerm A
    data OpUnipotentPointedMagmaTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpUnipotentPointedMagmaTerm n
      eOL :
        OpUnipotentPointedMagmaTerm n
      opOL :
        OpUnipotentPointedMagmaTerm n ->
        OpUnipotentPointedMagmaTerm n ->
        OpUnipotentPointedMagmaTerm n
    data OpUnipotentPointedMagmaTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpUnipotentPointedMagmaTerm2 n A
      sing2 :
        A ->
        OpUnipotentPointedMagmaTerm2 n A
      eOL2 :
        OpUnipotentPointedMagmaTerm2 n A
      opOL2 :
        OpUnipotentPointedMagmaTerm2 n
          A ->
        OpUnipotentPointedMagmaTerm2 n
          A ->
        OpUnipotentPointedMagmaTerm2 n A
  
  module Unital where
    record Unital
      (A : Set) : Set where
      constructor UnitalC
      field
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
    record UnitalSig
      (AS : Set) : Set where
      constructor UnitalSigSigC
      field
        eS : AS
        opS : AS -> AS -> AS
    record UnitalProd
      (AP : Set) : Set where
      constructor UnitalProdC
      field
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
    record UnitalHom
      (A1 : Set) (A2 : Set)
      (Un1 : Unital A1)
      (Un2 : Unital A2) : Set where
      constructor UnitalHomC
      field
        hom : A1 -> A2
        pres-e : hom (e Un1) == e Un2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Un1 x1 x2) ==
            op Un2 (hom x1) (hom x2)
    record UnitalRelInterp
      (A1 : Set) (A2 : Set)
      (Un1 : Unital A1)
      (Un2 : Unital A2) : Set where
      constructor UnitalRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-e :
          interp (e Un1) (e Un2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Un1 x1 x2)
            (op Un2 y1 y2)
    data UnitalTerm : Set where
      eL : UnitalTerm
      opL :
        UnitalTerm ->
        UnitalTerm -> UnitalTerm
    data ClUnitalTerm
      (A : Set) : Set where
      sing : A -> ClUnitalTerm A
      eCl : ClUnitalTerm A
      opCl :
        ClUnitalTerm A ->
        ClUnitalTerm A -> ClUnitalTerm A
    data OpUnitalTerm
      (n : Nat) : Set where
      v : Fin n -> OpUnitalTerm n
      eOL : OpUnitalTerm n
      opOL :
        OpUnitalTerm n ->
        OpUnitalTerm n -> OpUnitalTerm n
    data OpUnitalTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpUnitalTerm2 n A
      sing2 : A -> OpUnitalTerm2 n A
      eOL2 : OpUnitalTerm2 n A
      opOL2 :
        OpUnitalTerm2 n A ->
        OpUnitalTerm2 n A ->
        OpUnitalTerm2 n A
  
  module Zero where
    record Zero
      (A : Set) : Set where
      constructor ZeroC
      field
        e : A
        op : A -> A -> A
        leftZero_op_e :
          (x : A) -> op e x == e
        rightZero_op_e :
          (x : A) -> op x e == e
    record ZeroSig
      (AS : Set) : Set where
      constructor ZeroSigSigC
      field
        eS : AS
        opS : AS -> AS -> AS
    record ZeroProd
      (AP : Set) : Set where
      constructor ZeroProdC
      field
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftZero_op_eP :
          (xP : Prod AP AP) ->
          opP eP xP == eP
        rightZero_op_eP :
          (xP : Prod AP AP) ->
          opP xP eP == eP
    record ZeroHom
      (A1 : Set) (A2 : Set)
      (Ze1 : Zero A1)
      (Ze2 : Zero A2) : Set where
      constructor ZeroHomC
      field
        hom : A1 -> A2
        pres-e : hom (e Ze1) == e Ze2
        pres-op :
          (x1 : A1) (x2 : A1) ->
          hom (op Ze1 x1 x2) ==
            op Ze2 (hom x1) (hom x2)
    record ZeroRelInterp
      (A1 : Set) (A2 : Set)
      (Ze1 : Zero A1)
      (Ze2 : Zero A2) : Set where
      constructor ZeroRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-e :
          interp (e Ze1) (e Ze2)
        interp-op :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (op Ze1 x1 x2)
            (op Ze2 y1 y2)
    data ZeroTerm : Set where
      eL : ZeroTerm
      opL :
        ZeroTerm -> ZeroTerm -> ZeroTerm
    data ClZeroTerm
      (A : Set) : Set where
      sing : A -> ClZeroTerm A
      eCl : ClZeroTerm A
      opCl :
        ClZeroTerm A ->
        ClZeroTerm A -> ClZeroTerm A
    data OpZeroTerm
      (n : Nat) : Set where
      v : Fin n -> OpZeroTerm n
      eOL : OpZeroTerm n
      opOL :
        OpZeroTerm n ->
        OpZeroTerm n -> OpZeroTerm n
    data OpZeroTerm2
      (n : Nat) (A : Set) : Set where
      v2 : Fin n -> OpZeroTerm2 n A
      sing2 : A -> OpZeroTerm2 n A
      eOL2 : OpZeroTerm2 n A
      opOL2 :
        OpZeroTerm2 n A ->
        OpZeroTerm2 n A ->
        OpZeroTerm2 n A
  
  module Zero0 where
    record Zero0
      (A : Set) : Set where
      constructor Zero0C
      field
        0 : A
        * : A -> A -> A
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
    record Zero0Sig
      (AS : Set) : Set where
      constructor Zero0SigSigC
      field
        0S : AS
        *S : AS -> AS -> AS
    record Zero0Prod
      (AP : Set) : Set where
      constructor Zero0ProdC
      field
        0P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftZero_op_0P :
          (xP : Prod AP AP) ->
          *P 0P xP == 0P
        rightZero_op_0P :
          (xP : Prod AP AP) ->
          *P xP 0P == 0P
    record Zero0Hom
      (A1 : Set) (A2 : Set)
      (Ze1 : Zero0 A1)
      (Ze2 : Zero0 A2) : Set where
      constructor Zero0HomC
      field
        hom : A1 -> A2
        pres-0 : hom (0 Ze1) == 0 Ze2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Ze1 x1 x2) ==
            * Ze2 (hom x1) (hom x2)
    record Zero0RelInterp
      (A1 : Set) (A2 : Set)
      (Ze1 : Zero0 A1)
      (Ze2 : Zero0 A2) : Set where
      constructor Zero0RelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0 :
          interp (0 Ze1) (0 Ze2)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Ze1 x1 x2)
            (* Ze2 y1 y2)
    data Zero0LTerm : Set where
      0L : Zero0LTerm
      *L :
        Zero0LTerm ->
        Zero0LTerm -> Zero0LTerm
    data ClZero0ClTerm
      (A : Set) : Set where
      sing : A -> ClZero0ClTerm A
      0Cl : ClZero0ClTerm A
      *Cl :
        ClZero0ClTerm A ->
        ClZero0ClTerm A ->
        ClZero0ClTerm A
    data OpZero0OLTerm
      (n : Nat) : Set where
      v : Fin n -> OpZero0OLTerm n
      0OL : OpZero0OLTerm n
      *OL :
        OpZero0OLTerm n ->
        OpZero0OLTerm n ->
        OpZero0OLTerm n
    data OpZero0OL2Term2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n -> OpZero0OL2Term2 n A
      sing2 : A -> OpZero0OL2Term2 n A
      0OL2 : OpZero0OL2Term2 n A
      *OL2 :
        OpZero0OL2Term2 n A ->
        OpZero0OL2Term2 n A ->
        OpZero0OL2Term2 n A
  
  module Zero_Ringoid0Sig where
    record Zero_Ringoid0Sig
      (A : Set) : Set where
      constructor Zero_Ringoid0SigC
      field
        0 : A
        * : A -> A -> A
        leftZero_op_0 :
          (x : A) -> * 0 x == 0
        rightZero_op_0 :
          (x : A) -> * x 0 == 0
        + : A -> A -> A
    record Zero_Ringoid0SigSig
      (AS : Set) : Set where
      constructor Zero_Ringoid0SigSigSigC
      field
        0S : AS
        *S : AS -> AS -> AS
        +S : AS -> AS -> AS
    record Zero_Ringoid0SigProd
      (AP : Set) : Set where
      constructor Zero_Ringoid0SigProdC
      field
        0P : Prod AP AP
        *P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        leftZero_op_0P :
          (xP : Prod AP AP) ->
          *P 0P xP == 0P
        rightZero_op_0P :
          (xP : Prod AP AP) ->
          *P xP 0P == 0P
    record Zero_Ringoid0SigHom
      (A1 : Set) (A2 : Set)
      (Ze1 : Zero_Ringoid0Sig A1)
      (Ze2 : Zero_Ringoid0Sig A2) :
      Set where
      constructor Zero_Ringoid0SigHomC
      field
        hom : A1 -> A2
        pres-0 : hom (0 Ze1) == 0 Ze2
        pres-* :
          (x1 : A1) (x2 : A1) ->
          hom (* Ze1 x1 x2) ==
            * Ze2 (hom x1) (hom x2)
        pres-+ :
          (x1 : A1) (x2 : A1) ->
          hom (+ Ze1 x1 x2) ==
            + Ze2 (hom x1) (hom x2)
    record Zero_Ringoid0SigRelInterp
      (A1 : Set) (A2 : Set)
      (Ze1 : Zero_Ringoid0Sig A1)
      (Ze2 : Zero_Ringoid0Sig A2) :
      Set where
      constructor Zero_Ringoid0SigRelInterpC
      field
        interp : A1 -> A2 -> Set
        interp-0 :
          interp (0 Ze1) (0 Ze2)
        interp-* :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (* Ze1 x1 x2)
            (* Ze2 y1 y2)
        interp-+ :
          (x1 : A1) (x2 : A1) (y1 : A2)
          (y2 : A2) ->
          interp x1 y1 ->
          interp x2 y2 ->
          interp (+ Ze1 x1 x2)
            (+ Ze2 y1 y2)
    data Zero_Ringoid0SigTerm
      : Set where
      0L : Zero_Ringoid0SigTerm
      *L :
        Zero_Ringoid0SigTerm ->
        Zero_Ringoid0SigTerm ->
        Zero_Ringoid0SigTerm
      +L :
        Zero_Ringoid0SigTerm ->
        Zero_Ringoid0SigTerm ->
        Zero_Ringoid0SigTerm
    data ClZero_Ringoid0SigTerm
      (A : Set) : Set where
      sing :
        A -> ClZero_Ringoid0SigTerm A
      0Cl : ClZero_Ringoid0SigTerm A
      *Cl :
        ClZero_Ringoid0SigTerm A ->
        ClZero_Ringoid0SigTerm A ->
        ClZero_Ringoid0SigTerm A
      +Cl :
        ClZero_Ringoid0SigTerm A ->
        ClZero_Ringoid0SigTerm A ->
        ClZero_Ringoid0SigTerm A
    data OpZero_Ringoid0SigTerm
      (n : Nat) : Set where
      v :
        Fin n ->
        OpZero_Ringoid0SigTerm n
      0OL : OpZero_Ringoid0SigTerm n
      *OL :
        OpZero_Ringoid0SigTerm n ->
        OpZero_Ringoid0SigTerm n ->
        OpZero_Ringoid0SigTerm n
      +OL :
        OpZero_Ringoid0SigTerm n ->
        OpZero_Ringoid0SigTerm n ->
        OpZero_Ringoid0SigTerm n
    data OpZero_Ringoid0SigTerm2
      (n : Nat) (A : Set) : Set where
      v2 :
        Fin n ->
        OpZero_Ringoid0SigTerm2 n A
      sing2 :
        A -> OpZero_Ringoid0SigTerm2 n A
      0OL2 :
        OpZero_Ringoid0SigTerm2 n A
      *OL2 :
        OpZero_Ringoid0SigTerm2 n A ->
        OpZero_Ringoid0SigTerm2 n A ->
        OpZero_Ringoid0SigTerm2 n A
      +OL2 :
        OpZero_Ringoid0SigTerm2 n A ->
        OpZero_Ringoid0SigTerm2 n A ->
        OpZero_Ringoid0SigTerm2 n A
  

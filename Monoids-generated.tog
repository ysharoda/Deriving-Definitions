------------------------------------------------------------------------
-- Checking declarations
------------------------------------------------------------------------
-- Solved Metas: 4485
-- Unsolved Metas: 0
------------------------------------------------------------------------
-- Unsolved problems: 0
------------------------------------------------------------------------
module MathScheme where
  data Prod
    (A : Set) (B : Set) : Set where
    
  module AdditiveCommutativeSemigroup where
    record AdditiveCommutativeSemigroup
      : Set where
      constructor AdditiveCommutativeSemigroupC
      field
        A : Set
        + : A -> A -> A
        commutative_+ :
          (x : A) (y : A) ->
          + x y == + y x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
    record AdditiveCommutativeSemigroupHom
      (A1 : AdditiveCommutativeSemigroup)
      (A2 : AdditiveCommutativeSemigroup) :
      Set where
      constructor AdditiveCommutativeSemigroupHomC
      field
        hom : A A1 -> A A2
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
    data AdditiveCommutativeSemigroupLang
      : Set where
      +L :
        AdditiveCommutativeSemigroupLang ->
        AdditiveCommutativeSemigroupLang ->
        AdditiveCommutativeSemigroupLang
    record AdditiveCommutativeSemigroupProd
      : Set where
      constructor AdditiveCommutativeSemigroupProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          +P xP yP == +P yP xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
    record AdditiveCommutativeSemigroupSig
      : Set where
      constructor AdditiveCommutativeSemigroupSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
  
  module AdditiveMagma where
    record AdditiveMagma : Set where
      constructor AdditiveMagmaC
      field
        A : Set
        + : A -> A -> A
    record AdditiveMagmaHom
      (A1 : AdditiveMagma)
      (A2 : AdditiveMagma) : Set where
      constructor AdditiveMagmaHomC
      field
        hom : A A1 -> A A2
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
    data AdditiveMagmaLang
      : Set where
      +L :
        AdditiveMagmaLang ->
        AdditiveMagmaLang ->
        AdditiveMagmaLang
    record AdditiveMagmaProd
      : Set where
      constructor AdditiveMagmaProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record AdditiveMagmaSig
      : Set where
      constructor AdditiveMagmaSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
  
  module AdditiveMonoid where
    record AdditiveMonoid
      : Set where
      constructor AdditiveMonoidC
      field
        A : Set
        0 : A
        + : A -> A -> A
        lunit_0 : (x : A) -> + 0 x == x
        runit_0 : (x : A) -> + x 0 == x
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
    record AdditiveMonoidHom
      (A1 : AdditiveMonoid)
      (A2 : AdditiveMonoid) :
      Set where
      constructor AdditiveMonoidHomC
      field
        hom : A A1 -> A A2
        pres-0 : hom (0 A1) == 0 A2
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
    data AdditiveMonoidLang
      : Set where
      0L : AdditiveMonoidLang
      +L :
        AdditiveMonoidLang ->
        AdditiveMonoidLang ->
        AdditiveMonoidLang
    record AdditiveMonoidProd
      : Set where
      constructor AdditiveMonoidProdC
      field
        AP : Set
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_0P :
          (xP : Prod AP AP) ->
          +P 0P xP == xP
        runit_0P :
          (xP : Prod AP AP) ->
          +P xP 0P == xP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
    record AdditiveMonoidSig
      : Set where
      constructor AdditiveMonoidSigSigC
      field
        AS : Set
        0S : AS
        +S : AS -> AS -> AS
  
  module AdditivePointedMagma where
    record AdditivePointedMagma
      : Set where
      constructor AdditivePointedMagmaC
      field
        A : Set
        0 : A
        + : A -> A -> A
    record AdditivePointedMagmaHom
      (A1 : AdditivePointedMagma)
      (A2 : AdditivePointedMagma) :
      Set where
      constructor AdditivePointedMagmaHomC
      field
        hom : A A1 -> A A2
        pres-0 : hom (0 A1) == 0 A2
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
    data AdditivePointedMagmaLang
      : Set where
      0L : AdditivePointedMagmaLang
      +L :
        AdditivePointedMagmaLang ->
        AdditivePointedMagmaLang ->
        AdditivePointedMagmaLang
    record AdditivePointedMagmaProd
      : Set where
      constructor AdditivePointedMagmaProdC
      field
        AP : Set
        0P : Prod AP AP
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record AdditivePointedMagmaSig
      : Set where
      constructor AdditivePointedMagmaSigSigC
      field
        AS : Set
        0S : AS
        +S : AS -> AS -> AS
  
  module AdditiveSemigroup where
    record AdditiveSemigroup
      : Set where
      constructor AdditiveSemigroupC
      field
        A : Set
        + : A -> A -> A
        associative_+ :
          (x : A) (y : A) (z : A) ->
          + (+ x y) z == + x (+ y z)
    record AdditiveSemigroupHom
      (A1 : AdditiveSemigroup)
      (A2 : AdditiveSemigroup) :
      Set where
      constructor AdditiveSemigroupHomC
      field
        hom : A A1 -> A A2
        pres-+ :
          (x1 : A A1) (x2 : A A1) ->
          hom (+ A1 x1 x2) ==
            + A2 (hom x1) (hom x2)
    data AdditiveSemigroupLang
      : Set where
      +L :
        AdditiveSemigroupLang ->
        AdditiveSemigroupLang ->
        AdditiveSemigroupLang
    record AdditiveSemigroupProd
      : Set where
      constructor AdditiveSemigroupProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_+P :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          +P (+P xP yP) zP ==
            +P xP (+P yP zP)
    record AdditiveSemigroupSig
      : Set where
      constructor AdditiveSemigroupSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
  
  module Carrier where
    record Carrier : Set where
      constructor CarrierC
      field
        A : Set
    record CarrierHom
      (C1 : Carrier) (C2 : Carrier) :
      Set where
      constructor CarrierHomC
      field
        hom : A C1 -> A C2
    data CarrierLang : Set where
      
    record CarrierProd : Set where
      constructor CarrierProdC
      field
        AP : Set
    record CarrierSig : Set where
      constructor CarrierSigSigC
      field
        AS : Set
  
  module CommutativeMagma where
    record CommutativeMagma
      : Set where
      constructor CommutativeMagmaC
      field
        A : Set
        op : A -> A -> A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
    record CommutativeMagmaHom
      (C1 : CommutativeMagma)
      (C2 : CommutativeMagma) :
      Set where
      constructor CommutativeMagmaHomC
      field
        hom : A C1 -> A C2
        pres-op :
          (x1 : A C1) (x2 : A C1) ->
          hom (op C1 x1 x2) ==
            op C2 (hom x1) (hom x2)
    data CommutativeMagmaLang
      : Set where
      opL :
        CommutativeMagmaLang ->
        CommutativeMagmaLang ->
        CommutativeMagmaLang
    record CommutativeMagmaProd
      : Set where
      constructor CommutativeMagmaProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
    record CommutativeMagmaSig
      : Set where
      constructor CommutativeMagmaSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module CommutativeMonoid where
    record CommutativeMonoid
      : Set where
      constructor CommutativeMonoidC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
        e : A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
    record CommutativeMonoidHom
      (C1 : CommutativeMonoid)
      (C2 : CommutativeMonoid) :
      Set where
      constructor CommutativeMonoidHomC
      field
        hom : A C1 -> A C2
        pres-op :
          (x1 : A C1) (x2 : A C1) ->
          hom (op C1 x1 x2) ==
            op C2 (hom x1) (hom x2)
        pres-e : hom (e C1) == e C2
    data CommutativeMonoidLang
      : Set where
      opL :
        CommutativeMonoidLang ->
        CommutativeMonoidLang ->
        CommutativeMonoidLang
      eL : CommutativeMonoidLang
    record CommutativeMonoidProd
      : Set where
      constructor CommutativeMonoidProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
    record CommutativeMonoidSig
      : Set where
      constructor CommutativeMonoidSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        eS : AS
  
  module CommutativeSemigroup where
    record CommutativeSemigroup
      : Set where
      constructor CommutativeSemigroupC
      field
        A : Set
        op : A -> A -> A
        commutative_op :
          (x : A) (y : A) ->
          op x y == op y x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
    record CommutativeSemigroupHom
      (C1 : CommutativeSemigroup)
      (C2 : CommutativeSemigroup) :
      Set where
      constructor CommutativeSemigroupHomC
      field
        hom : A C1 -> A C2
        pres-op :
          (x1 : A C1) (x2 : A C1) ->
          hom (op C1 x1 x2) ==
            op C2 (hom x1) (hom x2)
    data CommutativeSemigroupLang
      : Set where
      opL :
        CommutativeSemigroupLang ->
        CommutativeSemigroupLang ->
        CommutativeSemigroupLang
    record CommutativeSemigroupProd
      : Set where
      constructor CommutativeSemigroupProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        commutative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP) ->
          opP xP yP == opP yP xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
    record CommutativeSemigroupSig
      : Set where
      constructor CommutativeSemigroupSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module Empty where
    record Empty : Set where
      constructor EmptyC
      field
        
  
  module LeftUnital where
    record LeftUnital : Set where
      constructor LeftUnitalC
      field
        A : Set
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
    record LeftUnitalHom
      (L1 : LeftUnital)
      (L2 : LeftUnital) : Set where
      constructor LeftUnitalHomC
      field
        hom : A L1 -> A L2
        pres-e : hom (e L1) == e L2
        pres-op :
          (x1 : A L1) (x2 : A L1) ->
          hom (op L1 x1 x2) ==
            op L2 (hom x1) (hom x2)
    data LeftUnitalLang : Set where
      eL : LeftUnitalLang
      opL :
        LeftUnitalLang ->
        LeftUnitalLang -> LeftUnitalLang
    record LeftUnitalProd
      : Set where
      constructor LeftUnitalProdC
      field
        AP : Set
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
    record LeftUnitalSig : Set where
      constructor LeftUnitalSigSigC
      field
        AS : Set
        eS : AS
        opS : AS -> AS -> AS
  
  module Magma where
    record Magma : Set where
      constructor MagmaC
      field
        A : Set
        op : A -> A -> A
    record MagmaHom
      (M1 : Magma) (M2 : Magma) :
      Set where
      constructor MagmaHomC
      field
        hom : A M1 -> A M2
        pres-op :
          (x1 : A M1) (x2 : A M1) ->
          hom (op M1 x1 x2) ==
            op M2 (hom x1) (hom x2)
    data MagmaLang : Set where
      opL :
        MagmaLang ->
        MagmaLang -> MagmaLang
    record MagmaProd : Set where
      constructor MagmaProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record MagmaSig : Set where
      constructor MagmaSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module Monoid where
    record Monoid : Set where
      constructor MonoidC
      field
        A : Set
        op : A -> A -> A
        e : A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
    record MonoidHom
      (M1 : Monoid) (M2 : Monoid) :
      Set where
      constructor MonoidHomC
      field
        hom : A M1 -> A M2
        pres-op :
          (x1 : A M1) (x2 : A M1) ->
          hom (op M1 x1 x2) ==
            op M2 (hom x1) (hom x2)
        pres-e : hom (e M1) == e M2
    data MonoidLang : Set where
      opL :
        MonoidLang ->
        MonoidLang -> MonoidLang
      eL : MonoidLang
    record MonoidProd : Set where
      constructor MonoidProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
    record MonoidSig : Set where
      constructor MonoidSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
        eS : AS
  
  module Pointed where
    record Pointed : Set where
      constructor PointedC
      field
        A : Set
        e : A
    record PointedHom
      (P1 : Pointed) (P2 : Pointed) :
      Set where
      constructor PointedHomC
      field
        hom : A P1 -> A P2
        pres-e : hom (e P1) == e P2
    data PointedLang : Set where
      eL : PointedLang
    record PointedProd : Set where
      constructor PointedProdC
      field
        AP : Set
        eP : Prod AP AP
    record PointedSig : Set where
      constructor PointedSigSigC
      field
        AS : Set
        eS : AS
  
  module Pointed0Magma where
    record Pointed0Magma : Set where
      constructor Pointed0MagmaC
      field
        A : Set
        0 : A
        op : A -> A -> A
    record Pointed0MagmaHom
      (P1 : Pointed0Magma)
      (P2 : Pointed0Magma) : Set where
      constructor Pointed0MagmaHomC
      field
        hom : A P1 -> A P2
        pres-0 : hom (0 P1) == 0 P2
        pres-op :
          (x1 : A P1) (x2 : A P1) ->
          hom (op P1 x1 x2) ==
            op P2 (hom x1) (hom x2)
    data Pointed0MagmaLang
      : Set where
      0L : Pointed0MagmaLang
      opL :
        Pointed0MagmaLang ->
        Pointed0MagmaLang ->
        Pointed0MagmaLang
    record Pointed0MagmaProd
      : Set where
      constructor Pointed0MagmaProdC
      field
        AP : Set
        0P : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record Pointed0MagmaSig
      : Set where
      constructor Pointed0MagmaSigSigC
      field
        AS : Set
        0S : AS
        opS : AS -> AS -> AS
  
  module PointedMagma where
    record PointedMagma : Set where
      constructor PointedMagmaC
      field
        A : Set
        e : A
        op : A -> A -> A
    record PointedMagmaHom
      (P1 : PointedMagma)
      (P2 : PointedMagma) : Set where
      constructor PointedMagmaHomC
      field
        hom : A P1 -> A P2
        pres-e : hom (e P1) == e P2
        pres-op :
          (x1 : A P1) (x2 : A P1) ->
          hom (op P1 x1 x2) ==
            op P2 (hom x1) (hom x2)
    data PointedMagmaLang
      : Set where
      eL : PointedMagmaLang
      opL :
        PointedMagmaLang ->
        PointedMagmaLang ->
        PointedMagmaLang
    record PointedMagmaProd
      : Set where
      constructor PointedMagmaProdC
      field
        AP : Set
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
    record PointedMagmaSig
      : Set where
      constructor PointedMagmaSigSigC
      field
        AS : Set
        eS : AS
        opS : AS -> AS -> AS
  
  module PointedOne where
    record PointedOne : Set where
      constructor PointedOneC
      field
        A : Set
        1 : A
    record PointedOneHom
      (P1 : PointedOne)
      (P2 : PointedOne) : Set where
      constructor PointedOneHomC
      field
        hom : A P1 -> A P2
        pres-1 : hom (1 P1) == 1 P2
    data PointedOneLang : Set where
      1L : PointedOneLang
    record PointedOneProd
      : Set where
      constructor PointedOneProdC
      field
        AP : Set
        1P : Prod AP AP
    record PointedOneSig : Set where
      constructor PointedOneSigSigC
      field
        AS : Set
        1S : AS
  
  module PointedPlusMagma where
    record PointedPlusMagma
      : Set where
      constructor PointedPlusMagmaC
      field
        A : Set
        + : A -> A -> A
        e : A
    record PointedPlusMagmaHom
      (P1 : PointedPlusMagma)
      (P2 : PointedPlusMagma) :
      Set where
      constructor PointedPlusMagmaHomC
      field
        hom : A P1 -> A P2
        pres-+ :
          (x1 : A P1) (x2 : A P1) ->
          hom (+ P1 x1 x2) ==
            + P2 (hom x1) (hom x2)
        pres-e : hom (e P1) == e P2
    data PointedPlusMagmaLang
      : Set where
      +L :
        PointedPlusMagmaLang ->
        PointedPlusMagmaLang ->
        PointedPlusMagmaLang
      eL : PointedPlusMagmaLang
    record PointedPlusMagmaProd
      : Set where
      constructor PointedPlusMagmaProdC
      field
        AP : Set
        +P :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        eP : Prod AP AP
    record PointedPlusMagmaSig
      : Set where
      constructor PointedPlusMagmaSigSigC
      field
        AS : Set
        +S : AS -> AS -> AS
        eS : AS
  
  module PointedZero where
    record PointedZero : Set where
      constructor PointedZeroC
      field
        A : Set
        0 : A
    record PointedZeroHom
      (P1 : PointedZero)
      (P2 : PointedZero) : Set where
      constructor PointedZeroHomC
      field
        hom : A P1 -> A P2
        pres-0 : hom (0 P1) == 0 P2
    data PointedZeroLang : Set where
      0L : PointedZeroLang
    record PointedZeroProd
      : Set where
      constructor PointedZeroProdC
      field
        AP : Set
        0P : Prod AP AP
    record PointedZeroSig
      : Set where
      constructor PointedZeroSigSigC
      field
        AS : Set
        0S : AS
  
  module RightUnital where
    record RightUnital : Set where
      constructor RightUnitalC
      field
        A : Set
        e : A
        op : A -> A -> A
        runit_e : (x : A) -> op x e == x
    record RightUnitalHom
      (R1 : RightUnital)
      (R2 : RightUnital) : Set where
      constructor RightUnitalHomC
      field
        hom : A R1 -> A R2
        pres-e : hom (e R1) == e R2
        pres-op :
          (x1 : A R1) (x2 : A R1) ->
          hom (op R1 x1 x2) ==
            op R2 (hom x1) (hom x2)
    data RightUnitalLang : Set where
      eL : RightUnitalLang
      opL :
        RightUnitalLang ->
        RightUnitalLang ->
        RightUnitalLang
    record RightUnitalProd
      : Set where
      constructor RightUnitalProdC
      field
        AP : Set
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
    record RightUnitalSig
      : Set where
      constructor RightUnitalSigSigC
      field
        AS : Set
        eS : AS
        opS : AS -> AS -> AS
  
  module Semigroup where
    record Semigroup : Set where
      constructor SemigroupC
      field
        A : Set
        op : A -> A -> A
        associative_op :
          (x : A) (y : A) (z : A) ->
          op (op x y) z == op x (op y z)
    record SemigroupHom
      (S1 : Semigroup)
      (S2 : Semigroup) : Set where
      constructor SemigroupHomC
      field
        hom : A S1 -> A S2
        pres-op :
          (x1 : A S1) (x2 : A S1) ->
          hom (op S1 x1 x2) ==
            op S2 (hom x1) (hom x2)
    data SemigroupLang : Set where
      opL :
        SemigroupLang ->
        SemigroupLang -> SemigroupLang
    record SemigroupProd : Set where
      constructor SemigroupProdC
      field
        AP : Set
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        associative_opP :
          (xP : Prod AP AP)
          (yP : Prod AP AP)
          (zP : Prod AP AP) ->
          opP (opP xP yP) zP ==
            opP xP (opP yP zP)
    record SemigroupSig : Set where
      constructor SemigroupSigSigC
      field
        AS : Set
        opS : AS -> AS -> AS
  
  module Unital where
    record Unital : Set where
      constructor UnitalC
      field
        A : Set
        e : A
        op : A -> A -> A
        lunit_e : (x : A) -> op e x == x
        runit_e : (x : A) -> op x e == x
    record UnitalHom
      (U1 : Unital) (U2 : Unital) :
      Set where
      constructor UnitalHomC
      field
        hom : A U1 -> A U2
        pres-e : hom (e U1) == e U2
        pres-op :
          (x1 : A U1) (x2 : A U1) ->
          hom (op U1 x1 x2) ==
            op U2 (hom x1) (hom x2)
    data UnitalLang : Set where
      eL : UnitalLang
      opL :
        UnitalLang ->
        UnitalLang -> UnitalLang
    record UnitalProd : Set where
      constructor UnitalProdC
      field
        AP : Set
        eP : Prod AP AP
        opP :
          Prod AP AP ->
          Prod AP AP -> Prod AP AP
        lunit_eP :
          (xP : Prod AP AP) ->
          opP eP xP == xP
        runit_eP :
          (xP : Prod AP AP) ->
          opP xP eP == xP
    record UnitalSig : Set where
      constructor UnitalSigSigC
      field
        AS : Set
        eS : AS
        opS : AS -> AS -> AS
  

-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE DeriveDataTypeable #-}

module Tog.Raw.Abs where

import qualified Data.Generics as DG

newtype Name = Name ((Int,Int),String)
  deriving (Eq, Ord, Show, Read, DG.Typeable, DG.Data)

newtype Empty = Empty ((Int,Int),String)
  deriving (Eq, Ord, Show, Read, DG.Typeable, DG.Data)

data Module = Module Name Params [Decl]
  deriving (Eq, Ord, Show, Read, DG.Typeable, DG.Data)

data QName = Qual QName Name | NotQual Name
  deriving (Eq, Ord, Show, Read, DG.Typeable, DG.Data)

data Decl
    = TypeSig TypeSig
    | FunDef Name [Pattern] FunDefBody
    | Data Name Params DataBody
    | Record Name Params RecordBody
    | Open QName
    | OpenImport Import
    | Import Import
    | Postulate [TypeSig]
    | Module_ Module
  deriving (Eq, Ord, Show, Read, DG.Typeable, DG.Data)

data Import = ImportNoArgs QName | ImportArgs QName [Arg]
  deriving (Eq, Ord, Show, Read, DG.Typeable, DG.Data)

data TypeSig = Sig Name Expr
  deriving (Eq, Ord, Show, Read, DG.Typeable, DG.Data)

data Where = Where [Decl] | NoWhere
  deriving (Eq, Ord, Show, Read, DG.Typeable, DG.Data)

data Params
    = NoParams | ParamDecl [Binding] | ParamDef [HiddenName]
  deriving (Eq, Ord, Show, Read, DG.Typeable, DG.Data)

data HiddenName = NotHidden Name | Hidden Name
  deriving (Eq, Ord, Show, Read, DG.Typeable, DG.Data)

data DataBody
    = DataDecl Name | DataDef [Constr] | DataDeclDef Name [Constr]
  deriving (Eq, Ord, Show, Read, DG.Typeable, DG.Data)

data RecordBody
    = RecordDecl Name
    | RecordDef Name Fields
    | RecordDeclDef Name Name Fields
  deriving (Eq, Ord, Show, Read, DG.Typeable, DG.Data)

data Fields = NoFields | Fields [Constr]
  deriving (Eq, Ord, Show, Read, DG.Typeable, DG.Data)

data Constr = Constr Name Expr
  deriving (Eq, Ord, Show, Read, DG.Typeable, DG.Data)

data FunDefBody = FunDefNoBody | FunDefBody Expr Where
  deriving (Eq, Ord, Show, Read, DG.Typeable, DG.Data)

data Telescope = Tel [Binding]
  deriving (Eq, Ord, Show, Read, DG.Typeable, DG.Data)

data Binding = Bind [Arg] Expr | HBind [Arg] Expr
  deriving (Eq, Ord, Show, Read, DG.Typeable, DG.Data)

data Expr
    = Lam [Name] Expr
    | Pi Telescope Expr
    | Fun Expr Expr
    | Eq Expr Expr
    | App [Arg]
    | Id QName
  deriving (Eq, Ord, Show, Read, DG.Typeable, DG.Data)

data Arg = HArg Expr | Arg Expr
  deriving (Eq, Ord, Show, Read, DG.Typeable, DG.Data)

data Pattern
    = EmptyP Empty | ConP QName [Pattern] | IdP QName | HideP Pattern
  deriving (Eq, Ord, Show, Read, DG.Typeable, DG.Data)


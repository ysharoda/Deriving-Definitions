module MathScheme where

Theory Empty = {} 

Carrier = extend Empty {A : Set}

-- Not part of this library 
-- TwoCarrier = combine Carrier {} Carrier {A to B} over Empty 

Map plus = {op to +}
Map times = {op to *} 
Map zero = {e to 0}
Map one = {e to 1}
Map plus-zero = {op to + ; e to 0}
Map times-one = {op to * ; e to 1} 
Map nat  = {A to Nat}
Map linv = {op to linv}
Map rinv = {op to rinv}
Map natPlus = {A to Nat; op to +}
Map natZero = {A to Nat; e to 0} 
-- TODO: define these by composing the one above
Map additive = { A to Nat ; e to 0 ; op to + } 

Pointed = extend Carrier {e : A}
PointedZero = rename Pointed zero
PointedOne  = rename Pointed one 

TwoPointed = combine Pointed {e to e1} Pointed {e to e2} over Carrier 
TwoPointed01 = rename TwoPointed {e to zero ; e to one} -- Graph here

UnaryOperation = extend Carrier {prime : A -> A}
PointedUnarySystem = combine UnaryOperation {} Pointed {} over Carrier
FixedPoint = extend PointedUnarySystem {fixes_prime_e : prime e == e} 

Magma = extend Carrier {op : A -> A -> A}
PointedMagma = combine Pointed {} Magma {} over Carrier

InvolutiveMagmaSig = combine UnaryOperation {} Magma {} over Carrier 
InvolutivePointedMagmaSig = combine UnaryOperation {} PointedMagma {} over Carrier 
-- ------ alternative definition --------- 
-- InvolutivePointedMagmaSig2 = combine PointedUnarySystem {} Magma {} over Carrier 

Involution = extend UnaryOperation {involutive_prime : {x : A} -> prime (prime x) == x} 

UnaryDistributes =
  extend InvolutiveMagmaSig {distribute_prime_op : {x y : A} -> prime (op x y) == op (prime x) (prime y) }

UnaryAntiDistribution =
  extend InvolutiveMagmaSig {antidis_prime_op : {x y : A} -> prime (op x y) == op (prime y) (prime x) }

{-
NatCarrier = rename Carrier nat 
combine NatCarrier {} Magma natPlus over Carrier 
-} 
AdditiveMagma = rename Magma plus
MultMagma = rename Magma times 
AdditiveUnaryAntiDistribution =
  combine AdditiveMagma {} UnaryAntiDistribution plus over Magma 

IdempotentUnary =
  extend UnaryOperation {idempotent_prime : {x : A} -> prime (prime x) == prime x}

InvolutiveMagma = combine Involution {} UnaryAntiDistribution {} over UnaryOperation

LeftInverseMagma = rename Magma linv
RightInverseMagma = rename Magma rinv 

IdempotentMagma = extend Magma {idempotent_op : {x : A} -> op x x == x } 

IdempotentAdditiveMagma =
  combine AdditiveMagma {} IdempotentMagma plus over Magma 

-- SelectiveMagma = extend Magma {selective_op : {x y : A} -> Sigma (op x y == x)  (op x y == y)} 
-- SelectiveAdditiveMagma := SelectiveMagma [ * |-> +]

Pointed0Magma = combine PointedZero {} PointedMagma zero over Pointed
PointedPlusMagma = combine AdditiveMagma {} PointedMagma plus over Magma
AdditivePointedMagma = combine Pointed0Magma plus PointedPlusMagma zero over PointedMagma
Pointed1Magma = combine PointedOne {} PointedMagma one over Pointed
PointedTimesMagma = combine MultMagma {} PointedMagma times over Magma
MultPointedMagma = combine Pointed1Magma times PointedTimesMagma one over PointedMagma

CommutativeMagma = extend Magma {commutative_op : {x y : A} -> op x y == op y x}
CommutativeAdditiveMagma = combine AdditiveMagma {} CommutativeMagma plus over Magma
CommutativePointedMagma = combine PointedMagma {} CommutativeMagma {} over Magma

AntiAbsorbent = extend Magma {antiAbsorbent : {x y : A} -> op x (op x y) == y }
SteinerMagma = combine CommutativeMagma {} AntiAbsorbent {} over Magma 
Squag = combine SteinerMagma {} IdempotentMagma {} over Magma
PointedSteinerMagma = combine PointedMagma {} SteinerMagma {} over Magma
UnipotentPointedMagma = extend PointedMagma {unipotence : {x : A} -> op x x == e}
Sloop = combine PointedSteinerMagma {} UnipotentPointedMagma {} over PointedMagma 
LeftDistributiveMagma  = extend Magma {leftDistributive  : {x y z : A} -> op x (op y z) == op (op x y) (op x z)}
RightDistributiveMagma = extend Magma {rightDistributive : {x y z : A} -> op (op y z) x == op (op y x) (op z x)}
LeftCancellativeMagma  = extend Magma {leftCancellative  : {x y z : A} -> op z x == op z y -> x == y }
RightCancellativeMagma = extend Magma {rightCancellative : {x y z : A} -> op x z == op y z -> x == y }
CancellativeMagma = combine LeftCancellativeMagma {} RightCancellativeMagma {} over Magma 
LeftUnital = extend PointedMagma { lunit_e : {x : A} -> op e x == x }
RightUnital = extend PointedMagma { runit_e : {x : A} -> op x e == x }
Unital = combine LeftUnital {} RightUnital {} over PointedMagma


LeftBiMagma = combine Magma {} LeftInverseMagma {} over Carrier 
RightBiMagma = rename LeftBiMagma {linv to rinv}
--LeftBiMagma = combine LeftInverseMagma {} MultiplicativeMagma {} over Carrier
--RightBiMagma = combine LeftBiMagma {linv to rinv} RightInverseMagma {} over Magma
LeftCancellative = extend LeftBiMagma {leftCancel : {x y : A} -> op x (linv x y) == y }  
LeftCancellativeOp = extend LeftBiMagma {lefCancelOp : {x y : A} -> linv x (op x y) == y }
LeftQuasiGroup = combine LeftCancellative {} LeftCancellativeOp {} over LeftBiMagma
RightCancellative = extend RightBiMagma {rightCancel : {x y : A} -> op (rinv y x) x == y}
RightCancellativeOp = extend RightBiMagma {rightCancelOp : {x y : A} -> rinv (op y x) x  == y}
RightQuasiGroup = combine RightCancellative {} RightCancellativeOp {} over RightBiMagma
QuasiGroup = combine LeftQuasiGroup {} RightQuasiGroup {} over Magma 
MedialMagma = extend Magma {mediates : {w x y z : A} -> op (op x y) (op z w) == op (op x z) (op y w)}
MedialQuasiGroup = combine QuasiGroup {} MedialMagma {} over Magma
MoufangLaw = extend Magma {moufangLaw : {e x y z : A} -> (op y e) == y -> op (op (op x y) z) x == op x (op y (op (op e z) x))}
MoufangQuasiGroup = combine QuasiGroup {} MoufangLaw {} over Magma
LeftLoop = combine RightUnital {} LeftQuasiGroup {} over Magma
Loop = combine Unital {} QuasiGroup {} over Magma
MoufangIdentity = extend Magma {moufangId : {x y z : A} -> op (op z x) (op y z) == op (op z (op x y)) z}
MoufangLoop = combine Loop {} MoufangIdentity {} over Magma 

Map lshelf = {op to |>} 
Map rshelf = {op to <|}

LeftShelfSig = rename Magma lshelf 
LeftShelf = combine LeftShelfSig {} LeftDistributiveMagma lshelf over Magma 
RightShelfSig = rename Magma rshelf
RightShelf = combine RightShelfSig {} RightDistributiveMagma rshelf over Magma
ShelfSig = combine LeftShelfSig {} RightShelfSig {} over Carrier
LeftRack = combine ShelfSig {} LeftShelf {} over LeftShelfSig
RightRack = combine ShelfSig {} RightShelf {} over RightShelfSig 
Shelf = combine LeftRack {} RightRack {} over ShelfSig
LeftBinaryInverse = extend ShelfSig {leftInverse : {x y : A} -> <| (|> x y) x == y}
RightBinaryInverse = extend ShelfSig {rightInverse : {x y : A} -> |> x (<| y x) == y}
BinaryInverse = combine LeftBinaryInverse {} RightBinaryInverse {} over ShelfSig
Rack = combine Shelf {} BinaryInverse {} over ShelfSig

LeftIdempotence = combine IdempotentMagma lshelf LeftShelfSig {} over Magma
RightIdempotence = combine IdempotentMagma rshelf RightShelfSig {} over Magma
{- --------- interesting example here for arrow transportation -------- -} 
LeftSpindle = combine LeftShelf {} LeftIdempotence {} over LeftShelfSig
RightSpindle = combine RightShelf {} RightIdempotence {} over RightShelfSig
LeftSpindle_ShelfSig  = combine LeftSpindle {} ShelfSig {} over LeftShelfSig
RightSpindle_ShelfSig = combine RightSpindle {} ShelfSig {} over RightShelfSig 
LeftSpindle_Shelf = combine LeftSpindle {} Shelf {} over LeftShelf 
RightSpindle_Shelf = combine RightSpindle {} Shelf {} over RightShelf
Spindle = combine LeftSpindle_Shelf {} RightSpindle_Shelf {} over Shelf 
Quandle = combine Rack {} Spindle {} over Shelf
RightSelfInverse = extend LeftShelfSig {rightSelfInverse_|> : {x y : A} -> (|> (|> x y) y) == x}
Kei = combine LeftSpindle {} RightSelfInverse {} over LeftShelfSig
Semigroup = extend Magma {associative_op : {x y z : A} -> op (op x y) z == op x (op y z) }
AdditiveSemigroup = combine AdditiveMagma {} Semigroup plus over Magma
MultSemigroup = combine MultMagma {} Semigroup times over Magma 
CommutativeSemigroup = combine CommutativeMagma {} Semigroup {} over Magma 
AdditiveCommutativeSemigroup = combine AdditiveMagma {} CommutativeSemigroup plus over Magma 
LeftCancellativeSemigroup = combine Semigroup {} LeftCancellativeMagma {} over Magma
RightCancellativeSemigroup = combine Semigroup {} RightCancellativeMagma {} over Magma
CancellativeSemigroup = combine Semigroup {} CancellativeMagma {} over Magma 
CancellativeCommutativeSemigroup = combine CommutativeSemigroup {} CancellativeSemigroup {} over Semigroup
InvolutiveSemigroup = combine Semigroup {} InvolutiveMagma {} over Magma
InvolutivePointedSemigroup = combine PointedMagma{} InvolutiveSemigroup {} over Magma
Band = combine Semigroup {} IdempotentMagma {} over Magma
CommutativeBand = combine Band {} CommutativeMagma {} over Magma
MiddleAbsorption = extend Magma {middleAbsorb_* : {x y z : A} -> op (op x y) z == op x z}
MiddleCommute = extend Magma {middleCommute_* : {x y z : A} -> op (op (op x y) z) x == op (op (op x z) y) x}
RectangularBand = combine Band {} MiddleCommute {} over Magma
NormalBand = combine Band {} MiddleCommute {} over Magma
RightMonoid = combine RightUnital {} Semigroup {} over Magma
LeftMonoid  = combine LeftUnital {} Semigroup {} over Magma
Monoid = combine Unital {} Semigroup {} over Magma
AdditiveMonoid = combine AdditivePointedMagma {} Monoid plus-zero over PointedMagma
MultMonoid = combine MultPointedMagma {} Monoid times-one over PointedMagma
DoubleMonoid = combine AdditiveMonoid {} MultMonoid {} over Carrier 
Monoid1 = combine PointedOne {} Monoid one over Pointed
CommutativeMonoid = combine Monoid {} CommutativeSemigroup {} over Semigroup
CancellativeMonoid = combine Monoid {} CancellativeMagma {} over Magma 
CancellativeCommutativeMonoid = combine CancellativeMonoid {} CommutativeMonoid {} over Monoid
LeftZero  = extend PointedMagma {leftZero_op_e  : {x : A} -> op e x == e}
RightZero = extend PointedMagma {rightZero_op_e : {x : A} -> op x e == e}
Zero = combine LeftZero {} RightZero {} over PointedMagma
Left0 = combine LeftZero zero PointedZero {} over Pointed
Right0 = combine RightZero zero PointedZero {} over Pointed
ComplementSig = rename UnaryOperation {prime to compl}
CommutativeMonoid1 = combine CommutativeMonoid one Monoid1 {} over Monoid
AdditiveCommutativeMonoid = combine AdditiveMonoid {} CommutativeMonoid plus-zero over Monoid 
BooleanGroup = combine Monoid {} UnipotentPointedMagma {} over PointedMagma
Map inv = {prime to inv} 
InverseUnaryOperation = rename UnaryOperation inv  
InverseSig = combine InverseUnaryOperation {} InvolutivePointedMagmaSig inv over UnaryOperation
LeftInverse  = extend InverseSig {leftInverse_inv_op_e  : {x : A} -> op x (inv x) == e}
RightInverse = extend InverseSig {rightInverse_inv_op_e : {x : A} -> op (inv x) x == e}
Inverse = combine LeftInverse {} RightInverse {} over InverseSig
PseudoInverseSig = combine InvolutiveMagmaSig inv InverseUnaryOperation inv over UnaryOperation
PseudoInverse = extend PseudoInverseSig {quasiInverse_inv_op_e : {x : A} -> op (op x (inv x)) x == x}
PseudoInvolution = extend PseudoInverseSig
   {quasiRightInverse_inv_op_e : {x : A} -> op (op (inv x) x) (inv x) == inv x}
RegularSemigroup = combine Semigroup {} PseudoInverse {} over Magma
InverseSemigroup = combine PseudoInverse {} PseudoInvolution {} over PseudoInverseSig

Group  = combine Monoid {} Inverse {} over PointedMagma 
Group1 = combine Group one Monoid1 {} over Monoid
GroupInv = combine Group inv InverseUnaryOperation {} over UnaryOperation 
GroupPlus = combine AdditiveMonoid {} Group plus-zero over Monoid 
AdditiveGroup = combine GroupPlus inv GroupInv  plus-zero over Group 
CommutativeGroup = combine Group {} CommutativeMonoid {} over Monoid
AbelianGroup = combine CommutativeGroup {op to + ; e to 0 ; inv to neg} AdditiveGroup {inv to neg} over Group
RingoidSig = combine MultMagma {} AdditiveMagma {} over Carrier 
Ringoid0Sig = combine RingoidSig {} PointedZero {} over Carrier 
Ringoid1Sig = combine RingoidSig {} PointedOne  {} over Carrier
Ringoid01Sig = combine Ringoid0Sig {} Ringoid1Sig {} over RingoidSig
NonassociativeNondistributiveRing = combine AbelianGroup {} RingoidSig {} over AdditiveMagma 
LeftRingoid  = extend RingoidSig { leftDistributive_*_+  : {x y z : A} -> * x (+ y z) == + (* x y) (* x z) }
RightRingoid = extend RingoidSig { rightDistributive_*_+ : {x y z : A} -> * (+ y z) x == + (* y x) (* z x) }
Ringoid = combine LeftRingoid {} RightRingoid {} over RingoidSig 
NonassociativeRing = combine NonassociativeNondistributiveRing {} Ringoid {} over RingoidSig
PrimeRingoidSig = combine RingoidSig {} UnaryOperation {} over Carrier
AndDeMorgan = extend PrimeRingoidSig {andDeMorgan_*_+_prime : {x y z : A} -> prime (* x y) == + (prime x) (prime y) }
OrDeMorgran = extend PrimeRingoidSig {orDeMorgan_+_*_prime  : {x y z : A} -> prime (+ x y) == * (prime x) (prime y) }
DualDeMorgan = combine AndDeMorgan {} OrDeMorgran {} over PrimeRingoidSig
NonDistributiveAddPreSemiring  = combine AdditiveCommutativeSemigroup {} RingoidSig {} over AdditiveMagma
-- NonDistributiveRightPreSemiring = combine AdditiveCommutativeSemigroup {} RingoidSig {} over AdditiveMagma
AssociativeLeftRingoid = combine MultSemigroup {} LeftRingoid {} over MultMagma 
LeftPreSemiring = combine AssociativeLeftRingoid {} NonDistributiveAddPreSemiring {} over RingoidSig 
AssociativeRightRingoid = combine MultSemigroup {} RightRingoid {} over MultMagma 
RightPreSemiring = combine AssociativeRightRingoid {} NonDistributiveAddPreSemiring {} over RingoidSig 
PreSemiring = combine LeftPreSemiring {} RightRingoid {} over RingoidSig




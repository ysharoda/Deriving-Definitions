entrypoints Module;
entrypoints Expr;
entrypoints Language;
entrypoints Rens; 

layout "where";
layout "field";
layout "postulate";

Module. Module ::= "module" Name Params "where" "{" DeclOrLE "}";

Decl_.   DeclOrLE ::= [Decl];
Lang_.   DeclOrLE ::= [Language];

separator Language ";";
separator Decl ";";

TheoryC.  Language ::= "Theory" Name "=" "{" [Constr] "}";
MappingC. Language ::= "Map" Name "=" Rens;
ModExprC. Language ::= Name "=" ModExpr; 

position token Name ((((letter | '_') (letter | digit | '-' | '\'' | '_')*) | '+' | '*' | '|' | '<' | '>' | '=' | '\\' | '/' | '@' | digit)+) ;

Qual.    QName ::= QName "." Name;
NotQual. QName ::= Name;

TypeSig.    Decl  ::= TypeSig;
FunDef.     Decl  ::= Name [Pattern] FunDefBody;
Data.       Decl  ::= "data" Name Params DataBody;
Record.     Decl  ::= "record" Name Params RecordBody;
Open.       Decl  ::= "open" QName;
OpenImport. Decl  ::= "open" "import" Import;
Import.     Decl  ::= "import" Import;
Postulate.  Decl  ::= "postulate" "{" [TypeSig] "}";
Module_.    Decl  ::= Module;

Extend.      ModExpr ::= "extend" Name "{" [Constr] "}";
Rename.      ModExpr ::= "rename" Name Rens;
RenameUsing. ModExpr ::= "rename" Name "using" Name; 
CombineOver. ModExpr ::= "combine" Name Rens Name Rens "over" Name;
Combine.     ModExpr ::= Name "||" Name;
Transport.   ModExpr ::= Name "@" Name;
Arrow.       ModExpr ::= "from" Name "to" Name "using" Rens; 

NoRens.   Rens ::= "{" "}";
Rens.     Rens ::= "{" [RenPair] "}";
NameRens. Rens ::= Name; 

separator RenPair ";";
RenPair.  RenPair ::= Name "to" Name; 

separator TypeSig ";";

ImportNoArgs. Import ::= QName;
ImportArgs.   Import ::= QName [Arg];

Sig. TypeSig ::= Name ":" Expr;

Where.   Where ::= "where" "{" [Decl] "}";
NoWhere. Where ::= ;

NoParams.  Params ::= ;
ParamDecl. Params ::= [Binding];
ParamDef.  Params ::= [HiddenName];

NotHidden. HiddenName ::= Name;
Hidden.    HiddenName ::= "{" Name "}";
separator nonempty HiddenName "";

DataDecl.    DataBody ::= ":" Name;
DataDef.     DataBody ::= "where" "{" [Constr] "}";
DataDeclDef. DataBody ::= ":" Name "where" "{" [Constr] "}";

RecordDecl.    RecordBody ::= ":" Name;
RecordDef.     RecordBody ::= "where" "{" "constructor" Name Fields "}";
RecordDeclDef. RecordBody ::= ":" Name "where" "{" "constructor" Name Fields "}";

NoFields. Fields ::= ;
Fields.   Fields ::= ";" "field" "{" [Constr] "}";

Constr. Constr ::= Name ":" Expr;
separator Constr ";";

FunDefNoBody. FunDefBody ::= ;
FunDefBody.   FunDefBody ::= "=" Expr Where;

Tel. Telescope ::= [Binding];

Bind.  Binding ::= "(" [Arg] ":" Expr ")";
HBind. Binding ::= "{" [Arg] ":" Expr "}";
separator nonempty Binding "";

Lam.  Expr  ::= "\\" [Name] "->" Expr;
Pi.   Expr  ::= Telescope "->" Expr;
Fun.  Expr  ::= Expr1 "->" Expr;
_.    Expr  ::= Expr1;
Eq.   Expr1 ::= Expr2 "==" Expr2;
_.    Expr1 ::= Expr2;
App.  Expr2 ::= [Arg];
_.    Expr3 ::= "(" Expr ")";
Id.   Expr3 ::= QName;

HArg. Arg ::= "{" Expr "}";
Arg.  Arg ::= Expr3;
separator nonempty Arg "";

EmptyP. Pattern ::= Empty;
ConP.   Pattern ::= "(" QName [Pattern] ")";
IdP.    Pattern ::= QName;
HideP.  Pattern ::= "{" Pattern "}";
separator Pattern "";

position token Empty {"()"};

separator nonempty Name "";

comment "--";
comment "{-" "-}";

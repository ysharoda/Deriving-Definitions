module MathScheme where

Theory Empty = {} 

Carrier = extend Empty {A : Set} 

Pointed = extend Carrier {e : A}

Magma = extend Carrier {op : A -> A -> A}

PointedMagma = combine Pointed Magma over Carrier

LeftUnital = extend PointedMagma { lunit : {x : A} -> op e x == x }

RightUnital = extend PointedMagma { runit : {x : A} -> op x e == x }

Unital = combine LeftUnital RightUnital over PointedMagma

Semigroup = extend Magma {assoc : {x y z : A} -> (op (op x y) z) == (op x (op y z)) }

Monoid = combine Unital Semigroup over Magma 

AddPointedMagma = rename PointedMagma {op to plus ; e to zero }

AddMonoid = combine Monoid {op to plus ; e to zero} AddPointedMagma over PointedMagma 

{- ------------------- Problem ----------------------------- -} 

{- if the additive arrow is defined this way -} 

-- AddMagma = rename Magma {op to plus}

-- PointedZero = rename Pointed {e to zero}

-- AddPointedMagma = combine AddMagma PointedZero over Carrier 

{- it cannot be combined with Monoid, because there is not arrow from PointdMagma to AddPointedMagma -} 
-- AddMonoid = combine AddPointedMagma Monoid {op to plus ; e to zero} over PointedMagma

module TestSemiring where 

Map plus = {op to +}
Map zero = {e to 0}
Map times = {op to *} 
Map one = {e to 1}
Map plus-zero = {op to + ; e to 0}
Map additive = { e to 0 ; op to + }
Map times-one = {op to * ; e to 1}

Theory Empty = {} 
Carrier = extend Empty {A : Set}

Pointed = extend Carrier {e : A}
PointedZero = rename Pointed zero
PointedOne  = rename Pointed one

Magma = extend Carrier {op : A -> A -> A}
MultMagma = rename Magma times
AdditiveMagma = rename Magma plus

RingoidSig = combine MultMagma {} AdditiveMagma {} over Carrier

{- -------- PointedMagmas ---------- -} 

PointedMagma = combine Pointed {} Magma {} over Carrier

Pointed0Magma = combine PointedZero {} PointedMagma zero over Pointed
PointedPlusMagma = combine AdditiveMagma {} PointedMagma plus over Magma
AdditivePointedMagma = combine Pointed0Magma plus PointedPlusMagma zero over PointedMagma

Pointed1Magma = combine PointedOne {} PointedMagma one over Pointed
PointedTimesMagma = combine MultMagma {} PointedMagma times over Magma 
MultPointedMagma = combine PointedTimesMagma one Pointed1Magma times over PointedMagma 

PointedTimesZeroMagma = combine PointedTimesMagma zero Pointed0Magma times over PointedMagma 

{- --------- Zero Axioms ---------- -} 

LeftZero  = extend PointedMagma {leftZero_op_e  : {x : A} -> op e x == e}
RightZero = extend PointedMagma {rightZero_op_e : {x : A} -> op x e == e}
Zero = combine LeftZero {} RightZero {} over PointedMagma

Left0 = combine LeftZero zero Pointed0Magma {} over PointedMagma
Right0 = combine RightZero zero Pointed0Magma {} over PointedMagma

Zero0 = combine Zero zero Pointed0Magma {} over PointedMagma
Zero* = combine Zero times PointedTimesMagma {} over PointedMagma 
MultZero = combine Zero0 times Zero* zero over Zero

{- ---------- Monoid ---------- -}
Semigroup = extend Magma { associative_op : {x y z : A} -> op (op x y) z == op x (op y z) }
LeftUnital = extend PointedMagma { lunit_e : {x : A} -> op e x == x }
RightUnital = extend PointedMagma { runit_e : {x : A} -> op x e == x }
Unital = combine LeftUnital {} RightUnital {} over PointedMagma
Monoid = combine Unital {} Semigroup {} over Magma

{- ---------- MultMonoid --------- -}
MultSemigroup = combine MultMagma {} Semigroup times over Magma 
LeftUnital1 = combine LeftUnital one Pointed1Magma {} over PointedMagma
LeftUnital* = combine LeftUnital times PointedTimesMagma {} over PointedMagma
MultLeftUnital = combine LeftUnital1 times LeftUnital* one over LeftUnital 
RightUnital1 = combine RightUnital one Pointed1Magma {} over PointedMagma
RightUnital* = combine RightUnital times PointedTimesMagma {} over PointedMagma
MultRightUnital = combine RightUnital1 times RightUnital* one over RightUnital
MultUnital = combine MultLeftUnital {} MultRightUnital {} over PointedMagma
MultMonoid = combine MultSemigroup {} MultUnital {} over Magma 

{- -------- AdditiveCommutativeMonoid ---------- -}
AdditiveSemigroup = combine AdditiveMagma {} Semigroup plus over Magma 
LeftUnital0 = combine LeftUnital zero Pointed0Magma {} over PointedMagma
LeftUnital+ = combine LeftUnital plus PointedPlusMagma {} over PointedMagma
AdditiveLeftUnital = combine LeftUnital0 plus LeftUnital+ zero over LeftUnital 
RightUnital0 = combine RightUnital zero Pointed0Magma {} over PointedMagma
RightUnital+ = combine RightUnital plus PointedPlusMagma {} over PointedMagma
AdditiveRightUnital = combine RightUnital0 plus RightUnital+ zero over RightUnital
AdditiveUnital = combine AdditiveLeftUnital {} AdditiveRightUnital {} over PointedMagma
AdditiveMonoid = combine AdditiveSemigroup {} AdditiveUnital {} over Magma

CommutativeMagma = extend Magma {commutative_op : {x y : A} -> op x y == op y x}
AdditiveCommutativeMagma = combine CommutativeMagma plus AdditiveMagma {} over Magma
AdditiveCommutativeSemigroup = combine AdditiveCommutativeMagma {} AdditiveSemigroup {} over AdditiveMagma 
AdditiveCommutativeMonoid = combine AdditiveCommutativeSemigroup {} AdditiveUnital {} over AdditiveMagma 

{- ------------------ Ringoid ------------------- -}

RingoidSig = combine MultMagma {} AdditiveMagma {} over Carrier
LeftRingoid  = extend RingoidSig { leftDistributive_*_+  : {x y z : A} -> * x (+ y z) == + (* x y) (* x z) }
RightRingoid = extend RingoidSig { rightDistributive_*_+ : {x y z : A} -> *  (+ y z) x == + (* y x) (* z x) }
Ringoid = combine LeftRingoid {} RightRingoid {} over RingoidSig

{- ----------------- Semiring ------------------- -}
-- Semiring without distributivity 
-- Z1 = combine AdditiveCommutativeMonoid {} MultZero {} over PointedZero
-- Z2 = combine MultMonoid {} Z1 {} over MultMagma 

-- Transport everything to ringoid
--PZM_RingoidSig = combine PointedZeroMagma times RingoidSig {}  over Carrier 
--ACM_RingoidSig = combine AdditiveCommutativeMonoid {} PZM_RingoidSig {} over PointedMagma 
--PTZM_RingoidSig = combine PointedTimesZeroMagma {} RingoidSig {} over MultMagma
--MultZero_RingoidSig = combine MultZero {} RingoidSig {} over MultMagma
{-
MultZero_Ringoid = combine MultZero {} Ringoid {} over MultMagma 
MultDistribMonoid = combine MultMonoid {} Ringoid {} over MultMagma
ZeroDistribMonoid = combine MultZero_Ringoid {} MultDistribMonoid {} over Ringoid 
AdditiveDistribCommMonoid = combine AdditiveCommutativeMonoid {} Ringoid {} over AdditiveMagma 
TwoDistribMonoids = combine MultDistribMonoid {} AdditiveDistribCommMonoid {} over Ringoid
-- ZZZZ = combine ZeroDistribMonoid {} AdditiveDistribCommMonoid {} over 
-}
-- Try to replicate things

-- Replicating things at Ringoid: notice the definition of PointedRingoidSig
{- 
PointedRingoidSig = combine PointedMagma times RingoidSig {} over Magma
Ringoid0Sig = combine Pointed0Magma times PointedRingoidSig zero over PointedMagma
Ringoid1Sig = combine Pointed1Magma times PointedRingoidSig one over PointedMagma
Ringoid01Sig = combine Ringoid0Sig {} Ringoid1Sig {} over RingoidSig 
PointedRingoid = combine PointedRingoidSig {} Ringoid {} over RingoidSig
Ringoid0 = combine Ringoid0Sig {} PointedRingoid zero over PointedRingoidSig
Ringoid1 = combine Ringoid1Sig {} PointedRingoid one over PointedRingoidSig
Ringoid01 = combine Ringoid0 {} Ringoid1 {} over Ringoid

MultZero_Ringoid0 = combine MultZero {} Ringoid0 {} over PointedMagma
ACM_Ringoid0 = combine AdditiveCommutativeMonoid {} Ringoid0 {} over PointedMagma 
-}
{-
-- Replicating things at Ringoid: notice the definition of PointedRingoidSig
PointedRingoidSig* = combine PointedTimesMagma {} RingoidSig {} over MultMagma
PointedRingoidSig+ = combine PointedPlusMagma {} RingoidSig {} over AdditiveMagma

PointedRingoid* = combine PointedRingoidSig* {} Ringoid {} over RingoidSig
PointedRingoid+ = combine PointedRingoidSig+ {} Ringoid {} over RingoidSig

-- The problem: combining the next two theories causes collision between 0 and 1. 
MultZero_PRS* = combine MultZero {} PointedRingoid* zero over PointedMagma 
MultMonoid_PRS* = combine MultMonoid {} PointedRingoid* one over PointedMagma  
-}

ACM_With_* = combine AdditiveCommutativeMonoid {} RingoidSig {} over AdditiveMagma
MMon_With_+ = combine MultMonoid {} RingoidSig {} over MultMagma
TwoMonoids = combine ACM_With_* {} MMon_With_+ {} over RingoidSig
MZero_RingoidSig = combine MultZero {} RingoidSig {} over MultMagma


Ringoid0Sig = combine AdditivePointedMagma {} RingoidSig {} over AdditiveMagma 
Ringoid1Sig = combine MultPointedMagma {} RingoidSig {} over MultMagma
Ringoid01Sig = combine Ringoid0Sig {} Ringoid1Sig {} over RingoidSig
Ringoid01 = combine Ringoid {} Ringoid01Sig {} over RingoidSig 

ZeroRingoid01Sig = combine MultZero {} Ringoid01Sig {} over Pointed0Magma 

--PZ_MultZero_RSig = combine MultZero_RingoidSig {} PZ_RingoidSig {} over RingoidSig
--PZ_ACM_RSig = combine ACM_RingoidSig {} PZ_RingoidSig {} over RingoidSig
--ZZZZZ = combine ACM_RingoidSig {} PTZM_RingoidSig {} over PZ_RingoidSig

--ZZZACM_PTZM = combine AdditiveCommutativeMonoid {} PointedTimesZeroMagma {} over PointedZero
--ZZZMZ_PTZM = combine Zero0 times PointedTimesZeroMagma {} over PointedMagma


--ZeroAddCommMonoid = combine ZZZACM_PTZM {} ZZZMZ_PTZM {} over PointedTimesZeroMagma
--ZeroDistribAddCommMonoid = combine ZeroAddCommMonoid {} Ringoid {} over AdditiveMagma


--ZZZACM_Ringoid = combine AdditiveCommutativeMonoid {} Ringoid {} over AdditiveMagma
--MultZero_Ringoid = combine MultZero {} Ringoid {} over MultMagma 
--ZZZMZ_Ringodi = combine MultZero {} ZZZACM_Ringoid {} over PointedMagma

